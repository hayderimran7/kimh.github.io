<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Program Is Made At Night]]></title>
  <link href="http://kimh.github.io/atom.xml" rel="self"/>
  <link href="http://kimh.github.io/"/>
  <updated>2015-05-16T22:34:42+09:00</updated>
  <id>http://kimh.github.io/</id>
  <author>
    <name><![CDATA[kim hirokuni]]></name>
    <email><![CDATA[yangkookkim@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopressメモ]]></title>
    <link href="http://kimh.github.io/blog/octopress-memo-to-self/"/>
    <updated>2015-05-10T12:55:00+09:00</updated>
    <id>http://kimh.github.io/blog/octopress-memo-to-self</id>
    <content type="html"><![CDATA[<p><strong><em>To: ３日後には全てを忘れている自分へ</em></strong></p>

<p>今回、久しぶりにブログを書こうとしたらOctopressの仕組みを全く覚えていなくて、いろいろ回り道したせいで、ほぼ丸１日無駄にしてしまった。おそらく未来の自分はまた忘れるのだろうでここにメモをしておく。　</p>

<h3>masterとsourceブランチ</h3>

<p>ブログはGithub Pageでホスティングしている。ブログそのものは、<a href="http://kimh.github.io/">http://kimh.github.io/</a> で記事とかOctopressのコードは、<a href="https://github.com/kimh/kimh.github.io">https://github.com/kimh/kimh.github.io</a> で管理している。</p>

<p><a href="https://github.com/kimh/kimh.github.io">https://github.com/kimh/kimh.github.io</a> には <strong>master</strong> と <strong>source</strong> の二つのブランチがある。<strong>soruce</strong> にはmardkdownで書かれた記事が保存されていて、デプロイするとここから静的HTMLを生成して <strong>master</strong> にpushする。</p>

<p>今回このことを覚えていなくて時間の多くを無駄にしてしまった。というのも、新しいMacに移行した際に新しくブログのレポジトリをcloneしたんだけど、中身を見たら静的HTMLしか見当たらない。というかOctopressそのものが見当たらない。
あるのはmarkdownから生成されたと思われるhtmlファイルばっかり。「なんてこった！！！markdownで書いた記事はどこか別の場所で管理していて、それをGithubにはpushしていなかったんだ！今まで書いた記事が消失してしまった。やってもたー！！！」</p>

<p>それで、静的HTMLからmarkdownへがんばって変換して、復旧が完了した時にふと読んだOctopressの解説記事で <strong>source</strong> ブランチがあることを知った。恐る恐る <strong>source</strong> にcheckoutするとmarkdownで書かれた記事とOctopressがあるじゃないですか！</p>

<p>この発見はすごくショッキングだったけど、きっと未来の自分は忘れているんだろう。ということで、メモ。</p>

<ul>
<li><a href="https://github.com/kimh/kimh.github.io">https://github.com/kimh/kimh.github.io</a> には <strong><em>master</em></strong> と <strong><em>source</em></strong> ブランチがある。</li>
<li><strong><em>source</em></strong> にはmarkdownで書いた記事とOctopressがある</li>
<li><strong><em>master</em></strong> にはmarkdownからOctopressが生成した静的HTMLファイルがある</li>
<li><a href="http://kimh.github.io/">http://kimh.github.io/</a> は <strong><em>master</em></strong> を表示している</li>
<li>記事を編集する時は <strong><em>source</em></strong> で行う</li>
<li>というか、基本 <strong><em>master</em></strong> にcheckoutすることはない</li>
</ul>


<h3>Octopressのディレクトリ構成 (sourceブランチ)</h3>

<p>多くの時間を無駄にしてしまった原因の一つにそもそもOctopressのファイル構成を理解していなかったことがある。幸い今回の復旧作業ではそれ学ぶことができた。</p>

<p>以下は、<code>kimh.github.io</code>配下の重要ディレクトリ。</p>

<p><code>source/_posts</code>ディレクトリにはmarkdown記事が置いてある。ブログの編集作業の大半はここにあるファイルを編集することになる。</p>

<p><code>source/_includes</code>とか<code>source/_layouts</code>にはOctopressがブログサイトを構成するためのhtmlファイルが置いてある。ブログサイトそのものを変更したければここを直接いじることになる。3rd Party Themeがインストールされるのもここ（後述）</p>

<p><code>.themes</code>には3rd Party Themeを置く。置き方は、<code>git clone https://github.com/rwwaskk/linkedlist.git .themes/linkedlist</code>のようにするのが一般的な方法のよう。
<code>.themes</code>に置いたら、<code>rake install['name-of-theme']</code>でインストールできる。このコマンドを実行すると、<code>source</code>　配下にthemeが生成したHTMLやCSSやJavascriptが生成される。</p>

<h3>ブログサイトそのものに変更を加える</h3>

<p>前述したように、Octopressは<code>source</code>配下にあるファイルから静的HTMLを生成して、3rd Party Themeは<code>source</code>配下にインストールされる。しかし、時にはThemeが気に入らなくて自分で変更を加えたいこともあると思う。</p>

<p>例えば今回の復旧作業でThemeを<a href="https://github.com/rwwaskk/linkedlist">Linked List</a>インストールした状態だとブログのタイトルを site.sub_title から取得しようとしている。コードは<a href="https://github.com/rwwaskk/linkedlist/blob/master/source/_layouts/home.html#L10">linkedlist/source/_layouts/home.html</a></p>

<p>自分的にはここは site.title からとって欲しい。じゃー、どのファイルを編集するのかというと、一つは、<code>.themes/linkedlist/source/_layouts/home.html</code> 編集して、<code>rake install['name-of-theme']</code> で再インストールする。</p>

<p>もう一つは、<code>source/_layouts/home.html</code>を直接編集する。ここで一つ注意するのは、<strong>themeを再インストールするとsource/配下は全て置き換えてしまうので自分で加えた変更も上書きされてしまう。</strong></p>

<p>なので、この方法で編集した際はなんらかの理由でthemeを再インストールする時は要注意。(じゃー、やっぱりThemeのほうを変更すればよくない？と思うかもしれないけど、themeに自分の変更を加えるのはなんかおかしいと思う。この疑問は未解決。)</p>

<h3>よく使うOctopressコマンド</h3>

<p><strong><em>rake generate</em></strong></p>

<p><code>source</code>にあるファイルを<code>public</code>配下に静的HTMLとして生成する。</p>

<p><strong><em>rake preview</em></strong></p>

<p><a href="http://localhost:4000">http://localhost:4000</a> を立ち上げて、<code>public</code>配下をブラウザからアクセスできるようにする。</p>

<p><strong><em>rake setup_github_pages</em></strong></p>

<p>Github Pageにデプロイするために一度だけ実行しないといけない。</p>

<p><strong><em>rake deploy</em></strong></p>

<p><code>public</code>配下にあるファイルを<code>_deploy</code>ディレクトリにコピーして、<strong>master</strong> ブランチにpushする。少ししたら、ブログのurlからアクセスできるようになる。</p>

<p><strong><em>rake gen_deploy</em></strong></p>

<p>generateとdeployを一気に行う。とりあえず、deployしたい時はこれを実行しておけば問題ない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Practices of Backbone.Marionette That I believe The Best]]></title>
    <link href="http://kimh.github.io/blog/en/javascript/the-practices-of-backbone-marionette-that-i-believe-the-best-en/"/>
    <updated>2014-12-12T14:08:00+09:00</updated>
    <id>http://kimh.github.io/blog/en/javascript/the-practices-of-backbone-marionette-that-i-believe-the-best-en</id>
    <content type="html"><![CDATA[<h1>On Marionette.Module</h1>

<h2>Dividing app into sub-modules</h2>

<p>You can create sub-modules as many as you want inside one Marionette app. I higly enoucurage to take the advantage of sub-modules.</p>

<p>You can also say that sub-module is sub-application. The easiest way to imagine is Gmail. Gmail has many features: email, chat, contacts list, etc. You can construct each component as sub-modules in Marionette.</p>

<p>Let&rsquo;s look at how we define sub-modules.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">MyApp</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Marionette</span><span class="p">.</span><span class="nx">Application</span><span class="p">();</span>
</span><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ModuleA&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ModuleA</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// your module code goes here //</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may wonder about parameters in callback function. This is automatically passed in this order:</p>

<ul>
<li>The module itself</li>
<li>The Application object</li>
<li>Backbone</li>
<li>Backbone.Marionette</li>
<li>jQuery</li>
<li>Underscore</li>
</ul>


<p>They are defined in local scope and only accessbile from the callback function.</p>

<p>One of the benefits of using sub-modules is you can write codes of a module into separate files with ease.</p>

<p>Let&rsquo;s say you define a <code>ShoppingCart</code> module.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">MyApp</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Marionette</span><span class="p">.</span><span class="nx">Application</span><span class="p">();</span>
</span><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ShoppingCart&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ModuleA</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// your module code goes here //</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can easily guess what the module does: it takes care everything about shopping cart feature in your app.</p>

<p>One single <code>ShoppingCart</code> module is still too big to be written in a file. So, let&rsquo;s divide them into separate files based on functionality: <code>Controller</code> and <code>View</code>.</p>

<p><strong><em>shopping_cart_controller.js</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ShoppingCart&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ShoppingCart</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">ShoppingCart</span><span class="p">.</span><span class="nx">Controller</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="c1">// controller implementation goes here</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>shopping_cart_view.js</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ShoppingCart&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ShoppingCart</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">ShoppingCart</span><span class="p">.</span><span class="nx">View</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="c1">// view implementation goes here</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you create modules, you don&rsquo;t have to worry whether your module is already defined or not. If not defined, Marionette defines for you. So, in the previous case, <code>ShoppingCart</code> module is defined in <strong><em>shopping_cart_controller.js</em></strong> and <strong><em>shopping_cart_view.js</em></strong> just adds things to the module.</p>

<p>Maybe <code>ShoppingCart.View</code> still contains too many views to be in a single file such as <code>show_view</code> or <code>new_view</code>. You can further divide your <code>ShoppingCart</code> sub-module like this.</p>

<p><strong><em>show/shopping_cart_view.js</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ShoppingCart.View&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">View</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">View</span><span class="p">.</span><span class="nx">ShowView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="c1">// show view implementation goes here</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>new/shopping_cart_view.js</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ShoppingCart.View&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">View</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">View</span><span class="p">.</span><span class="nx">NewView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="c1">// new view implementation goes here</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>I create separate directories for <code>show</code> and <code>new</code> and put each file there. You can continue this process until you are satisfied.</p>

<p>Probalby enough words are spoken to introduce sub-modules.</p>

<p>So here is the pattern statement. <strong>Use sub-modules to seperate codes</strong></p>

<!--
Now, let's see the benifits of using sub-modules.

### Encapsulation

You can define public and private methods easily inside a module.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">MyApp</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Marionette</span><span class="p">.</span><span class="nx">Application</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ModuleA&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ModuleA</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// Defining public method</span>
</span><span class='line'>  <span class="nx">ModuleA</span><span class="p">.</span><span class="nx">publicMethod</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">privateMethod</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Defining private method</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">privateMethod</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;some value&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

Now other sub-modules can access public method but not private one.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">ModuleA</span><span class="p">.</span><span class="nx">publicMethod</span><span class="p">()</span> <span class="c1">// =&gt; &quot;some value&quot;</span>
</span><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">ModuleA</span><span class="p">.</span><span class="nx">privateMethod</span><span class="p">()</span> <span class="c1">// =&gt; &quot;Uncaught TypeError: undefined is not a function&quot;</span>
</span></code></pre></td></tr></table></div></figure>
&#8211;>


<h2>Starting and stopping sub-modules</h2>

<p>You can start and stop your sub-modules individually. By default, sub-modules is automatically started when Marionette parent app is started. You can change this behavior by <code>startWithParent</code> option.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ModuleA&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ModuleA</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">startWithParent</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">start</span><span class="p">()</span> <span class="c1">// this doesn&#39;t start ModuleA</span>
</span><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">ModuleA</span><span class="p">.</span><span class="nx">start</span><span class="p">()</span> <span class="c1">// you have to start by yourself</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why is this important? Because sometimes you want to execute some codes before starting other modules. Let&rsquo;s say you need to load some resources from a remote server when user enters your app and other modules are dependent on that resources.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;start&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Let&#39;s say deferredFetchihg grubs some data from remote server</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">deferredFetching</span><span class="p">()).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Set data to Module1</span>
</span><span class='line'>        <span class="nx">MyApp</span><span class="p">.</span><span class="nx">Module1</span><span class="p">.</span><span class="nx">setData</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Now Module1 is ready to start</span>
</span><span class='line'>        <span class="nx">MyApp</span><span class="p">.</span><span class="nx">Module1</span><span class="p">.</span><span class="nx">start</span><span class="p">()</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>How about <code>stop()</code>? I don&rsquo;t think you need to use <code>stop()</code> unless your app is huge so that you need to pay careful attention to memory usage.</p>

<p>However, <code>stop()</code> is very useful when it comes to testing. I will cover this in the following post.</p>

<h2>Organize your files by module base</h2>

<p>There is no canonical way to organize your files in Backbone.Marionette. However, it is good to agree on a convetion for how to name and organize files in project if you are working in a team. This is the pattern that works for me.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">project_root</span><span class="o">/</span>
</span><span class='line'>    <span class="o">|</span>
</span><span class='line'>    <span class="o">|---</span><span class="nx">application</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>    <span class="o">|</span>
</span><span class='line'>    <span class="o">|---</span><span class="nx">small_module</span><span class="o">/</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|---</span><span class="nx">small_module</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|---</span><span class="nx">small_module_controller</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|---</span><span class="nx">small_module_model</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|---</span><span class="nx">small_module_view</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|---</span><span class="nx">templates</span><span class="o">/</span>
</span><span class='line'>    <span class="o">|</span>              <span class="o">|</span>
</span><span class='line'>    <span class="o">|</span>              <span class="o">|---</span><span class="nx">template1</span><span class="p">.</span><span class="nx">hbs</span>
</span><span class='line'>    <span class="o">|</span>
</span><span class='line'>    <span class="o">|---</span><span class="nx">big_module</span><span class="o">/</span>
</span><span class='line'>           <span class="o">|</span>
</span><span class='line'>           <span class="o">|---</span><span class="nx">big_module</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>           <span class="o">|</span>
</span><span class='line'>           <span class="o">|---</span><span class="nx">big_module_controller</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>           <span class="o">|</span>
</span><span class='line'>           <span class="o">|---</span><span class="nx">big_module_model</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>           <span class="o">|</span>
</span><span class='line'>           <span class="o">|---</span><span class="k">new</span>
</span><span class='line'>           <span class="o">|</span>    <span class="o">|</span>
</span><span class='line'>           <span class="o">|</span>    <span class="o">|---</span><span class="nx">big_module_new_view</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>           <span class="o">|</span>    <span class="o">|</span>
</span><span class='line'>           <span class="o">|</span>    <span class="o">|---</span><span class="nx">templates</span><span class="o">/</span>
</span><span class='line'>           <span class="o">|</span>            <span class="o">|</span>
</span><span class='line'>           <span class="o">|</span>            <span class="o">|---</span><span class="nx">template1</span><span class="p">.</span><span class="nx">hbs</span>
</span><span class='line'>           <span class="o">|</span>            <span class="o">|---</span><span class="nx">template2</span><span class="p">.</span><span class="nx">hbs</span>
</span><span class='line'>           <span class="o">|---</span><span class="nx">edit</span>
</span><span class='line'>           <span class="o">|</span>    <span class="o">|</span>
</span><span class='line'>           <span class="o">|</span>    <span class="o">|---</span><span class="nx">big_module_edit_view</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>           <span class="o">|</span>    <span class="o">|</span>
</span><span class='line'>           <span class="o">|</span>    <span class="o">|---</span><span class="nx">templates</span><span class="o">/</span>
</span><span class='line'>           <span class="o">|</span>            <span class="o">|</span>
</span><span class='line'>           <span class="o">|</span>            <span class="o">|---</span><span class="nx">template1</span><span class="p">.</span><span class="nx">hbs</span>
</span><span class='line'>           <span class="o">|</span>            <span class="o">|---</span><span class="nx">template2</span><span class="p">.</span><span class="nx">hbs</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>application.js</code> is where you want to decalre global things of your app. This includes</p>

<ul>
<li>App initialization code</li>
<li>App starting code (Ex: <code>App.start()</code>)</li>
<li>Route definition and initilalization</li>
<li>Useful global helper (Ex: <code>App.currentUser()</code>, <code>App.showSuccessNotification()</code>)</li>
</ul>


<p>I like module-based file hierarchy.</p>

<p>In module based organization, files other than application.js goes under each module directory. If the module is big one, they are further broken down into seperate directories by action.</p>

<p>The role of each file under module direclty is self-explanatory except <code>&lt;module_name&gt;.js</code>.</p>

<p><code>&lt;module_name&gt;.js</code> is used to define basic things for the entier module. These includes:</p>

<ul>
<li>module option (Ex. <code>this.startWithParent = false</code>)</li>
<li>module initilaization (Ex. <code>addInitializer({})</code> )</li>
<li>event listener (Ex. <code>Module1.on("event", function({}))</code>)</li>
</ul>


<p>Maybe it is fair to explain <code>&lt;module_name&gt;_controller.js</code> since it does not exist in Backbone as well.</p>

<p><code>&lt;module_name&gt;_controller.js</code> holds methods that redpond to user entry to your app. One example of such method is something like <code>showItem()</code>. What <code>showItem()</code> does is that instantiate a view, fetch model, pass it to view, and call <code>render()</code> of view to display html. It is similar to what Rails ActionController does.</p>

<p>At last, you may think it is redudant to prefix every files with module name, but this makes it easy to search files by module name. Not must to have, but it is useful once your project becomes bigger where you have many <code>controller.js</code> or <code>view.js</code>.</p>

<h1>About View</h1>

<h2>Organizing DOM with ui</h2>

<p>This pattern is inspired by <a href="http://lxyuma.hatenablog.com/entry/2014/01/23/002644">the blog post</a>.</p>

<p><a href="https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.itemview.md#organizing-ui-elements">ui</a> is simple yet very powerful feature of Marionette. You can organize view&rsquo;s DOM by using <code>ui</code>. Here is simple example. Say your have a template.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;edit_form&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;name_input&quot;</span><span class="nt">&gt;</span>Name
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;email_input&quot;</span><span class="nt">&gt;</span>Name
</span><span class='line'>  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;js-submit&quot;</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And your view code looks like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="s2">&quot;#edit_form&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">ui</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">nameInput</span><span class="o">:</span> <span class="s2">&quot;input.name_input&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">emailInput</span><span class="o">:</span> <span class="s2">&quot;input.email_input&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">submitButton</span><span class="o">:</span> <span class="s2">&quot;button.js-submit&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you don&rsquo;t have ui, you can access name input by using jQuery like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyView</span><span class="p">()</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">myView</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;input.name_input&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>By using <code>ui</code>, you can access this way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyView</span><span class="p">()</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">myView</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">nameInput</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The difference is subtle, but later one is more maintainable. Here is why.</p>

<p>Html markups are the subject of frequent changes. This is not an issue if the DOM is referenced from a single place. However, when multiple places look at a single DOM, it becomes difficult to maintain.</p>

<p>Suppose one person changes the class name of a input field from <code>name_input</code> to <code>name_field</code>. Also suppose that many codes refer the DOM by using jQuery: <code>myView.$el.find("input.name_input")</code>. Now, you have to change every codes that uses jQuery to  access the DOM. If the DOM is referenced from tests codes, these tests all suddenly break  and updating every places is the nightmare.</p>

<p><code>ui</code> solves the issue. If your codes refer the DOM by using <code>myView.ui.nameInput</code>, then the person who changes the html only needs to change <code>ui</code> object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ui</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">nameInput</span><span class="o">:</span> <span class="s2">&quot;input.name_field&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// edited for brevity //</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the rest of codes stay the same. Huge improvement.</p>

<p>So here is the pattern statement. <strong>Avoid jQuery and always use ui to access view&rsquo;s DOM</strong></p>

<h2>Using LayoutView to create nested sub-views</h2>

<p>This pattern is inspired by <a href="http://lostechies.com/derickbailey/2012/03/22/managing-layouts-and-nested-views-with-backbone-marionette/">the blog post</a>.</p>

<p>I saw different people use different ways to create nested views in vanilla Backbone app. Marionette however provides us a nice pattern to archive this.</p>

<p>We will use Marionette <a href="https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.layoutview.md#marionettelayoutview">LayoutView</a> and <a href="https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.region.md#marionetteregion">Region</a>.</p>

<p>Let&rsquo;s take a example of creating shopping car page. The page contains two sub-views: item list view and pricing view.</p>

<p><img src="http://kimh.github.io/images/shopping_cart1.png" alt="" /></p>

<p>Here is our code that creates this shopping cart page. First we create a layout html and layout view.</p>

<p><strong>shopping_cart_layout.html</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;shopping_cart_layout&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;itemlist_region&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;price_region&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>shopping_cart_layout_view.js</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ShoppingCartLayoutView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">LayoutView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="s2">&quot;#shopping_cart_layout&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">regions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">itemListRegion</span><span class="o">:</span> <span class="s2">&quot;#itemlist_region&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">priceListRegion</span><span class="o">:</span> <span class="s2">&quot;#price_region&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s talk briefly about what <code>LayoutView</code> is. According to <a href="https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.layoutview.md#marionettelayoutview">official doc</a>,</p>

<blockquote><p>A LayoutView is a hybrid of an ItemView and a collection of Region objects.</p></blockquote>

<p>So, it is simply extended from <code>ItemView</code> and add <code>Region</code> objects. Since it is extended from <code>ItemView</code>, you can attach template where you can speficy region container DOM. Layout can hold as many region objects as you want so they are suitable to create a parent view.</p>

<p>Now, let&rsquo;s quickly create our sub-views. The template for these views are not important at this subject so let&rsquo;s imagine we have templates for them.</p>

<p><strong>item_list_view.js</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ItemView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="nx">ItemTpl</span><span class="p">,</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ItemListView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">CollectionView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">childView</span><span class="o">:</span> <span class="nx">ItemView</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>price_view.js</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">PriceListView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="nx">PriceTpl</span><span class="p">,</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we are ready to put all things together. Here is the code that renders the shopping cart page. Again, model and collection are not important at this subject, so let&rsquo;s assume we have <code>items</code> collections already.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Instantiate views</span>
</span><span class='line'><span class="nx">layoutView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ShoppingCartLayoutView</span><span class="p">()</span>
</span><span class='line'><span class="nx">itemListView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ItemListView</span><span class="p">({</span><span class="nx">collections</span><span class="o">:</span> <span class="nx">items</span><span class="p">})</span> <span class="c1">// We assume that items is the collection</span>
</span><span class='line'><span class="nx">priceListView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PriceListView</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Put them into layout regions</span>
</span><span class='line'><span class="nx">layoutView</span><span class="p">.</span><span class="nx">itemListRegion</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="nx">itemListView</span><span class="p">);</span>
</span><span class='line'><span class="nx">layoutView</span><span class="p">.</span><span class="nx">priceListRegion</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="nx">priceview</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it. Marionette region provides a convenient method called <code>show()</code> where you can pass any views to be rendered. <code>el</code> property of passed views are automatically provided by region. This is the reason why you don&rsquo;t see <code>el</code> object often when using Marionette.</p>

<p>Creating further nested sub-view is easy. Let&rsquo;s say you want to divide <code>PriceListView</code> into <code>TotalPriceListView</code> and <code>SubTotalPriceListView</code>.</p>

<p><img src="http://kimh.github.io/images/shopping_cart2.png" alt="" /></p>

<p>What you have to do is extending <code>PriceListView</code> from <code>LayoutView</code> instead of <code>ItemView</code> and add region objects.</p>

<p><strong>price_view.js</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">PriceListView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">Layout</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="c1">// Let&#39;s assume the template has #total_price_region and #sub_total_price_region</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="nx">PriceTpl</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">regions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">totalRegion</span><span class="o">:</span> <span class="s2">&quot;#total_price_region&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">subTotalRegion</span><span class="o">:</span> <span class="s2">&quot;#sub_total_price_region&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">totalPriceListView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="nx">totalPriceTpl</span><span class="p">,</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">subTotalPriceListView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="nx">subTotalPriceTpl</span><span class="p">,</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And put them together.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">priceListView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PriceListView</span><span class="p">()</span>
</span><span class='line'><span class="nx">totalPriceListView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TotalPriceListView</span><span class="p">()</span>
</span><span class='line'><span class="nx">subTotalPriceListView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SubTotalPriceListView</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">priceListView</span><span class="p">.</span><span class="nx">totalRegion</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="nx">totalPriceListView</span><span class="p">)</span>
</span><span class='line'><span class="nx">priceListView</span><span class="p">.</span><span class="nx">subTotalRegion</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="nx">subTotalPriceListView</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s a piece of cake.</p>

<p>Before closing this section, let me introduce how to access views rendered inside region because you will often use it.</p>

<p>Let&rsquo;s say you want to access <code>&lt;div id="total_price"&gt;$10000&lt;/div&gt;</code> DOM to get the total price of the shopping cart from your code. In this case, you will use <code>currentView()</code> API. The code looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">layoutView</span><span class="p">.</span><span class="nx">priceListRegion</span><span class="p">.</span><span class="nx">currentView</span><span class="p">.</span><span class="nx">totalRegion</span><span class="p">.</span><span class="nx">currentView</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">totalPrice</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, it&rsquo;s easy to access the value of nested sub-views.</p>

<p>So here is the pattern statement. <strong>Use LayoutView to create sub-views over simple ItemView.</strong></p>

<h1>About Controller</h1>

<p>If you come from vanilla Backbone, you are not sure what the role of Controller in Marionette. Unforunately, official doc doesn&rsquo;t help you either.</p>

<p>Quoted from <a href="https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.controller.md">here</a></p>

<blockquote><p>Its name can be a cause for confusion, as it actually has nothing to do with the popular MVC architectural pattern. Instead, it&rsquo;s better to think of the Controller as a base object from which you can build.</p>

<p>Controllers should be used when you have a task that you would like an object to be responsible for, but none of the other Marionette Classes quite make sense to do it. It&rsquo;s a base object for you to use to create a new Class altogether.</p></blockquote>

<p>This makes you further puzzled. How should I use Controller?</p>

<p>Here is how I use Controller.</p>

<h2>Use Controller as integrator</h2>

<p>This pattern is inspired by <a href="https://leanpub.com/marionette-gentle-introduction">the book</a>.</p>

<p>The role of Controller is to instantiate objects, access backend, and build complex vies: performs everything required to render a complete page in a browser.</p>

<p>Let&rsquo;s imagine that we want to render previous shopping cart page.</p>

<p><img src="http://kimh.github.io/images/shopping_cart1.png" alt="" /></p>

<p>To render the page, several things has to be done.</p>

<ul>
<li>Instantiate views (layout views, item list views, etc)</li>
<li>Retrieve items and prices (ajax call to backend server)</li>
<li>Render views (call show() method of views)</li>
<li>Error handling (when ajax call fail )</li>
</ul>


<p>I will perform these things in a single method <code>showShoppingCart()</code> and this method goes to our imaginary ShoppingCart module.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ShoppingCart&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ShoppingCart</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">ShoppingCart</span><span class="p">.</span><span class="nx">Controller</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">showShoppingCart</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// implementation of this methods</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside the method, you write codes that perform things that I mentioned above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ShoppingCart&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ShoppingCart</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">ShoppingCart</span><span class="p">.</span><span class="nx">Controller</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">showShoppingCart</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Let&#39;s suppose that items and its prices are saved in backend.</span>
</span><span class='line'>            <span class="c1">// So, we need to retrive them from backend server asynchronously.</span>
</span><span class='line'>            <span class="c1">// Imaginary MyApp.request(&quot;items&quot;) and MyApp.request(&quot;price&quot;)</span>
</span><span class='line'>            <span class="c1">// returns promise object that fetches items and prices respectively.</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">fetchingItems</span> <span class="o">=</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="s2">&quot;items&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">fetchingPrice</span> <span class="o">=</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="s2">&quot;prices&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Instantiate a layout view that provides regions</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">layoutView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ShoppingCartLayoutView</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">fetchingItems</span><span class="p">,</span> <span class="nx">fetchingPrice</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">items</span><span class="p">,</span> <span class="nx">prices</span><span class="p">){</span>
</span><span class='line'>                <span class="c1">// Add callback method when ajax call is successfully done.</span>
</span><span class='line'>                <span class="c1">// First, we will build collections</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">itemList</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ItemList</span><span class="p">([</span><span class="nx">items</span><span class="p">]);</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">priceList</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PriceList</span><span class="p">([</span><span class="nx">prices</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Now we can instantiate views and pass colletion to them</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">itemListView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ItemListView</span><span class="p">({</span><span class="nx">collection</span><span class="o">:</span> <span class="nx">itemList</span><span class="p">});</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">priceListView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PriceListView</span><span class="p">({</span><span class="nx">collection</span><span class="o">:</span> <span class="nx">priceList</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// At this point we are ready to render a complete paga for user</span>
</span><span class='line'>                <span class="nx">layoutView</span><span class="p">.</span><span class="nx">itemListRegion</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="nx">itemListView</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">layoutView</span><span class="p">.</span><span class="nx">priceListRegion</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="nx">priceListView</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// We don&#39;t want user to see nasty error, so let&#39;s add error handling</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">fetchingItems</span><span class="p">,</span> <span class="nx">fetchingPrice</span><span class="p">).</span><span class="nx">fail</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// OopsView will show error message to user</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">oopsView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OopsView</span><span class="p">({</span><span class="nx">error</span><span class="o">:</span> <span class="s2">&quot;oops, something went wrong&quot;</span><span class="p">});</span>
</span><span class='line'>                <span class="nx">layoutView</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">oopsView</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The example above is pseudo code so it doesn&rsquo;t work, but should be easy enough to demonstrate my idea.</p>

<p>As you can see, my <code>showShoppingCart()</code> method does everthing including error handling required to show a shopping cart page to user. Now, somebody must call the method. Who will it be?</p>

<p>It is the responsibility of <code>Marionette.AppRouter</code>. Router is the first one that responds when user enters your app. It&rsquo;s job is to look at url and call Controller&rsquo;s methods. Here is how you can pass your <code>ShoppingCart.Controller</code> to router.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// First we need to define router</span>
</span><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">Router</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">AppRouter</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">appRoutes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;shopping_cart&quot;</span><span class="o">:</span> <span class="s2">&quot;showShoppingCart&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Instantiate controller object</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">shoppingCartController</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ShoppingCat</span><span class="p">.</span><span class="nx">Controller</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Register controller</span>
</span><span class='line'><span class="k">new</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">Router</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="nx">shoppingCartController</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, if user accesses <code>/shopping_cart</code> page, router will call <code>showShoppingCart()</code> method of <code>ShoppingCat.Controller</code>.</p>

<p>There is one implicit thing involved here. The object you pass to <code>controller</code> property of router must implement the method that you define in <code>appRoutes</code> objects.</p>

<p>In this case, since you define <code>"shopping_cart": "showShoppingCart"</code> in routing, <code>shoppingCartController</code> object must implement <code>showShoppingCart()</code> method, which is exactly how we implemented our controller earlier.</p>

<p>If you have experiences with server side MVC frameworks, like RoR, then you may notice that I am using the Marionette Controller like the way I use ActionController of Rails: called by router and does everything needed to render a view. Isn&rsquo;t this contradictory to what <a href="[here](https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.controller.md">official doc</a> says?</p>

<p><strong><em>Yes and no</em></strong>. Yes, because it is used by router and both performs similar tasks. No, because the role of server side Controller is providing HTTP terminal point whereas client side Controller does not do this.</p>

<p>Anyway, I am currently satisfied with the way I use Controller.</p>

<p>So here is the pattern statement. <strong>Use Controller to provide public methods to router that integrates different componetns</strong></p>

<h2>Add event listener on view inside Controller</h2>

<p>I often ask this question myself: <em>Is it ok that my View does ajax call?</em> Can you imagine what I am talking about? The View that makes ajax call looks like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">FormView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;click button.submit&#39;</span><span class="o">:</span> <span class="s1">&#39;submitForm&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">submitForm</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Get form data somehow//</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">getFormData</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Model.save fires ajax call to remote server</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;form is submitted&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, the code above does:</p>

<ul>
<li>Listens on <code>click</code> event and call <code>submitForm</code> method</li>
<li>Makes ajax call to save form data to backend server</li>
<li>Execute callbacks for ajax call</li>
</ul>


<p>This is perfectly valid code in Backbone. However, having Controller in Marionette now, I&rsquo;d rather want to push this task to Controller and let View simply listening and triggering event.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">FormView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;click button.submit&#39;</span><span class="o">:</span> <span class="s1">&#39;submitForm&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">submitForm</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;form:submit&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">FormController</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">showForm</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">formView</span> <span class="o">=</span> <span class="nx">FormView</span><span class="p">.</span><span class="k">new</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">formView</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;form:submit&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">model</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;form is submitted&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">MyApp</span><span class="p">.</span><span class="nx">region</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="nx">formView</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, I simply move codes from View to Controller. What&rsquo;s the benefits of doing this? One thing is that View code gets slimed and it can focus on the mapping of DOM and event.</p>

<p>Our Controller instead gets messy but that&rsquo;s the tradeoff. After all, that&rsquo;s how Controller is designed to be used: <strong><em>put things that fit nowhere else</em></strong>.</p>

<p>It also makes sense to put codes to Controller because Controller has more accesses to other components than a view. Imagine a case where you have to access other views inside the event listener.
You can&rsquo;t access other views directly from a view. Instead, you need to use App level event publishing to archive this.</p>

<p>On the other hand, Controller has an access to everything needed to render the page so it can easily talk to other views.</p>

<p>Before, finishing this section, let me slightly imporve the code above. We will use <a href="https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.view.md#viewtriggers">View.triggers</a>.</p>

<p>Here is the new version of View:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">FormView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">triggers</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;click button.submit&#39;</span><span class="o">:</span> <span class="s1">&#39;form:submit&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We removed <code>submitForm</code> method and <code>event</code> objects. Instead, we use <code>trigger</code> object that does the two thing at the same time: <em>listen on events</em> and <em>trigger events</em>. Now, our view is much cleaner than before!!</p>

<p>So here is the pattern statement. <strong>Add event listener on Views inside Controller</strong></p>

<!--
## Responsibility of MVC Components

Marionette brings consistency to your Backbone app. However, this is not enough if you are working in a team. Marionette still allows developrs to write codes whatever they want which rapidly makes your project spaghetti. It's important to understand your codes must go where. To understand this, let's clarify the role of MVC components in Marionette.

### M
The responsibility of model is clearer than other components, so I will go quickly.

#### Business logic
Just like model of server side, this is the place where you write code for business logic.

**Ex.** Calculate and return total price by adding tax to sub-total.

#### Ajax ####
When modle is mapped to external resource, it fetches resource from external servers.

#### Validation ####
Before modle is saved into exteranl database, it needs to validate data. When validation fails, it must notifies by using event. View must respond to validation event and notifies user.

### V
This is the place which easily becomes chaotic because vanilla Backbone puts much burden to View.

#### Render html
When you define View, you will speficy which template to use. Template value is fetched by a model that View holds and rendered as html document.

#### Define mapping of DOM and event
You can define what action of user for DOM elements do what in View. This is done by `events` propety. I don't want to go detail about this since implementation is not the the subject of post, but just briefly showing an example.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">MyView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">ui</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">paragraph</span><span class="o">:</span> <span class="s1">&#39;p&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">button</span><span class="o">:</span> <span class="s1">&#39;.my-button&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;click ui.button&#39;</span><span class="o">:</span> <span class="s1">&#39;clickedButton&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">clickedButton</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;I clicked the button!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

View listens on click event of `ui.button` and trigger clickedButton() event. Notice `ui` propety. This does not exist in Backbone. You can pass a object that mappes properties and jQuery DOM. You can access the DOM like this.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'> <span class="nx">MyView</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">paragraph</span>
</span></code></pre></td></tr></table></div></figure>

This is simple yet very powerful feature. I will write more about this in subsequent post.

#### Listens on Model/Collection change event
Most of Views are passed model or collection. Whenever there are changes to model/collection (Ex. setting new value to the field of model / model is removed from collection ), View responds to the event, changes its $el, and modifies its own html.

### C
Controller is loosely defined even in official doc.

Quoted from [here](https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.controller.md)
> Its name can be a cause for confusion, as it actually has nothing to do with the popular MVC architectural pattern. Instead, it&#8217;s better to think of the Controller as a base object from which you can build.
>
> Controllers should be used when you have a task that you would like an object to be responsible for, but none of the other Marionette Classes quite make sense to do it. It&#8217;s a base object for you to use to create a new Class altogether.

So, as the doc says, Controller is the place where you can put things that fit nowhere else.

But, what exactly are they?

#### Executing action for router
When user enters your app, router will invoke controller actions. Let&#8217;s assume you have controller like so:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ModuleA&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ModuleA</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">ModuleA</span><span class="p">.</span><span class="nx">Controller</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">listItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Some codes to show item here</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">ModuleA</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

Now you can pass your controller to `controller` property of router.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ModuleA&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ModuleA</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">controller</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ModuleA</span><span class="p">.</span><span class="nx">Controller</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">ModuleA</span><span class="p">.</span><span class="nx">Router</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">AppRouter</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">controller</span><span class="o">:</span> <span class="nx">controller</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">appRoutes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;items&quot;</span><span class="o">:</span> <span class="s2">&quot;listItem&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>
Then when user enters your app from `/items`, router will execute `controller.listItem()` method which is defined at `ModuleA.Controller`.

So, as you can see, I am using Controller pretty much like the way I use Rails ActionController. I don&#8217;t see no reason why this is wrong even if doc says it is nothing to do with server side MVC.

#### Assemble things together
You saw how router invokes Controller methods. Now, let&#8217;s look at `listItem()` method. The method looks something like this:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">listItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">deferredFetch</span> <span class="o">=</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="s2">&quot;items&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">collectionView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ItemCollectionView</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Let&#39;s assume you have Spinner class.</span>
</span><span class='line'>    <span class="c1">// This will show loading spinner until items are fetched from server.</span>
</span><span class='line'>    <span class="nx">MyApp</span><span class="p">.</span><span class="nx">mainRegion</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="k">new</span> <span class="nx">Spinner</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">deferredFetch</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">collectionView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ItemCollectionView</span><span class="p">({</span><span class="nx">collection</span><span class="o">:</span> <span class="nx">items</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Once fetching is done, show items</span>
</span><span class='line'>        <span class="nx">MyApp</span><span class="p">.</span><span class="nx">mainRegion</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="nx">collectionView</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span><span class="o">/</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">deferredFetch</span><span class="p">).</span><span class="nx">fail</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Let&#39;s assume you have OopsView.</span>
</span><span class='line'>        <span class="c1">// This will show &quot;oops, something went wrong&quot; when fethcing fails</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">oopsView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OopsView</span><span class="p">()</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

As you can see, `listItem()` method interacts many things. It also takes care of showing loading spinner as well as error handling. This is the main responsibility of Controller. It assemble many parts defined in different modules and control the flow of action.

&#8211;>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby LotusでWeb Appを作ってみる]]></title>
    <link href="http://kimh.github.io/blog/jp/lotus/creating-web-application-with-ruby-lotus-ja/"/>
    <updated>2014-09-11T18:40:00+09:00</updated>
    <id>http://kimh.github.io/blog/jp/lotus/creating-web-application-with-ruby-lotus-ja</id>
    <content type="html"><![CDATA[<p><img src="http://kimh.github.io/images/lotus.jpeg" alt="" /></p>

<p><strong><em>注意</em></strong>  この記事はIBM製のコラボレーションソフトについてのページではありません。Rubyで書かれた<a href="http://lotusrb.org/">Lotus</a>というWebフレームワークについての記事です。</p>

<h2>内容</h2>

<ul>
<li><a href="#what_is_lotus">Lotusとは何か</a></li>
<li><a href="#why_lotus_instead_of_rails">なぜRailsじゃなくLotusか</a></li>
<li><a href="#creating_one_file_application">One-fileアプリを作る</a></li>
</ul>


<p><a id="what_is_lotus"></a></p>

<h2>Lotusとは何か</h2>

<p><a href="http://lotusrb.org/">Lotus</a>は新しいRubyで書かれたWebフレームワークです。比較的少人数の<a href="https://github.com/lotus">lotusチーム</a>が開発しています。
2014年9月の時点ではまだ本番環境では使えませんが、簡単なアプリを作るには十分に動作します。</p>

<p>Lotusのプロジェクトページに書かれているスローガンを見たときに一瞬で一目惚れしました。</p>

<p>ページにはこう書いてあります。(かなり意訳です)</p>

<blockquote><p>Lotusは軽量で高速かつテストが容易なフレームワークです。Lotusはオブジェクト指向プログラミングのエッセンスを取り戻し、安定したAPI、最小限のDSLを提供してシンプルなオブジェクトに基づいたWeb開発を可能にします。</p></blockquote>

<p>このスローガンを読んだ時、探していたものはこれだと思いました。（後で詳しく説明します）ちょうど個人でやっているプロジェクトでシンプルなAPIサーバを作ろうとしていたので早速Lotusを使ってみることにしました。
まだ情報がほとんど世の中に存在しないので色々苦労しましたが、最近は少しずつ <strong><em>Lotus Way</em></strong> がわかってきたのでこの記事で紹介しようと思います。</p>

<p><a id="why_lotus_instead_of_rails"></a></p>

<h2>なぜRailsではなくLotusか</h2>

<p>最近はアプリケーションをモジュール方式で開発する機会が増えてきました。この開発方法をSOAと呼ぼうがMicroserviceと呼ぼうがなんでもいいですが、多くのプロジェクトがこの開発方式を採用するようになってきています。
<a href="https://github.com/flynn">(Fylnnはお気に入りの例です)</a></p>

<p>アプリをモジュール方式で開発する利点はいくつかあります。</p>

<ul>
<li>テストがしやすい</li>
<li>高いポータビリティ</li>
<li>再利用しやすい</li>
<li>デプロイが容易</li>
</ul>


<p>Railsを使ってこれらのことを実現するのは簡単ではありません。Railsは素晴らしいですが、フレームワークスタックは巨大で沢山の機能が最初からビルトインされています。
要するにRailsは小さいコンポーネントを沢山作るには大きすぎます。</p>

<p><a href="https://github.com/sinatra/sinatra">Sinatra</a>や<a href="https://github.com/rails-api/rails-api">rails-api</a>が使えるのでは？と思う人もいると思います。
確かにSinatraは軽量です。ただ最近個人的にはDSLよりも <strong><em>純粋なRubyのコード</em></strong> を好むようになってきました。学習コストを低く抑えれるからです。
正直rails-apiは使ったことがないのでよくわかりません。ただ、Railsがベースなのでそこまで軽量ではないのではないかと思っています。もし、知ってる人がいたら教えてください。</p>

<p><a href="https://github.com/lotus">LotusのGithubページ</a>を見ればわかりますが、Lotusは複数のコンポーネントからできているので、この中の一つだけを自分のプロジェクトで使うことも可能です。
例えば、<a href="https://github.com/lotus/router">lotus-router</a>だけを自分のRackアプリに組み込んでHTTPルーターとして使うことができます。</p>

<p>またLotusはRailsのようにフルスタックなフレームワークとして使うこともできます。LotusはRailsのいいとこ取りをしているので(例えばCoCの積極的に採用)比較的少ないコードでアプリケーションを作ることもできます。</p>

<p>つまり、LotusはSinatraのように軽量なアプリを作ることができる一方で、Railsのようにフルスタックなアプリも作ることができるということです。</p>

<p><a id="creating_one_file_application"></a></p>

<h2>One-fileアプリケーションを作る</h2>

<p>Lotusを使ってOne-fileアプリケーションを作ってみます。LotusのGithubに掲載されている<a href="https://github.com/lotus/lotus#one-file-application">one file application</a>を参考にします。</p>

<p>まずは、プロジェクト用のディレクトリを作成します。今後の説明はこのディレクトリをカレントディレクトリに設定しているいう前提で進めます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir onefileapp && cd onefileapp</span></code></pre></td></tr></table></div></figure>


<p>Lotusの公式なgemはまだ配布されていません。<a href="https://rubygems.org/gems/lotusrb">ここ</a>にありますが更新日は2014年1月となっています。最新のmasterブランチは
これよりずっと進んでいるので、ソースからインストールします。そのために、まずLotusレポジトリをクローンします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/lotus/lotus.git</span></code></pre></td></tr></table></div></figure>


<p>Gemの管理にbundlerを使います。Gemfileを作成しましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle init</span></code></pre></td></tr></table></div></figure>


<p>次にGemfileを編集します。<code>&lt;your-path-to-lotus-repo&gt;</code>をクローンしてきたLotusのレポジトリのディレクトリに適宜変更してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://rubygems.org&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;lotusrb&#39;</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="n">your</span><span class="o">-</span><span class="n">path</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">lotus</span><span class="o">-</span><span class="n">repo</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Gemをインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span> <span class="o">--</span><span class="n">path</span> <span class="n">vendor</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでアプリケーションを書く準備が整いました(といっても１ファイルですが)。以下のコードを <strong><em>config.ru</em></strong> として保存してください。</p>

<p><strong><em>config.ru</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;lotus&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">OneFile</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Lotus</span><span class="p">:</span><span class="ss">:Application</span>
</span><span class='line'>    <span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">routes</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">get</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;home#index&#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">load</span><span class="o">!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Controllers</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Home</span>
</span><span class='line'>      <span class="kp">include</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:Controller</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">action</span> <span class="s1">&#39;Index&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Views</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Home</span>
</span><span class='line'>      <span class="k">class</span> <span class="nc">Index</span>
</span><span class='line'>        <span class="kp">include</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:View</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">render</span>
</span><span class='line'>          <span class="s2">&quot;Hello, Lotus&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>保存したらアプリを起動してみましょう。最新のmasterブランチには <code>lotus server</code> コマンドがあるのでこれを使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">lotus</span> <span class="n">server</span>
</span></code></pre></td></tr></table></div></figure>


<p>起動できましたか？それではブラウザで <a href="http://localhost:2300">http://localhost:2300</a> にアクセスしてみてください。 <code>Hello, Lotus</code> と表示されるはずです。</p>

<p>コードの説明をします。</p>

<p>まず、最初に気づくことは<code>Controllers</code>と<code>Views</code>モジュール内で定義されているクラスは継承を使っていないということです。
Lotusの哲学の一つに<code>モジュールをインクルードして最小限のインターフェースを実装する</code>というものがあります。
この哲学は開発者に本当に必要なものだけをMixinして使うことを推奨します。</p>

<p>次に<code>Application</code>クラスを見てみましょう。今回の例ではこのクラスはルートの設定をしているだけです。
<code>get '/', to: 'home#index'</code>とすることで<code>GET /</code>のルートは<code>Home::Index</code>コントローラを使うように設定しています。
今回はひとつだけしかルートを設定していませんが他のHTTPメソッドも同じように設定できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">routes</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">post</span>   <span class="s1">&#39;/books&#39;</span><span class="p">,</span>             <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;book#create&#39;</span>
</span><span class='line'>  <span class="n">put</span>    <span class="s1">&#39;/books/:id&#39;</span><span class="p">,</span>         <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;book#update&#39;</span>
</span><span class='line'>  <span class="n">delete</span> <span class="s1">&#39;/books/:id&#39;</span><span class="p">,</span>         <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;book#destroy&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ワンライナーレスポンス</span>
</span><span class='line'>  <span class="n">get</span>    <span class="s1">&#39;/ping&#39;</span><span class="p">,</span>              <span class="ss">to</span><span class="p">:</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">env</span><span class="p">)</span> <span class="p">{</span><span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{},</span> <span class="o">[</span><span class="s1">&#39;pong&#39;</span><span class="o">]]</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に<code>Controllers</code>を見てみましょう。<code>action</code>を呼んでいる以外は何もしていません。</p>

<p><code>action</code>とは何でしょうか？<code>action</code>はHTTPリクエストのエンドポイントとして動き、ここでリクエストの中身を見たりレスポンスを生成したりします。
リクエストに対するビジネスロジックもここに書きます。多分、<code>action</code>はRailsのControllerとほとんど同じものだと考えていいと思います。
ここでは先ほどみたルートから呼び出される<code>Index</code> actionを定義しています。</p>

<p>最後に<code>Views</code>を見ましょう。このクラスの仕事はRailsのViewとは異なります。
RailsではViewはブラウザでレンダリングされるコンテンツを吐き出すコードを書く場所でした。Lotusではこれは<code>Template</code>で行います。(今回の例ではTemplateはでてきません)</p>

<p>LotusではViewはPresenterレイヤーとして動きます。RailsではPresenterは標準ではありません。(Draperなどのgemで使えるようになります)
Presenterの仕事はデータをControllerから受け取って抽象化してTemplateに見せることです。
このようにすることでコンテンツ描画コードをクリーンに保つことができるので最近では有名なデザインパターンです。</p>

<p>コードの説明に戻ります。ここでは<code>render</code>メソッドを実装して<code>Hello, Lotus</code>というメッセージを表示しています。</p>

<p>この例はあまり面白くないですね。ViewとControllerを連携させてデータのやりとりをさせてみましょう。</p>

<p>Controllerのコードを以下のように編集します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Controllers</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Home</span>
</span><span class='line'>    <span class="kp">include</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:Controller</span>
</span><span class='line'>    <span class="n">action</span> <span class="s1">&#39;Index&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">expose</span> <span class="ss">:time</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@time</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>２つ新しいメソッドが出てきました。<code>expose</code>と<code>call</code>です。</p>

<p>ControllerからViewにデータを渡すには、exposeを使って明示的に公開する変数を指定しないといけません。
これも<code>本当に必要なものだけを使う</code>というLotusの哲学の現れです。</p>

<p> <code>call</code>はHTTPリクエストのエントリーポイントとして動きます。さっきも少し触れたようにこの中にビジネスロジックやレスポンス生成のコードを書きます。</p>

<p>ViewをControllerからデータを受け取るように変更しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Views</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Home</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Index</span>
</span><span class='line'>      <span class="kp">include</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:View</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">render</span>
</span><span class='line'>        <span class="s2">&quot;Current time: </span><span class="si">#{</span><span class="n">time</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Controllerが<code>@time</code>を<code>expose</code>で公開しているので、Viewはこのデータに<code>time</code>変数経由でアクセスすることができます。</p>

<p>アプリケーションを再起動してください。ブラウザで同じページにアクセスすると<code>Current time: 2014-09-11 23:18:30 +0900</code>のように表示されるはずです。</p>

<h2>まとめ</h2>

<p>LotusでWebアプリを書くのはとても簡単だということがわかってもらえたでしょうか？</p>

<p>ええ、あなたの心の声が聞こえてきますよ。<em>この例は単純すぎて全然実用的ではないじゃないか</em> という声が、、、</p>

<p>確かにその通りです。ですが、それは次の記事で紹介させてください。本当はFull stackアプリケーションに作り方まで紹介する予定だったのですが
この記事を書くのに予想より手間取ってしまいました。</p>

<p>次の記事は、<strong><em>Ruby LotusでフルスタックWeb Appを作ってみる</em></strong> みたな感じになる予定です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Web Application with Ruby Lotus]]></title>
    <link href="http://kimh.github.io/blog/en/lotus/creating-web-application-with-ruby-lotus/"/>
    <updated>2014-09-11T18:40:00+09:00</updated>
    <id>http://kimh.github.io/blog/en/lotus/creating-web-application-with-ruby-lotus</id>
    <content type="html"><![CDATA[<p><img src="http://kimh.github.io/images/lotus.jpeg" alt="" /></p>

<p><strong><em>WARNING</em></strong>  This is not your article if you are looking for information about the collaboration software made by IBM.
Instead, this article is about <a href="http://lotusrb.org/">Lotus</a>, a new web framework written in Ruby.</p>

<h2>Contents</h2>

<ul>
<li><a href="#what_is_lotus">What is Lotus</a></li>
<li><a href="#why_lotus_instead_of_rails">Why Lotus instead of Rails</a></li>
<li><a href="#creating_one_file_application">Creating one file aplication</a></li>
</ul>


<p><a id="what_is_lotus"></a></p>

<h2>What is Lotus</h2>

<p><a href="http://lotusrb.org/">Lotus</a> is a web framework that is being developed by relatively small team of <a href="https://github.com/lotus">lotus team</a>.
You can use Lotus and build a complete MVC web application just like Rails.
Lotus is still under active development and not production ready as of Sep, 2014, but you can definitely use it to create a web application.</p>

<p>I fell in love with Lotus at first sight of the mission that Lotus tries to archive in the project page.</p>

<p>The page reads</p>

<blockquote><p>Lotus is lightweight, fast and testable. It aims to bring back Object Oriented Programming to web development, leveraging on a stable API, a minimal DSL, and plain objects.</p></blockquote>

<p>I felt this is what I was looking for (explained more later) and decided to use Lotus to create a small API server in my private project.
Since there are not much documentation and information about Lotus in the wild yet, I sometimes had a hard time to figure out how to use it.
But, I am recently getting used to the <strong><em>Lotus way</em></strong> so I&rsquo;d like to share them in this and subsequent posts.</p>

<p><a id="why_lotus_instead_of_rails"></a></p>

<h2>Why Lotus instead of Rails</h2>

<p>Recent applications are built in modular way more than ever before.
Whether you call this type of application architecture SOA or microservices,
it is true that many recent great projects <a href="https://github.com/flynn">(my favorite example is Fylnn)</a> are taking this design approach.</p>

<p>There are a few major benefits of taking this approach</p>

<ul>
<li>more testability</li>
<li>more portability</li>
<li>more reusability</li>
<li>easier deployment</li>
</ul>


<p>You will realize that it is not easy to accomplish all of these with Rails.
Rails is definitely great, but the framework stack is huge and lots of things are built in. After all, Rails is a big framework, so not a good option if you want to create lots of small components.</p>

<p>You may think there are small frameworks such as <a href="https://github.com/sinatra/sinatra">Sinatra</a> or <a href="https://github.com/rails-api/rails-api">rails-api</a>.
Yes, Sinatra is lightweight, but I recently prefer to <strong><em>pure ruby code</em></strong> than DSL because it gives me steep learning curve (meaning easy to learn).
To be honest, I never tried rails-api by myself, but I am suspicious that it is lightweight because the base is still Rails. Let me know if you have different opinions.</p>

<p>As you can tell from <a href="https://github.com/lotus">Lotus github page</a>, it is made of many components. You can easily bring one of components into your application.
For example, you can just grab <a href="https://github.com/lotus/router">lotus-router</a> and mixin to your Rack application to handle http request.</p>

<p>Although, Lotus is made modular way, you can still use it as fullstack web-framework with relatively small amount of codes.
Apparently, Lotus steals many good designs from Rails such as CoC and that allows you to build applications easy.</p>

<p>So, my point in this section is this: <strong>Lotus is flexible but easy to use, so why not give it a shot?</strong></p>

<p>Hopefully, this article helps you starting Lotus.</p>

<p><a id="creating_one_file_application"></a></p>

<h2>Creating one file application</h2>

<p>Let&rsquo;s make our first Lotus application. We will follow the example of <a href="https://github.com/lotus/lotus#one-file-application">one file application</a>.</p>

<p>First, create a project directory. I am assuming that you set your current directory to this directory in the subsequent instructions.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir onefileapp && cd onefileapp</span></code></pre></td></tr></table></div></figure>


<p>Lotus does not publish official gem as far as I know. There is <a href="https://rubygems.org/gems/lotusrb">one</a> here but the last update was on Jan, 2014.
Current master branch is far ahead of this release. So, clone the Lotus project in order to install from source.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/lotus/lotus.git</span></code></pre></td></tr></table></div></figure>


<p>We need bundler to manage gem dependancy. Let&rsquo;s create a Gemfile.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle init</span></code></pre></td></tr></table></div></figure>


<p>Edit your Gemfile. Change <code>&lt;your-path-to-lotus-repo&gt;</code> to the directory where you clone Lotus repo.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://rubygems.org&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;lotusrb&#39;</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="n">your</span><span class="o">-</span><span class="n">path</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">lotus</span><span class="o">-</span><span class="n">repo</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then install gems.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span> <span class="o">--</span><span class="n">path</span> <span class="n">vendor</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we can start writing our application which is just one file. Save below codes as <strong><em>config.ru</em></strong>.</p>

<p><strong><em>config.ru</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;lotus&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">OneFile</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Lotus</span><span class="p">:</span><span class="ss">:Application</span>
</span><span class='line'>    <span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">routes</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">get</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;home#index&#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">load</span><span class="o">!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Controllers</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Home</span>
</span><span class='line'>      <span class="kp">include</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:Controller</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">action</span> <span class="s1">&#39;Index&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Views</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Home</span>
</span><span class='line'>      <span class="k">class</span> <span class="nc">Index</span>
</span><span class='line'>        <span class="kp">include</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:View</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">render</span>
</span><span class='line'>          <span class="s2">&quot;Hello, Lotus&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can run the app with rackup command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">lotus</span> <span class="n">server</span>
</span></code></pre></td></tr></table></div></figure>


<p>Successfully run? Then, access <a href="http://localhost:2300">http://localhost:2300</a> from your browser. You should see <code>Hello, Lotus</code>.</p>

<p>Let me explain what is doing.</p>

<p>First, you will notice that classes inside <code>Controllers</code> and <code>Views</code> modules not using inheritance.
One important philosophy of Lotus is this:<code>include a module and implement a minimal interface.</code>
This philosophy encourages developers to use only what you need with mixin.</p>

<p>Now let&rsquo;s look at <code>Application</code> class. In our application, the class only configures routes.
We use <code>get</code> method to configure a route for http <code>GET /</code> method that uses <code>Home::Index</code> controller.
Here we only configure <code>get</code> http method, but you can configure other methods easily such as these:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">routes</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">post</span>   <span class="s1">&#39;/books&#39;</span><span class="p">,</span>             <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;book#create&#39;</span>
</span><span class='line'>  <span class="n">put</span>    <span class="s1">&#39;/books/:id&#39;</span><span class="p">,</span>         <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;book#update&#39;</span>
</span><span class='line'>  <span class="n">delete</span> <span class="s1">&#39;/books/:id&#39;</span><span class="p">,</span>         <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;book#destroy&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># You can also define one liner response</span>
</span><span class='line'>  <span class="n">get</span>    <span class="s1">&#39;/ping&#39;</span><span class="p">,</span>              <span class="ss">to</span><span class="p">:</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">env</span><span class="p">)</span> <span class="p">{</span><span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{},</span> <span class="o">[</span><span class="s1">&#39;pong&#39;</span><span class="o">]]</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, let&rsquo;s look at <code>Controllers</code>. We are not doing anything but defining <code>action</code>.
What is <code>action</code>? <code>action</code> is the HTTP endpoint where you can handle incoming request and creating response.
This is also the place where you can implement your business logic. I think it is safe to think that the responsibility of Lotus action is very similar to Rails controller.
We define <code>Index</code> action so that we can use it from our router code that we looked at previously.</p>

<p>Last thing to look at is <code>Views</code>. The responsibility of the class is not the same as the Rails view class.
In Rails, you write codes that is actually rendered by browser (if html format) in view. This is done by <code>Template</code> in Lotus which I don&rsquo;t cover in this post.
In Lotus, the responsibility of view is more like of presenter which does not come with Rails by default (you can use gems such as Draper to implement presetation layer in Rails, too.)
What presenter does is receiving data from controller and abstracts them to template layer.
In this way, your template layer gets clean and can focus on redning content.</p>

<p>Let&rsquo;s go back to our code. Here we define <code>render</code> method and simply print <code>Hello, Lotus</code> message.</p>

<p>This is neither interesting nor useful. We will make view to interact with controller by via data.</p>

<p>Let&rsquo;s modify your controller.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Controllers</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Home</span>
</span><span class='line'>    <span class="kp">include</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:Controller</span>
</span><span class='line'>    <span class="n">action</span> <span class="s1">&#39;Index&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">expose</span> <span class="ss">:time</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@time</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we see two new things <code>expose</code> and <code>call</code>.</p>

<p>To pass data from controller to view, you need to manually expose what you want to pass.
Again, here you see Lotus philosophy: <code>only use what you need</code>.</p>

<p><code>call</code> is the entry point of http request. As I mentioned earlier, you can write business logic as well as response handling codes here.</p>

<p>Let&rsquo;s modify your view to get data from the controller.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Views</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Home</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Index</span>
</span><span class='line'>      <span class="kp">include</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:View</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">render</span>
</span><span class='line'>        <span class="s2">&quot;Current time: </span><span class="si">#{</span><span class="n">time</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since our controller exposes <code>@time</code>, you can access the data via <code>time</code> from your view.
Now, restart your Rack process and access from your browser. Now you should see something like this: <code>Current time: 2014-09-11 23:18:30 +0900</code></p>

<h2>Wrap up</h2>

<p>Did you see it is quite easy to write Lotus application?</p>

<p>Ok, I can hear your voice: <em>this example is too simple. I want to see real Lotus application.</em></p>

<p>Yes, let me do that in the next post. I thought I can do that in the same post, but writing this takes more time than I thought&hellip;</p>

<p>Next post will be something like this: <strong><em>Creating Full Stack Web Application with Lotus</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CRIUを使ってDockerコンテナの停止/再開に挑戦]]></title>
    <link href="http://kimh.github.io/blog/jp/criu/experiment-to-suspend-and-resume-docker-container-with-criu-jp/"/>
    <updated>2014-06-22T21:18:00+09:00</updated>
    <id>http://kimh.github.io/blog/jp/criu/experiment-to-suspend-and-resume-docker-container-with-criu-jp</id>
    <content type="html"><![CDATA[<p><img src="http://kimh.github.io/images/criu.jpeg" alt="" /></p>

<h3>結論: 2014/6の時点ではCRIUを使ってDockerコンテナの停止/再開はできないという少し残念な結果でこの記事は終わります。しかし、記事を読んでもらえればCRIUの面白さはわかってもらえると思います。</h3>

<p>Dockerが急速に広まったことで、LXCがVMWareやXenなどのVMに対して持つ利点はとても明確になりました。</p>

<p>しかし、VMにあってLXCにはない機能が一つあります。それは、コンテナの停止/再開によるコンテナの状態の保存です。</p>

<p>ここで<a href="http://criu.org/Main_Page">CRIU</a>の出番です。</p>

<p>CRIUはいわゆるCR(checkpoint/restart)ツールです。走っているプロセスを途中で止めてファイルに保存して、いつでも途中からプロセスを再開することができます。</p>

<p>LXCコンテナはプロセスなので、CRIUを使えばコンテナの停止/再開ができそうな気がしますが、本当にできるでしょうか？</p>

<p>この記事では、CRIUをインストールしてDockerコンテナの停止/再開ができるかどうか試してみます。</p>

<h2>CRIUをインスールする</h2>

<h3>カーネルを再構築する</h3>

<p>CRIUを動かすためには、CRIUが必要とするカーネルパラメータが有効になったカーネルを使わないといけません。今回はVagrat UbuntuをLXCのホストマシンとして使うのですが、既存のVagrant Boxで必要なカーネルパラメータが有効になっているものはなさそうでした。</p>

<p>なので、まずはカーネルの再構築から始めないといけません。カーネルの再構築と言うと敷居が高そうですが、実際はとても簡単です。</p>

<p>今回は<a href="https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box">公式Ubuntu14.04 cloud image</a>を使います。</p>

<p>まずは、このボックスを追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>vagrant box add ubuntu14.04 https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box
</span><span class='line'><span class="nv">$ </span>vagrant init ubuntu14.04
</span></code></pre></td></tr></table></div></figure>


<p> <code>vagrant up</code> コマンドを打つ前に、CPUとメモリーを増やしましょう。遅いマシンだと再構築にはとても時間がかかります。2コア、2048Mのメモリがあれば大丈夫だと思います。</p>

<p> <code>Vagrantfile</code> をエディタで開いて、以下を追加してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>config.vm.provider :virtualbox <span class="k">do</span> |vb|
</span><span class='line'>  vb.customize <span class="o">[</span><span class="s2">&quot;modifyvm&quot;</span>, :id, <span class="s2">&quot;--memory&quot;</span>, <span class="s2">&quot;2048&quot;</span><span class="o">]</span>
</span><span class='line'>  vb.customize <span class="o">[</span><span class="s2">&quot;modifyvm&quot;</span>, :id, <span class="s2">&quot;--cpus&quot;</span>, 2<span class="o">]</span>
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>終わったら、<code>vagrant up &amp;&amp; vagrant ssh</code>してログインしてください。rootユーザになって再構築に必要なパッケージをインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>apt-get -y update
</span><span class='line'><span class="nv">$ </span>apt-get -y install libncurses-dev build-essential libncurses-dev build-essential fakeroot kernel-package linux-source bc
</span></code></pre></td></tr></table></div></figure>


<p>インストールしたら、<code>/usr/src/linux-source-&lt;kernel version&gt;</code> というディレクトリが作成されているはずです。そのディレクトリに移動します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /usr/src/linux-source-&lt;kernel version&gt;
</span><span class='line'><span class="nv">$ </span>tar xvjf linux-source-&lt;kernel version&gt;.tar.bz2
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ./linux-source-&lt;kernel version&gt;
</span></code></pre></td></tr></table></div></figure>


<p>次はカーネルのコンフィグファイルが必要になります。</p>

<p>gistにアップロードしたのを使ってもらえれば、自分でコンフィグをする必要はありません。以下のコマンドを入力してください。(カレントディレクトリをKernelのソースを展開したディレクトリに変更しておくのを忘れずに)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl https://gist.githubusercontent.com/kimh/c93f42981d14a33c63c0/raw/a73af0f7f745c2538253ef153a62a8ba1a2d97be/.config -o .config
</span></code></pre></td></tr></table></div></figure>


<p>もし、CRIUを動かすためにどのオプションが必要か知りたい場合は<a href="http://criu.org/Installation#Kernel_configuration">ここ</a>にリストがあります。</p>

<p> <code>.config</code>ファイルを準備したら、再構築の準備完了です。</p>

<p><strong>もう一度確認してください。CPUとメモリは増やしましたか？もししていないと、とても長い時間待たされることになります。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">LC_CTYPE</span><span class="o">=</span>C
</span><span class='line'><span class="nv">$ </span>make-kpkg clean
</span><span class='line'><span class="nv">$ CONCURRENCY_LEVEL</span><span class="o">=</span>4 make-kpkg --rootcmd fakeroot --initrd --revision<span class="o">=</span><span class="sb">`</span>date +%Y%m%d<span class="sb">`</span> kernel_image kernel_headers
</span></code></pre></td></tr></table></div></figure>


<p>ビルドが完了したら、<code>linux-headers-&lt;kernel version&gt;_amd64.deb</code> と <code>linux-image-&lt;kernel version&gt;_amd64.deb</code> というファイルが <code>/usr/src/</code> ディレクトリに作成された思います。</p>

<p>さっそくインストールしましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>dpkg -i linux-headers-&lt;kernel version&gt;_amd64.deb
</span><span class='line'><span class="nv">$ </span>dpkg -i linux-image-&lt;kernel version&gt;_amd64.deb
</span><span class='line'><span class="nv">$ </span>reboot
</span></code></pre></td></tr></table></div></figure>


<p>再起動したらCRIUが使えるカーネルで動いているはずです。</p>

<h3>CRIUをソースからコンパイルする</h3>

<p>次はCRIUをインストールします。Ubuntuは最新のパッケージを用意していないので、自分でソースからコンパイルしないといけません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>apt-get install bsdmainutils build-essential libprotobuf-c0-dev linux-headers-generic protobuf-c-compiler
</span><span class='line'><span class="nv">$ </span>mkdir /src
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /src
</span><span class='line'><span class="nv">$ </span>curl http://download.openvz.org/criu/criu-1.3-rc2.tar.bz2 | tar -jxf-
</span><span class='line'><span class="nv">$ </span>make -C criu-1.3-rc2/
</span><span class='line'><span class="nv">$ </span>cp criu-1.3-rc2/criu /usr/local/sbin/
</span></code></pre></td></tr></table></div></figure>


<p>これでCRIUのインストールは完了です。ちゃんとインストールされているか確認しましょう。CRIUにはそのためのコマンドがあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>criu check --ms
</span><span class='line'>Warn  <span class="o">(</span>tun.c:55<span class="o">)</span>: Skipping tun support check
</span><span class='line'>Warn  <span class="o">(</span>cr-check.c:259<span class="o">)</span>: Skipping mnt_id support check
</span><span class='line'>Looks good.
</span></code></pre></td></tr></table></div></figure>


<p> <code>Looks good.</code>が表示されましたか？いくつか警告がでますが、無視して構いません。</p>

<p>コンテナに対して使う前に、まずは普通のプロセスを停止/再開してみましょう。以下の例は<a href="http://criu.org/Simple_loop">CRIUのHOWTOページ</a>からです。</p>

<p>まず、ただループするだけのスクリプトを用意します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat &gt; test.sh <span class="s">&lt;&lt;-EOF</span>
</span><span class='line'><span class="s">#!/bin/sh</span>
</span><span class='line'><span class="s">while true; do</span>
</span><span class='line'><span class="s"> date</span>
</span><span class='line'><span class="s"> sleep 1</span>
</span><span class='line'><span class="s">done</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>chmod +x test.sh
</span><span class='line'><span class="nv">$ </span>./test.sh
</span></code></pre></td></tr></table></div></figure>


<p>プロセスを停止するには<code>criu dump</code>コマンドを使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># criuを実行するためにはrootじゃないといけない</span>
</span><span class='line'><span class="nv">$ </span>sudo -s
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">PID</span><span class="o">=</span><span class="sb">`</span>pgrep -f test.sh<span class="sb">`</span>
</span><span class='line'><span class="nv">$ </span>mkdir /tmp/test
</span><span class='line'><span class="nv">$ </span>criu dump -t <span class="nv">$PID</span> --images-dir /tmp/test --shell-job
</span></code></pre></td></tr></table></div></figure>


<p>もし、ダンプが成功したら<code>/tmp/test</code>ディレクトリ配下に沢山のファイルができているはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ls /tmp/test
</span><span class='line'>cgroup.img         fanotify-mark.img   fs-4898.img     netlinksk.img     pstree.img         signalfd.img
</span><span class='line'>core-4521.img      fanotify.img        ids-4521.img    ns-files.img      reg-files.img      sk-queues.img
</span><span class='line'>core-4898.img      fdinfo-2.img        ids-4898.img    packetsk.img      remap-fpath.img    stats-dump
</span><span class='line'>creds-4521.img     fdinfo-3.img        inetsk.img      pagemap-4521.img  sigacts-4521.img   tty-info.img
</span><span class='line'>creds-4898.img     fifo-data.img       inotify-wd.img  pagemap-4898.img  sigacts-4898.img   tty.img
</span><span class='line'>eventfd.img        fifo.img            inotify.img     pages-1.img       signal-p-4521.img  tunfile.img
</span><span class='line'>eventpoll-tfd.img  filelocks-4521.img  inventory.img   pages-2.img       signal-p-4898.img  unixsk.img
</span><span class='line'>eventpoll.img      filelocks-4898.img  mm-4521.img     pipes-data.img    signal-s-4521.img
</span><span class='line'>ext-files.img      fs-4521.img         mm-4898.img     pipes.img         signal-s-4898.img
</span></code></pre></td></tr></table></div></figure>


<p>今度はプロセスを再開してみましょう。<code>criu restore</code>コマンドを使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>criu restore -t <span class="nv">$PID</span> --images-dir /tmp/test  --shell-job
</span></code></pre></td></tr></table></div></figure>


<p>プロセスが問題なく再開されたら<code>test.sh</code>が<code>date</code>コマンドの出力をターミナルに出すはずです。</p>

<h2>CRIUでコンテナを停止/再開してみる</h2>

<p>ここまでは大丈夫ですか？では、いよいよDockerコンテナに使ってみましょう。DockerはこのVagrantにはインストールされていないので、まずインストールしましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>apt-get install docker.io jq
</span><span class='line'><span class="nv">$ </span>ln -sf /usr/bin/docker.io /usr/local/bin/docker
</span><span class='line'><span class="nv">$ </span>sed -i <span class="s1">&#39;$acomplete -F _docker docker&#39;</span> /etc/bash_completion.d/docker.io
</span></code></pre></td></tr></table></div></figure>


<p>インストールしたら、簡単なコマンドをコンテナに実行させます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker run -t -i ubuntu /bin/bash
</span></code></pre></td></tr></table></div></figure>


<p>コンテナを停止するにはプロセスIDを知る必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ ID</span><span class="o">=</span><span class="sb">`</span>docker ps -l -q<span class="sb">`</span>
</span><span class='line'><span class="nv">$ PID</span><span class="o">=</span><span class="sb">`</span>docker inspect <span class="nv">$ID</span> | jq <span class="s1">&#39;.[0].State.Pid&#39;</span><span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>いよいよ、苦労が報われる時です。コンテナを停止してみましょう！！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>criu dump -t <span class="nv">$PID</span> --images-dir /tmp/docker
</span><span class='line'>Error <span class="o">(</span>mount.c:449<span class="o">)</span>: 102:./dev/console doesn<span class="err">&#39;</span>t have a proper root mount
</span><span class='line'>Error <span class="o">(</span>cr-dump.c:1882<span class="o">)</span>: Dumping FAILED.
</span></code></pre></td></tr></table></div></figure>


<p>あれ？CRIUはエラーを吐いてしまいました。ダンプに失敗したようです。エラーメッセージをGoogleで調べてみると、以下のスレッドを見つけました。</p>

<p>CRIU said dumping failed. After googling the error message, I found this discussion.</p>

<p><a href="https://lists.linuxcontainers.org/pipermail/lxc-devel/2013-November/006326.html">[lxc-devel] [CRIU] LXC live migrate</a></p>

<blockquote><p>That&rsquo;s container&rsquo;s console which is a bind mounted tty from
the host. And since this is an external connection, CRIU doesn&rsquo;t dump one.</p></blockquote>

<p>ガーン。どうやら、現状のCRIUではLXCのの停止/再開はできないみたいです。でも、<a href="http://criu.org/LXC">ここのページ</a>にはCRIUを使ってLXCを停止/再開する方法が書かれていますよ。Dockerは内部でLXCを使っているので動くはずじゃ、、、</p>

<p>以下は同じスレッドに書かれていました。</p>

<p><a href="https://lists.linuxcontainers.org/pipermail/lxc-devel/2013-November/006326.html">[lxc-devel] [CRIU] LXC live migrate</a></p>

<blockquote><p>AFAIK cgroups are used <em>inside</em> containers only with recent guest templates.
In OpenVZ we use more old ones (and more stable) so haven&rsquo;t meet this yet.
And yes, cgroups are in plans for the nearest future :)</p></blockquote>

<p>要するに、CRIUはcgroupsを2014/06の時点ではサポートしていないらしいです。でも、Dockerが使っているLXCのテンプレートはcgroupsを使っているようです。よって、CRIUではDockerコンテナの停止/再開はできないみたいです。</p>

<p>残念な結果です。。。</p>

<h2>結論</h2>

<p>今回の実験で、CRIU v1.3ではDockerコンテナの停止/再開はできないことがわかりました。CRIUがまだcgroupsに対応していないからです。</p>

<p>今回は少し残念な結果になってしまいましたが、ここまで読んでもらえた方にはCRIUの可能性がわかってもらえたかと思います。</p>

<p>CRIUがLXCのエコシステムにもたらす将来の可能性に対して、このプロジェクトの認知度はとても低いです。この記事を読んでくださった方は、今すぐ<a href="https://github.com/xemul/criu">Github</a>でスターしてウォッチしましょう！このブログでもこれから色々CRIUについて書いて行きたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experiment To Suspend/Resume Docker Container With CRIU]]></title>
    <link href="http://kimh.github.io/blog/en/criu/experiment-to-suspend-and-resume-docker-container-with-criu/"/>
    <updated>2014-06-22T01:08:00+09:00</updated>
    <id>http://kimh.github.io/blog/en/criu/experiment-to-suspend-and-resume-docker-container-with-criu</id>
    <content type="html"><![CDATA[<p><img src="http://kimh.github.io/images/criu.jpeg" alt="" /></p>

<h3>TL;DR: You CANNOT suspend/resume Docker container as of Jun 2014 and this article ends with a bit disappointed result, but you can still find CRIU is cool thing.</h3>

<p>With the rapid emergence of Docker, everybody knows many advantages of using LXC over virtual machines like VMWare or Xen.</p>

<p>However, there is one thing that LXC is missing: suspend/resume containers.</p>

<p>This is where <a href="http://criu.org/Main_Page">CRIU</a> comes in.</p>

<p>CRIU is so called CR (checkpoint/restart) tool. It suspends a running process and save the memory state into files which can be resumed at anytime.</p>

<p>And since LXC container is a process, we should be able to suspend/resume containers. But does it really work?</p>

<p>In this article, we will install CRIU and see whether we can suspend/resume a Docker container.</p>

<p><strong>Note:</strong>
You may say that LXC already has <a href="http://lxc.sourceforge.net/man/lxc-checkpoint.html">C/R feature</a>. My impression with the tool is not good from the past experience. So, I really didn&rsquo;t try this time.</p>

<h2>Installing CRIU</h2>

<h3>Building Kernel</h3>

<p>To get the fully functional CRIU, you need to have a kernel with certain options are enabled. We use Vagrant box as LXC host machine, but I couldn&rsquo;t find a box with kernel that meets the requirement of CRIU.</p>

<p>So, we need to rebeild kernel. Don&rsquo;t worry, building kernel is not difficult as it sounds.</p>

<p>We will use <a href="https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box">official Ubuntu14.04 cloud image</a>.</p>

<p>First you need to add the box.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>vagrant box add ubuntu14.04 https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box
</span><span class='line'><span class="nv">$ </span>vagrant init ubuntu14.04
</span></code></pre></td></tr></table></div></figure>


<p>Before hit <code>vagrant up</code> command, let&rsquo;s increase CPU cores and memory of the box. Otherwise, it takes a few hours to build kernel. It really depends, but 2 cores with 2048M RAM would be enough.</p>

<p>Open <code>Vagrantfile</code> and add the following lines.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>config.vm.provider :virtualbox <span class="k">do</span> |vb|
</span><span class='line'>  vb.customize <span class="o">[</span><span class="s2">&quot;modifyvm&quot;</span>, :id, <span class="s2">&quot;--memory&quot;</span>, <span class="s2">&quot;2048&quot;</span><span class="o">]</span>
</span><span class='line'>  vb.customize <span class="o">[</span><span class="s2">&quot;modifyvm&quot;</span>, :id, <span class="s2">&quot;--cpus&quot;</span>, 2<span class="o">]</span>
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>Once you increase cpu and memory, do <code>vagrant up &amp;&amp; vagrant ssh</code> and ssh into the box. Become root user and install necessary packages to rebuild kernel.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>et -y update
</span><span class='line'><span class="nv">$ </span>apt-get -y install libncurses-dev build-essential libncurses-dev build-essential fakeroot kernel-package linux-source bc
</span></code></pre></td></tr></table></div></figure>


<p>After installing these, you should have <code>/usr/src/linux-source-&lt;kernel version&gt;</code> directory. Go into the directory and untar the source files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /usr/src/linux-source-&lt;kernel version&gt;
</span><span class='line'><span class="nv">$ </span>tar xvjf linux-source-&lt;kernel version&gt;.tar.bz2
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ./linux-source-&lt;kernel version&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Now you need to prepare a kernel configuration <em>.config</em> file which enables certain options for CRIU.</p>

<p>I uploaded the one to save your time into gist. Just run this command. (Make sure to change current directory to kernel source directory where you just untared.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl https://gist.githubusercontent.com/kimh/c93f42981d14a33c63c0/raw/a73af0f7f745c2538253ef153a62a8ba1a2d97be/.config -o .config
</span></code></pre></td></tr></table></div></figure>


<p>If you want to know which kernel options should be enabled, the list is <a href="http://criu.org/Installation#Kernel_configuration">here</a>.</p>

<p>Once you put <code>.config</code> file, you are ready to build kernel.</p>

<p><strong>Once again, make sure you increased cpu and memory in the previous seteps before start building kernel.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">LC_CTYPE</span><span class="o">=</span>C
</span><span class='line'><span class="nv">$ </span>make-kpkg clean
</span><span class='line'><span class="nv">$ CONCURRENCY_LEVEL</span><span class="o">=</span>4 make-kpkg --rootcmd fakeroot --initrd --revision<span class="o">=</span><span class="sb">`</span>date +%Y%m%d<span class="sb">`</span> kernel_image kernel_headers
</span></code></pre></td></tr></table></div></figure>


<p>Once the kernel build is done, you should have <code>linux-headers-&lt;kernel version&gt;_amd64.deb</code> and <code>linux-image-&lt;kernel version&gt;_amd64.deb</code> under <code>/usr/src/</code> directory.</p>

<p>Now, let&rsquo;s install them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>dpkg -i linux-headers-&lt;kernel version&gt;_amd64.deb
</span><span class='line'><span class="nv">$ </span>dpkg -i linux-image-&lt;kernel version&gt;_amd64.deb
</span><span class='line'><span class="nv">$ </span>reboot
</span></code></pre></td></tr></table></div></figure>


<p>Done! Now You are running the kernel that works well with CRIU.</p>

<h3>Compile CRIU from source</h3>

<p>Let&rsquo;s install CRIU now. Ubuntu doesn&rsquo;t provide up-to-date debian package of CRIU, so we need to build from source.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>apt-get install bsdmainutils build-essential apt-get install libprotobuf-dev libprotobuf-c0-dev protobuf-c-compiler protobuf-compiler python-protobuf xmlto asciidoc
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/xemul/criu
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>criu/
</span><span class='line'><span class="nv">$ </span>make
</span><span class='line'><span class="nv">$ </span>sudo make install
</span></code></pre></td></tr></table></div></figure>


<p>Now CRIU is installed. Let&rsquo;s try if it works. CRIU provides a command for this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>criu check --ms
</span><span class='line'>Warn  <span class="o">(</span>tun.c:55<span class="o">)</span>: Skipping tun support check
</span><span class='line'>Warn  <span class="o">(</span>cr-check.c:259<span class="o">)</span>: Skipping mnt_id support check
</span><span class='line'>Looks good.
</span></code></pre></td></tr></table></div></figure>


<p>Did you get <code>Looks good.</code> message? You may get some warnings, but you can ignore them.
Before doing our experiment with containers, let&rsquo;s checkpoint and restore normal Linux process with CRIU. The example comes from <a href="http://criu.org/Simple_loop">one of CRIU HOWTO pages</a>.</p>

<p>First, we need to create a simple loop script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat &gt; test.sh <span class="s">&lt;&lt;-EOF</span>
</span><span class='line'><span class="s">#!/bin/sh</span>
</span><span class='line'><span class="s">while true; do</span>
</span><span class='line'><span class="s"> date</span>
</span><span class='line'><span class="s"> sleep 1</span>
</span><span class='line'><span class="s">done</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>chmod +x test.sh
</span><span class='line'><span class="nv">$ </span>./test.sh
</span></code></pre></td></tr></table></div></figure>


<p>We can suspend with <code>criu dump</code> command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Need to be root to run criu</span>
</span><span class='line'><span class="nv">$ </span>sudo -s
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">PID</span><span class="o">=</span><span class="sb">`</span>pgrep -f test.sh<span class="sb">`</span>
</span><span class='line'><span class="nv">$ </span>mkdir /tmp/test
</span><span class='line'><span class="nv">$ </span>criu dump -t <span class="nv">$PID</span> --images-dir /tmp/test --shell-job
</span></code></pre></td></tr></table></div></figure>


<p>If the dump succeeds, you should have many files under <code>/tmp/test</code> directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ls /tmp/test
</span><span class='line'>cgroup.img         fanotify-mark.img   fs-4898.img     netlinksk.img     pstree.img         signalfd.img
</span><span class='line'>core-4521.img      fanotify.img        ids-4521.img    ns-files.img      reg-files.img      sk-queues.img
</span><span class='line'>core-4898.img      fdinfo-2.img        ids-4898.img    packetsk.img      remap-fpath.img    stats-dump
</span><span class='line'>creds-4521.img     fdinfo-3.img        inetsk.img      pagemap-4521.img  sigacts-4521.img   tty-info.img
</span><span class='line'>creds-4898.img     fifo-data.img       inotify-wd.img  pagemap-4898.img  sigacts-4898.img   tty.img
</span><span class='line'>eventfd.img        fifo.img            inotify.img     pages-1.img       signal-p-4521.img  tunfile.img
</span><span class='line'>eventpoll-tfd.img  filelocks-4521.img  inventory.img   pages-2.img       signal-p-4898.img  unixsk.img
</span><span class='line'>eventpoll.img      filelocks-4898.img  mm-4521.img     pipes-data.img    signal-s-4521.img
</span><span class='line'>ext-files.img      fs-4521.img         mm-4898.img     pipes.img         signal-s-4898.img
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s resume the process with <code>criu restore</code> command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>criu restore -t <span class="nv">$PID</span> --images-dir /tmp/test  --shell-job
</span></code></pre></td></tr></table></div></figure>


<p>If the process is successfully resumed, <code>test.sh</code> starts printing the output of <code>date</code> command to your terminal.</p>

<h2>Trying CRIU with containers</h2>

<p>So far so good? Now, we will try to suspend and resume Docker containers. Docker is not installed on your vagrant box, so let&rsquo;s install.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>apt-get install docker.io jq
</span><span class='line'><span class="nv">$ </span>ln -sf /usr/bin/docker.io /usr/local/bin/docker
</span><span class='line'><span class="nv">$ </span>sed -i <span class="s1">&#39;$acomplete -F _docker docker&#39;</span> /etc/bash_completion.d/docker.io
</span></code></pre></td></tr></table></div></figure>


<p>And run a Ubuntu container executing a simple command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker run -t -i ubuntu /bin/bash
</span></code></pre></td></tr></table></div></figure>


<p>To suspend the container, we need to know the pid of the container.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ ID</span><span class="o">=</span><span class="sb">`</span>docker ps -l -q<span class="sb">`</span>
</span><span class='line'><span class="nv">$ PID</span><span class="o">=</span><span class="sb">`</span>docker inspect <span class="nv">$ID</span> | jq <span class="s1">&#39;.[0].State.Pid&#39;</span><span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, our long journey is almost done. Let&rsquo;s suspend the container!!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>criu dump -t <span class="nv">$PID</span> --images-dir /tmp/docker
</span><span class='line'>Error <span class="o">(</span>mount.c:449<span class="o">)</span>: 102:./dev/console doesn<span class="err">&#39;</span>t have a proper root mount
</span><span class='line'>Error <span class="o">(</span>cr-dump.c:1882<span class="o">)</span>: Dumping FAILED.
</span></code></pre></td></tr></table></div></figure>


<p>CRIU said dumping failed. After googling the error message, I found this discussion.</p>

<p><a href="https://lists.linuxcontainers.org/pipermail/lxc-devel/2013-November/006326.html">[lxc-devel] [CRIU] LXC live migrate</a></p>

<blockquote><p>That&rsquo;s container&rsquo;s console which is a bind mounted tty from
the host. And since this is an external connection, CRIU doesn&rsquo;t dump one.</p></blockquote>

<p>What?! But, <a href="http://criu.org/LXC">this page</a> says CRIU supports LXC checkpoint/restart. Docker uses LXC under the hood, so how come it doesn&rsquo;t work?</p>

<p>In the same thread of the discussion, I also found this.</p>

<p><a href="https://lists.linuxcontainers.org/pipermail/lxc-devel/2013-November/006326.html">[lxc-devel] [CRIU] LXC live migrate</a></p>

<blockquote><p>AFAIK cgroups are used <em>inside</em> containers only with recent guest templates.
In OpenVZ we use more old ones (and more stable) so haven&rsquo;t meet this yet.
And yes, cgroups are in plans for the nearest future :)</p></blockquote>

<p>So, it seems CRIU does not support cgroup at the time of writing this (Jun 2014). However Docker uses LXC template that uses cgroups. Therefore, CRIU doesn&rsquo;t work with Docker containers.</p>

<p>Sigh&hellip;</p>

<h2>Conclusion</h2>

<p>With this experiment, I found that we cannot checkpoint/resume Docker container with CRIU v1.3 because it does not support cgroups.</p>

<p>The result turned out to be a bit disappointed. However, I&rsquo;m sure now you know that CRIU is extremely exciting project.</p>

<p>In contrast to its potential impact to LXC ecosystem, I believe the project is not receiving enough attention, so give a star and start watching their <a href="https://github.com/xemul/criu">Github repo</a> now!! I will definitely cover more things about CRIU on this blog, too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(WIP) Ruby To Go: How can I do X in Ruby with Go? (Part I)]]></title>
    <link href="http://kimh.github.io/blog/en/go/how-can-i-do-x-in-ruby-with-go-part-1/"/>
    <updated>2014-05-16T23:39:00+09:00</updated>
    <id>http://kimh.github.io/blog/en/go/how-can-i-do-x-in-ruby-with-go-part-1</id>
    <content type="html"><![CDATA[<p>I am a programmer who can write decent Ruby and some Javascript.</p>

<p>These two languages were all I know. I wanted to add Go to my list of programming language, so I started learning Go.</p>

<p>It&rsquo;s boring to read programming books to study programming languages, so I decided to learn Go by porting some programs written in Ruby.</p>

<p>While I was porting Ruby program to Go, I came to think it is useful if there is a cheatsheet that I can loop up in order to convert idiomatic Ruby code to Go.</p>

<p>Ruby and Go are totally different language, so sometimes it is impossible to simply translate Ruby code to Go.
However, it is possible in most cases to write Go code that is sematically equivalant to Ruby code.</p>

<p>So, here is a <strong><em>How can I do X in Ruby with Go?</em></strong> cheetsheet.</p>

<p>I hope you find it useful.</p>

<h2>Contents of this artcile</h2>

<h3>Array and Enumerable Operation</h3>

<ul>
<li><a href="#create_array">Create array</a></li>
<li><a href="#append_an_element_to_array">Append element to array</a></li>
<li><a href="#concatenate_arrays">Concatenate arrays</a></li>
<li><a href="#create_multi_dimension_aray">Create multi dimension array</a></li>
<li><a href="#create_empty_array">Create empty array</a></li>
<li><a href="#iterate_on_an_array">Iterate on array</a></li>
<li><a href="#looping_n_times">Looping N times</a></li>
<li><a href="#clone_array">Clone array</a></li>
<li><a href="#accessing_elements_of_an_array_by_range">Accessing elements of array by range</a></li>
<li><a href="#compare_array">Compare array</a></li>
<li><a href="#check_if_array_includes_an_element">Check if array includes an element</a></li>
</ul>


<h3>Method Definition</h3>

<ul>
<li><a href="#define_a_method_with_optional_parameter">Define a method with optional parameter</a></li>
<li><a href="#define_a_method_with_variable_length_argument">Define a method with variable length arugment</a></li>
</ul>


<h3>MathematicOperation</h3>

<ul>
<li><a href="#modular_of_negative_number">Modular of negative number</a></li>
</ul>


<h3>Misc</h3>

<ul>
<li><a href="#nil_checking">Nil checking</a></li>
<li><a href="#checking_the_class">Checking the class</a></li>
</ul>


<p><a id="array_and_enumerable_operation"></a></p>

<h2>Array and Enumerable Operation</h2>

<p>Array is very powerful data structure and enumerable is probably the most frequently used object in Ruby.</p>

<p>In Go, we have two different enumerable data structures: <strong>array</strong> and <strong>slice</strong>.
I don&rsquo;t write about details about them since it is not the goal of this post, but array is low-level data structure that slice refers to.</p>

<p><a id="create_array"></a></p>

<h3>Create array</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">fruits</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;apple&quot;</span><span class="p">,</span> <span class="s2">&quot;banana&quot;</span><span class="p">,</span> <span class="s2">&quot;grape&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">numbers</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="nx">fruits</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;apple&quot;</span><span class="p">,</span> <span class="s">&quot;banana&quot;</span><span class="p">,</span> <span class="s">&quot;grape&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the case of Go, <code>numbers</code> and <code>words</code> are <strong>slice</strong>, not <strong>array</strong>. Array is primitive data structure, not frequently used in Go code.
If you want to archive similar things to Ruby array, slice should work for you.</p>

<p><a id="append_an_element_to_array"></a></p>

<h3>Append an element to array</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">numbers</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">numbers</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="nx">numbers</span><span class="p">.</span><span class="nb">append</span><span class="p">(</span><span class="nx">numbers</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>append</strong> adds elements to slice and <strong><em>return new slice</em></strong>. Therefore, you have to reassign to itself.</p>

<p><a id="concatenate_arrays"></a></p>

<h3>Concatenate arrays</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">numbers2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="o">]</span>
</span><span class='line'><span class="n">numbers1</span> <span class="o">=</span> <span class="n">numbers1</span> <span class="o">+</span> <span class="n">numbers2</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">numbers1</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="nx">numbers2</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">}</span>
</span><span class='line'><span class="nx">numbers1</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">numbers1</span><span class="p">,</span> <span class="nx">numbers2</span><span class="o">...</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>...</code> suffix on the slice indicates that it should be passed as the variadic argument, expanded as each <code>int</code> elements inside <code>append</code>.
Thus, this is equivalent to below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">numbers1</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="nx">numbers1</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">numbers1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="create_multi_dimension_aray"></a></p>

<h3>Create multi dimension array</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">multi_array</span> <span class="o">=</span> <span class="o">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">mul</span> <span class="p">[][]</span><span class="kt">int</span> <span class="p">=</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">{</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="create_empty_array"></a></p>

<h3>Create empty array</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">array</span> <span class="p">[]</span><span class="kt">int</span>
</span></code></pre></td></tr></table></div></figure>


<p>When slice is declared, but not initialised, the slice points to an array of size 0.</p>

<p><a id="iterate_on_an_array"></a></p>

<h3>Iterate on array</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">numbets</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">num</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">num</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">numbers</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">num</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">numbers</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to access the index while iterating over the slice, replace <code>_</code> with other variable, for example, <code>i</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">numbers</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">num</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">numbers</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;index: &quot;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="s">&quot;number: &quot;</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="looping_n_times"></a></p>

<h3>Looping N times</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="o">|</span><span class="n">num</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">num</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">for</span> <span class="nx">num</span><span class="o">:=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">num</span> <span class="p">&lt;</span><span class="mi">5</span><span class="p">;</span> <span class="nx">num</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="clone_array"></a></p>

<h3>Clone array</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">new_array</span> <span class="o">=</span> <span class="n">old_array</span><span class="o">.</span><span class="n">clone</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">new_array</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">old_array</span><span class="p">))</span>
</span><span class='line'><span class="nb">copy</span><span class="p">(</span><span class="nx">new_array</span><span class="p">,</span> <span class="nx">old_array</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="accessing_elements_of_an_array_by_range"></a></p>

<h3>Accessing elements of array by range</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span><span class="o">=[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">numbers</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">ary</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">}</span>
</span><span class='line'><span class="nx">ary</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">4</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that, with <code>from:to</code>, <code>to</code> is the index where to end <strong>but not including the index itself</strong>.</p>

<p><a id="compare_array"></a></p>

<h3>Compare array</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">ary1</span> <span class="o">==</span> <span class="n">ary2</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Same array&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">same</span> <span class="o">:=</span> <span class="kc">true</span>
</span><span class='line'><span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">elm</span><span class="o">:=</span> <span class="k">range</span> <span class="nx">ary1</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="nx">ary2</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!=</span> <span class="nx">r</span> <span class="p">{</span> <span class="nx">same</span> <span class="p">=</span> <span class="kc">false</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="nx">same</span> <span class="o">==</span> <span class="kc">true</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Same slice&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You cannot compare slice in Go. You will get <code>slice can only be compared to nil</code> error if you try to do that.</p>

<p><a id="check_if_array_includes_an_element"></a></p>

<h3>Check if array includes an element</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">fruits</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;apple&quot;</span><span class="p">,</span> <span class="s2">&quot;banana&quot;</span><span class="p">,</span> <span class="s2">&quot;grape&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">fruits</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;apple&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;include!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">include</span> <span class="o">:=</span> <span class="kc">false</span>
</span><span class='line'><span class="nx">fruits</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;apple&quot;</span><span class="p">,</span> <span class="s">&quot;banana&quot;</span><span class="p">,</span> <span class="s">&quot;grape&quot;</span><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">elm</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">fruits</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">elm</span> <span class="o">==</span> <span class="s">&quot;apple&quot;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">include</span> <span class="p">=</span> <span class="kc">true</span>
</span><span class='line'>    <span class="k">break</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="nx">include</span> <span class="o">==</span> <span class="kc">true</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;include!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Method Definition</h2>

<p>There are two things that are equivalant to Ruby&rsquo;s method in Go: <strong>method</strong> and <strong>function</strong>.
Method is a type of function but requires specific receiver.</p>

<p><a id="define_a_method_with_optional_parameter"></a></p>

<h3>Define a method with optional parameter</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">greeting</span><span class="p">(</span><span class="n">word</span><span class="o">=</span><span class="s2">&quot;hello!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">word</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<p>This is not possbile in Go. Go does not support optional parameter in function or method definition.
One workaround is using struct.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">greetingArg</span> <span class="kd">struct</span> <span class="p">{</span> <span class="nx">word</span> <span class="kt">string</span> <span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">greeting</span><span class="p">(</span><span class="nx">opt</span> <span class="nx">greetingArg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">word</span> <span class="o">:=</span> <span class="nx">opt</span><span class="p">.</span><span class="nx">word</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">word</span> <span class="o">==</span> <span class="s">&quot;&quot;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;hello!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">greeting</span><span class="p">(</span><span class="nx">greetingArg</span><span class="p">{})</span>
</span><span class='line'><span class="nx">greeting</span><span class="p">(</span><span class="nx">greetingArg</span><span class="p">{</span><span class="s">&quot;bye!&quot;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="define_a_method_with_variable_length_argument"></a></p>

<h3>Define a method with variable length argument</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">arg</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">arg</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">arg</span> <span class="o">...</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">arg</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">arg</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Prinln</span><span class="p">(</span><span class="nx">arg</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Mathematic Operation</h2>

<p><a id="modular_of_negative_number"></a></p>

<h3>Modular of negative number</h3>

<p>Both Ruby and Go supports modular of negative number. However, their behavior is different.</p>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="mi">5</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="o">-</span><span class="mi">5</span> <span class="o">%</span> <span class="mi">3</span> <span class="p">=&gt;</span> <span class="o">-</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Go follows <strong><em>truncated toward zero</em></strong> for the division of negative number.</p>

<p>If you want to get the same value that Ruby returns, here is how to do this.</p>

<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">divider</span> <span class="o">:=</span> <span class="mi">3</span>
</span><span class='line'><span class="nx">mod</span> <span class="o">:=</span> <span class="o">-</span><span class="mi">5</span> <span class="o">%</span> <span class="nx">divider</span>
</span><span class='line'><span class="k">if</span> <span class="nx">mod</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mod</span> <span class="p">=</span> <span class="nx">mod</span> <span class="o">+</span> <span class="nx">divider</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that values returnd by Ruby and Go are both mathematically correct. It&rsquo;s just there are two ways to define negative modulo.</p>

<h2>Misc</h2>

<p><a id="nil_checking"></a></p>

<h3>Nil checking</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">val</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;val is nil&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">str</span> <span class="kt">string</span>
</span><span class='line'><span class="k">if</span> <span class="nx">str</span> <span class="o">==</span><span class="s">&quot;&quot;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;str is empty&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">i</span> <span class="kt">int</span>
</span><span class='line'><span class="k">if</span> <span class="nx">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;i is zero&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you declear a variable without intialization, the variable is set to zero value for its type.
Below is default zero value for primitive types.</p>

<table>
<thead>
<tr>
<th></th>
<th> Type </th>
<th align="center"> Value </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> string </td>
<td align="center"> <strong>&lsquo;&rsquo;</strong></td>
</tr>
<tr>
<td></td>
<td> int    </td>
<td align="center"> <strong>0</strong></td>
</tr>
<tr>
<td></td>
<td> float  </td>
<td align="center"> <strong>0.0</strong></td>
</tr>
<tr>
<td></td>
<td> boolean </td>
<td align="center"> <strong>false</strong></td>
</tr>
<tr>
<td></td>
<td> pointer </td>
<td align="center"> <strong>nil</strong></td>
</tr>
<tr>
<td></td>
<td> interface </td>
<td align="center"> <strong>nil</strong></td>
</tr>
<tr>
<td></td>
<td> slice </td>
<td align="center"> <strong>nil</strong></td>
</tr>
<tr>
<td></td>
<td> map </td>
<td align="center"> <strong>nil</strong></td>
</tr>
</tbody>
</table>


<p><a id="checking_the_class"></a></p>

<h3>Checking the class</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;abc&quot;</span><span class="o">.</span><span class="n">class</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">import</span> <span class="s">&quot;reflect&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">reflect</span><span class="p">.</span><span class="nx">TypeOf</span><span class="p">(</span><span class="s">&quot;abc&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[シャミアの秘密分散法で秘密のデータを分割管理する]]></title>
    <link href="http://kimh.github.io/blog/jp/security/protect-your-secret-key-with-shamirs-secret-sharing-jp/"/>
    <updated>2014-05-03T22:07:00+09:00</updated>
    <id>http://kimh.github.io/blog/jp/security/protect-your-secret-key-with-shamirs-secret-sharing-jp</id>
    <content type="html"><![CDATA[<p><img src="http://kimh.github.io/images/pieces.jpg" alt="" /></p>

<p>つい最近<a href="https://github.com/PolyPassHash/PolyPassHash">PollyPassHash</a>という新しいパスワード管理手法を知りました。</p>

<p>PolyPassHashingについては時間があれば別のポストで書きますが、要約すると、ある一定数の管理者の正しいパスワードが入力されないと暗号化されたパスワードデータベースを復号化できないようにするための仕組みです。</p>

<p>このポストではPolyPassHashingの中核の暗号技術である <strong><em>シャミアの秘密分散法</em></strong> の紹介とそれを実現する数学的な仕組みを解説したいと思います。</p>

<h2>この記事の内容</h2>

<h4><a href="#what_is_shamirs_secret_sharing">シャミアの秘密分散法とはなにか</a></h4>

<h4><a href="#basic_terms">用語</a></h4>

<h4><a href="#handson">実際にやってみる: Rubyでシャミアの秘密分散</a></h4>

<h4><a href="#handson">仕組み</a></h4>

<ul>
<li><a href="#share_computation">シェアの計算</a></li>
<li><a href="#secret_reconstruction">シークレットの復元</a></li>
</ul>


<p><a id="what_is_shamirs_secret_sharing"></a></p>

<h2>シャミアの秘密分散法とはなにか</h2>

<p>名前からわかるとおり、シャミアの秘密分散法はRSAのアルゴリズムにも貢献した有名なイスラエル人の暗号研究者アディ・シャミアによって作られました。</p>

<p>シャミアの秘密分散法は秘密のデータであるシークレットを複数のシェアに分割します。一定数のシェアを持ち寄ることで元のデータを復元することができます。</p>

<p>何かデータを暗号化しなければいけないとしましょう。どんな暗号化方式を使ってもいいですが、暗号の鍵はあとで復号するためにどこかに保存しなければいけません。</p>

<p>この鍵は安全な場所と方法で保管されないといけません。もし、この鍵が盗まれたら攻撃者は暗号化したデータを簡単に復号化できてしまいます。しかし、鍵を安全に保管するというのはとても難しい問題です。その鍵を誰かと共有する場合はもっと難しくなります。</p>

<p>鍵の保管と共有は管理者にとって常に頭痛のタネです。</p>

<p>しかし、シャミアの秘密分散法を使えば二つの問題をかなりの割合で解決することができます。</p>

<p>まず、暗号の鍵を複数に分割してそれぞれを別々の管理者に渡します。各管理者は渡された鍵の断片を大切に保管しなければいけませんが、仮に一つの断片が盗まれたとしても元の鍵は復元することはできません。</p>

<p>攻撃者は複数の管理者が持っている断片を盗まないといけないので、もとの鍵を盗むことは格段に難しくなります。</p>

<p><a id="basic_terms"></a></p>

<h2>用語</h2>

<p>詳細に行く前に使われる用語を明確にしておきましょう。</p>

<h4>シークレット</h4>

<p>シークレットは攻撃者には知られてはいけないデータです。メッセージや数字の羅列の形を取り、用途は暗号の鍵だったり秘密にしたいメッセージだったりします。
(英語だと<strong><em>Secret</em></strong>と簡潔に言えますが、日本語でピンとくる単語が見つからなかったのでカタカナにしました。)</p>

<h4>シェア</h4>

<p>シークレットを分割してできた各断片をシェアと呼びます。シェアはシークレットから計算して得られます。シークレットを復元するためには一定数のシェアがそろわないといけません。(シェアは英語だと<strong><em>share</em></strong>です。直訳すると<strong><em>割り符</em></strong>になりますが、これもなんかしっくりこないのでシェアと書くことにします。)</p>

<h4>閾値</h4>

<p>閾値はシークレットを復元するために最低必要なシェアの数です。閾値以上のシェアがそろっている場合のみ、もとのシークレットを復元することができます。</p>

<p><a id="handson"></a></p>

<h2>実際にやってみる: Rubyでシャミアの秘密分散</h2>

<p>そろそろシャミアの秘密分散が動くところを実際に見てみましょう。僕が書いた小さなRubyのライブラリを使ってデモします。このライブラリは<a href="https://github.com/PolyPassHash/PolyPassHash">PolyPassHash project</a>で使われているPythonで書かれたものをポートしたものです。Python版は<a href="https://github.com/JustinCappos">JustinCappos</a>によって書かれました。</p>

<p>まず、コードを<a href="https://github.com/PolyPassHash/PolyPassHash-Ruby">PolyPassHash-Ruby</a>から落としてきて、<code>shamirsecret.rb</code>を<code>irb</code>セッションにロードします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone https://github.com/PolyPassHash/PolyPassHash-Ruby
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>PolyPassHash-Ruby
</span><span class='line'><span class="nv">$ </span>irb -r ./shamirsecret.rb
</span></code></pre></td></tr></table></div></figure>


<p>実際に秘密のメッセージ<code>In the name of Adi Shamir</code>を分割して、閾値の数のシェアを使うことで復元できることを見てみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># まず、ShamirSecretクラスのインスタンスを作成しましょう</span>
</span><span class='line'><span class="c1"># 第一引数に閾値の数を渡します。以下の場合だと2が閾値なので、2つ以上のシェアが必要ということになります</span>
</span><span class='line'><span class="c1"># 第二引数には分割したいシークレットを渡します</span>
</span><span class='line'><span class="n">shamirsecret</span> <span class="o">=</span> <span class="no">ShamirSecret</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;In the name of Adi Shamir&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 次に与えられたシークレットからシェアを計算します。ここでは３人にシェアを渡すことにしましょう。3つシェアを生成します</span>
</span><span class='line'><span class="c1"># 引数にはシェア番号を渡します。シェア番号が何かは後で説明するので、ここでは一意な整数とだけ覚えておいてください</span>
</span><span class='line'><span class="n">s1</span> <span class="o">=</span> <span class="n">shamirsecret</span><span class="o">.</span><span class="n">compute_share</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">s2</span> <span class="o">=</span> <span class="n">shamirsecret</span><span class="o">.</span><span class="n">compute_share</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">s3</span> <span class="o">=</span> <span class="n">shamirsecret</span><span class="o">.</span><span class="n">compute_share</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># シェアを計算したら、シークレットは捨てます。シェアがそろえば復元できるので保管する必要はありません</span>
</span><span class='line'><span class="n">shamirsecret</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 今度は復元です。もう一度ShamirSecretクラスのインスタンスを作成します。今回は復元なのでシークレットは引数に渡しません</span>
</span><span class='line'><span class="n">shamirsecret</span> <span class="o">=</span> <span class="no">ShamirSecret</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 閾値は2に設定したので2つのシェアがあればシークレットを復元できます</span>
</span><span class='line'><span class="n">shamirsecret</span><span class="o">.</span><span class="n">recover_secretdata</span><span class="p">(</span><span class="o">[</span><span class="n">s1</span><span class="p">,</span><span class="n">s3</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;In the name of Adi Shamir&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>今度は正しくないシェアを使ったらどうなるかを見てみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 同じようにインスタンスを作成してシェアを計算します</span>
</span><span class='line'><span class="n">shamirsecret</span> <span class="o">=</span> <span class="no">ShamirSecret</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;In the name of Adi Shamir&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">s1</span> <span class="o">=</span> <span class="n">shamirsecret</span><span class="o">.</span><span class="n">compute_share</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">s2</span> <span class="o">=</span> <span class="n">shamirsecret</span><span class="o">.</span><span class="n">compute_share</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">s3</span> <span class="o">=</span> <span class="n">shamirsecret</span><span class="o">.</span><span class="n">compute_share</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># この時点ではシェアが正しいものであることを確認します</span>
</span><span class='line'><span class="n">shamirsecret</span><span class="o">.</span><span class="n">is_valid_share</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># シェアの1バイトを変更します</span>
</span><span class='line'><span class="n">s1</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">s1</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">%</span> <span class="mi">256</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># このシェアはもう正しくありません</span>
</span><span class='line'><span class="n">shamirsecret</span><span class="o">.</span><span class="n">is_valid_share</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 正しくないシェアを使って復元されたシークレットは壊れています</span>
</span><span class='line'><span class="n">shamirsecret</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">shamirsecret</span> <span class="o">=</span> <span class="no">ShamirSecret</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">shamirsecret</span><span class="o">.</span><span class="n">recover_secretdata</span><span class="p">(</span><span class="o">[</span><span class="n">s1</span><span class="p">,</span><span class="n">s3</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="se">\xC6</span><span class="s2">n the name of Adi Shamir&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="how_this_works"></a></p>

<h2>仕組み</h2>

<p>少しだけ数学を勉強しましょう。シャミアの秘密分散法は基礎的な多項式を使います。</p>

<p>シャミアの秘密分散は２つのステップに分かれます: <strong>シェアの計算</strong>と<strong>シークレットの復号</strong>です。一つずつ見ていきましょう。</p>

<p><a id="share_computation"></a></p>

<h3>シェアの計算</h3>

<h4>ステップ1: シークレットを決める</h4>

<p>まず最初にシークレットを決めます。説明を簡単にするために、ここではとてもシンプルなシークレットにしましょう。<code>3</code>という数字をシークレットにします。</p>

<p>もちろんもっと複雑なシークレット、<em>I love you</em> とか <em>4b0649b1faf1c1ea7cb0e900</em> とかでも構いません。その場合は、数字として扱う必要があるので文字列をバイト配列に変換すればいいだけです。</p>

<h4>ステップ2: 閾値を決める</h4>

<p>次に閾値を決めます。ここでは <code>3</code> を閾値にしましょう。閾値が3なのでシークレットを復元するために三つシークレットが必要ということになります。</p>

<h4>ステップ3: 多項式を生成する</h4>

<p>シェアを計算するための多項式を生成します。多項式とは<strong>y=3x+1</strong> や <strong>y=5x<sup>2</sup>+10x-3</strong>の形をした方程式のことです。
多項式の係数は自由に決めて構いませんが、次数は<strong>閾値 &ndash; 1</strong>じゃないといけません。</p>

<p>今回は閾値を<code>3</code>に設定したので、次数は<code>2</code>になります。次数が2の多項式は<strong>y=ax<sup>2</sup>+bx+c</strong>の形を取ります。係数はなんでもいいので<strong><em>a</em></strong>は<code>2</code>、<strong><em>b</em></strong>は<code>1</code>にしましょう。</p>

<p><strong><em>c</em></strong>にはシークレットを使わないといけません。つまり、<strong><em>c</em></strong>は<code>3</code>ということになります。</p>

<p>これで多項式ができました: <strong>y=2x<sup>2</sup>+x+3</strong></p>

<p>準備は整いました。以下は上記の設定をまとめたものです。</p>

<blockquote><p><strong>シークレット:</strong> 3</p>

<p><strong>閾値:</strong>  3</p>

<p><strong>多項式:</strong> y=2x<sup>2</sup>+x+3</p></blockquote>

<h4>ステップ4: グラフを書く</h4>

<p>このステップはシャミアの秘密分散の計算をするためには必ずしも必要ではありませんが、グラフを書くことで理解が簡単になります。</p>

<p>多項式のグラフは以下のようになります。</p>

<p><img src="http://kimh.github.io/images/polygraph0.jpg" alt="y=2x^2+x+3のグラフ" /></p>

<h4>ステップ5: 点をグラフに描画する</h4>

<p>三つの点をグラフの線上に書きます。</p>

<p>例として、<strong>(x,y)(1, 6)</strong>, <strong>(x,y)(2,13)</strong>, <strong>(x,y)(-2, 9)</strong>をグラフ線上に書いてみましょう。</p>

<p><img src="http://kimh.github.io/images/polygraph1.jpg" alt="点をグラフ線上に書く" /></p>

<p>このそれぞれの点が<strong><em>シェア</em></strong>になります。<strong>x</strong>の値が前述した<em>シェア番号</em>になり<strong>y</strong>の値が<em>シェア</em>になります。</p>

<p>閾値を<code>3</code>に設定したことを思い出してください。閾値が<code>3</code>なので、今回は三つの点を書きました。</p>

<p>もっとシェアが必要であればさらに点を増やせばいいだけです。</p>

<p>シェアが計算できたら、シェアと閾値以外はすべて忘れて構いません。多項式、グラフ、シークレットは捨ててしまいましょう。</p>

<p>シェアと閾値を知っている限り他のすべてを復元することができます。</p>

<p><a id="secret_reconstruction"></a></p>

<h3>シークレットの復元</h3>

<p>今、シェアと閾値以外は何も知らない状態ですが、ここから元のシークレットを復元することができます。</p>

<p>わかりやすくするためにもう一度グラフを使いましょう。</p>

<p><strong>(x,y)(1, 6)</strong>, <strong>(x,y)(2,13)</strong>, <strong>(x,y)(-2, 9)</strong> の点をグラフに書きます。</p>

<p>次に、これらの点を線で結びます。これらの点は元の多項式から得た点なので線で結べばグラフを引くことができます。</p>

<p><img src="http://kimh.github.io/images/polygraph4.jpg" alt="" /></p>

<p>グラフはあくまで理解の助けをするためなので正確なグラフが書けなくても構いません。</p>

<p>しかし、多項式の定義では<a href="http://en.wikipedia.org/wiki/Shamir's_Secret_Sharing#Shamir.27s_secret-sharing_scheme">直線には２点、放射線には３点さえあれば正確な線を引くことができます。</a> (Wikipedia)</p>

<p>これにより、たとえ手で正確なグラフを書くことができなくても計算すれば正確なグラフを求めることができます。</p>

<h4>多項式補間</h4>

<p>閾値は<code>3</code>と知っているので、次数が<code>2</code> (次数は閾値 &ndash; 1) の<strong>y=ax<sup>2</sup>+bx+c</strong>の形の多項式に点を代入すれば元の多項式を得ることができます。</p>

<p>３つの点を<strong>y=ax<sup>2</sup>+bx+c</strong>に代入します。</p>

<blockquote><p><strong>(1)</strong> (1,6)  => <strong>c = a + b &ndash; 6</strong></p>

<p><strong>(2)</strong> (2,13) => <strong>c = 4a + 2b &ndash; 13</strong></p>

<p><strong>(3)</strong> (-2,9) => <strong>c = 4a &ndash; 2b &ndash; 9</strong></p></blockquote>

<p>次に<strong>(1)</strong>を<strong>(2)</strong>と<strong>(3)</strong>に代入して<strong>a</strong>を得ます。</p>

<blockquote><p><strong>(4)</strong> <strong>(1)</strong>を<strong>(2)</strong>に代入します => <strong>b = -3a + 7</strong></p>

<p><strong>(5)</strong> <strong>(1)</strong>を<strong>(3)</strong>に代入します => <strong>3b = 3a -3</strong></p>

<p><strong>(6)</strong> <strong>(4)</strong>を<strong>(5)</strong>に代入します => <strong>a = 2</strong></p></blockquote>

<p>これで、<strong>a</strong>を得ることができました。今度は<strong>b</strong>を求めます。</p>

<blockquote><p><strong>(7)</strong> <strong>a=2</strong>を<strong>(1)</strong>に代入します => <strong>c=b &ndash; 4</strong></p>

<p><strong>(8)</strong> <strong>a=2</strong>を<strong>(2)</strong>に代入します => <strong>c=2b &ndash; 5</strong></p>

<p><strong>(9)</strong> <strong>(7)</strong>を<strong>(8)</strong>に代入します => <strong>b = 1</strong></p></blockquote>

<p>これで<strong>a</strong>と<strong>b</strong>を得ることができました。最後に<strong>c</strong>を得ます。</p>

<blockquote><p><strong>(10)</strong> <strong>a=2</strong>と<strong>b=1</strong>を<strong>(1)</strong>に代入します => <strong>c=3</strong></p></blockquote>

<p>これで終わりです。無事元の多項式である<strong>y=2x<sup>2</sup>+x+3</strong>を得ることができました。係数がない項がシークレットなので正しいシークレットである<strong>3</strong>を復元することができました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Divide And Manage Secret Data Securely With Shamir's Secret Sharing]]></title>
    <link href="http://kimh.github.io/blog/en/security/protect-your-secret-key-with-shamirs-secret-sharing/"/>
    <updated>2014-04-22T20:51:00+09:00</updated>
    <id>http://kimh.github.io/blog/en/security/protect-your-secret-key-with-shamirs-secret-sharing</id>
    <content type="html"><![CDATA[<p><img src="http://kimh.github.io/images/pieces.jpg" alt="" /></p>

<p>Recently, I came to know an interesting and new idea about password storage schema called <a href="https://github.com/PolyPassHash/PolyPassHash">PollyPassHash</a>.</p>

<p>I may write about PolyPassHasing in more details in separate post, but in summary, PolyPassHashing proposes a new password storage schema that requires certain numbers of shared keys to decrypt the encrypted password.</p>

<p>In this post, I will write about <strong><em>Shamir&rsquo;s secret sharing</em></strong>, one of key technologies used in PolyPassHashing, and try to explain the mathematical basis that archive this great secret sharing technology.</p>

<h2>Contents of This Article</h2>

<h4><a href="#what_is_shamirs_secret_sharing">What is Shamir&rsquo;s secret sharing?</a></h4>

<h4><a href="#basic_terms">Basic terms</a></h4>

<h4><a href="#handson">HandsOn: Play Shamir&rsquo;s Secret with Ruby</a></h4>

<h4><a href="#handson">Understanding mathematical basis</a></h4>

<ul>
<li><a href="#share_computation">Share Computation</a></li>
<li><a href="#secret_reconstruction">Secret Reconstruction</a></li>
</ul>


<p><a id="what_is_shamirs_secret_sharing"></a></p>

<h2>What is Shamir&rsquo;s secret sharing</h2>

<p>As the name implies, Shamir&rsquo;s secret sharing is created by Adi Shamir, an famous Israeli cryptographer, who also contributed to the invention of RSA algorithm.</p>

<p>Shamir&rsquo;s secret sharing is an algorithm that divides a secret into shares. Secret can be recovered by combining certain numbers of shares.</p>

<p>Imagine a case where you have to encrypt some data. No matter which encryption method you use, you must store the secret key used in the encryption in order to decrypt later.</p>

<p>The key has to be very secured. If the key is stolen by attacker, your data will be easily decrypted. However, storing key is always difficult problem. It gets even more difficult if you need to share the key with others.</p>

<p>This problem of storing and sharing secret key is cause of headache for administrators.</p>

<p>However, if you use Shamir&rsquo;s secret sharing algorithm, you can solve the two problems to greater extent.</p>

<p>You can divide your secret key into pieces and distribute them to other administrators. Each administrator still needs to keep a piece of secret key, but knowing a piece is not enough to recover the original secret.</p>

<p>Because attacker must compromise multiple administrator&rsquo;s pieces, secret generated by Shamir&rsquo;s secret sharing is very difficult to be compromised.</p>

<p><a id="basic_terms"></a></p>

<h2>Basic Terms</h2>

<p>Before going into details, let&rsquo;s clarify some terms used in Shamir&rsquo;s Secret sharing.</p>

<h4>Secret</h4>

<p>Secret is a secret message or number that you want to share with others securely.</p>

<h4>Share</h4>

<p>Share is a piece of secret. Secret is divided into pieces and each piece is called share. It is computed from given secret. In order to recover the secret, you need to get certain numbers of shares.</p>

<h4>Threshold</h4>

<p>Threshold is the number of shares you need at least in order to recover your secret. You can restore your secret only when you have more than or equal to the number of threshold.</p>

<p><a id="handson"></a></p>

<h2>HandsOn: Play Shamir&rsquo;s Secret With Ruby</h2>

<p>Do you want to see what you can do with Shamir&rsquo;s secret sharing? Let&rsquo;s use a small Ruby library that I wrote to demonstrate the idea. This library is ported from Python Shamir&rsquo;s secret sharing library used in <a href="https://github.com/PolyPassHash/PolyPassHash">PolyPassHash project</a> originally written by <a href="https://github.com/JustinCappos">JustinCappos</a>.</p>

<p>First get the code from <a href="https://github.com/PolyPassHash/PolyPassHash-Ruby">PolyPassHash-Ruby</a> and load <code>shamirsecret.rb</code> into your <code>irb</code> session.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone https://github.com/PolyPassHash/PolyPassHash-Ruby
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>PolyPassHash-Ruby
</span><span class='line'><span class="nv">$ </span>irb -r ./shamirsecret.rb
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s encrypt some messages and see if we can recover the message when giving enough numbers of shares.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># First, you need to instantiate ShamirSecret class.</span>
</span><span class='line'><span class="c1"># You can specify the number of threshold in the first argument. In this case, two shares are required.</span>
</span><span class='line'><span class="c1"># You can pass a message to encrypt in the second argument. </span>
</span><span class='line'><span class="n">shamirsecret</span> <span class="o">=</span> <span class="no">ShamirSecret</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;In the name of Adi Shamir&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># We compute shares from the given secret. Let&#39;s assume we want to distribute to three parties, so lets create three shares.</span>
</span><span class='line'><span class="c1"># The argument is so called share number. You will know what it is later in this post.</span>
</span><span class='line'><span class="c1"># For now, just remember that it has to be unique number.</span>
</span><span class='line'><span class="n">s1</span> <span class="o">=</span> <span class="n">shamirsecret</span><span class="o">.</span><span class="n">compute_share</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">s2</span> <span class="o">=</span> <span class="n">shamirsecret</span><span class="o">.</span><span class="n">compute_share</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">s3</span> <span class="o">=</span> <span class="n">shamirsecret</span><span class="o">.</span><span class="n">compute_share</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Once we computed shares, we will throw the secret away because we should be able to recover from shares.</span>
</span><span class='line'><span class="n">shamirsecret</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Then we will recover the secret. Instantiate ShamirSecret again. We don&#39;t pass secret this time because we just want to recover secret.</span>
</span><span class='line'><span class="n">shamirsecret</span> <span class="o">=</span> <span class="no">ShamirSecret</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Now we can recover the secret by giving two shares or more since we set threshold to be 2.</span>
</span><span class='line'><span class="n">shamirsecret</span><span class="o">.</span><span class="n">recover_secretdata</span><span class="p">(</span><span class="o">[</span><span class="n">s1</span><span class="p">,</span><span class="n">s3</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;In the name of Adi Shamir&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s confirm what happens if we gave wrong shares.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Instantiate and compute share in the same way</span>
</span><span class='line'><span class="n">shamirsecret</span> <span class="o">=</span> <span class="no">ShamirSecret</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;In the name of Adi Shamir&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">s1</span> <span class="o">=</span> <span class="n">shamirsecret</span><span class="o">.</span><span class="n">compute_share</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">s2</span> <span class="o">=</span> <span class="n">shamirsecret</span><span class="o">.</span><span class="n">compute_share</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">s3</span> <span class="o">=</span> <span class="n">shamirsecret</span><span class="o">.</span><span class="n">compute_share</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Make sure our share is valid</span>
</span><span class='line'><span class="n">shamirsecret</span><span class="o">.</span><span class="n">is_valid_share</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Change a byte of share</span>
</span><span class='line'><span class="n">s1</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">s1</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">%</span> <span class="mi">256</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># The share is not valid anymore</span>
</span><span class='line'><span class="n">shamirsecret</span><span class="o">.</span><span class="n">is_valid_share</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Secret is corrupted with wrong share</span>
</span><span class='line'><span class="n">shamirsecret</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">shamirsecret</span> <span class="o">=</span> <span class="no">ShamirSecret</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">shamirsecret</span><span class="o">.</span><span class="n">recover_secretdata</span><span class="p">(</span><span class="o">[</span><span class="n">s1</span><span class="p">,</span><span class="n">s3</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="se">\xC6</span><span class="s2">n the name of Adi Shamir&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="how_this_works"></a></p>

<h2>How This Works</h2>

<p>It&rsquo;s time to do some math. Shamir&rsquo;s secret sharing is using the very basic idea of polynomial.</p>

<p>We have two major steps: <strong>Share Computation</strong> and <strong>Secret Reconstruction</strong>. Let&rsquo;s do one by one.</p>

<p><a id="share_computation"></a></p>

<h3>Share Computation</h3>

<h4>Step1: Decide secret</h4>

<p>First, we need to decide our secret message. To make our story simple, let&rsquo;s choose dead simple one, <code>3</code>, as our secret.</p>

<p>If you choose more complex message such as <em>I love you</em> or <em>4b0649b1faf1c1ea7cb0e900</em>, you just need to convert them to byte array so that you can treat them as a number.</p>

<h4>Step2: Decide threshold</h4>

<p>Next thing to decide is the threshold. We will choose <code>3</code> as our threshold. This means that you need at least three shares to recover the secret.</p>

<h4>Step3: Create polynomial</h4>

<p>We need to create our polynomial. Polynomial is the equation that looks like <strong>y=3x+1</strong> or <strong>y=5x<sup>2</sup>+10x-3</strong>.
You can choose any numbers for coefficient, but the degree of your polynomial must be <strong>threshold -1 </strong>.</p>

<p>Our threshold is <code>3</code>, so the degree must be <code>2</code> in our case. The polynomial of degree of 2 should takes the form of <strong>y=ax<sup>2</sup>+bx+c</strong>. Since you can choose any numbers
for coefficient, we will use <code>2</code> for <strong><em>a</em></strong> and <code>1</code> for <strong><em>b</em></strong>.</p>

<p>What <strong><em>c</em></strong> will be? <strong><em>c</em></strong> must to be our secret. Therefore, we use <code>3</code> for <strong><em>c</em></strong>.</p>

<p>This is our polynomial: <strong>y=2x<sup>2</sup>+x+3</strong>.</p>

<p>Now we have everything to demonstrate Shamir&rsquo;s secret sharing. This is our configuration</p>

<blockquote><p><strong>Secret:</strong> 3</p>

<p><strong>Threshold:</strong>  3</p>

<p><strong>Polynomial:</strong> y=2x<sup>2</sup>+x+3</p></blockquote>

<h4>Step4: Draw graph</h4>

<p>Note that drawing graph is not necessary to do computation for Shamir&rsquo;s secret sharing. However, we can understand how this works better by drawing graph.</p>

<p>The graph of our polynomial looks like this one.</p>

<p><img src="http://kimh.github.io/images/polygraph0.jpg" alt="Graph of y=2x^2+x+3" /></p>

<h4>Step5: Plot points on the graph</h4>

<p>Plot three points on the line of graph.</p>

<p>For example, we plot <strong>(x,y)(1, 6)</strong>, <strong>(x,y)(2,13)</strong>, <strong>(x,y)(-2, 9)</strong> on the line of graph.</p>

<p><img src="http://kimh.github.io/images/polygraph1.jpg" alt="Plot points on the line of graph" /></p>

<p>These points are your <strong><em>shares</em></strong>. The value in <strong>x</strong> is called <em>share number</em> and the value of <strong>y</strong> is a <em>share</em>.</p>

<p>Remember that we decided our threshold to be <code>3</code>? Three shares are minimum number of shares that we need. That&rsquo;s why we plotted three points.</p>

<p>You can get even more shares by plotting extra points if you want to distribute shares to more parties.</p>

<p>Once you get shares, forget everything but your threshold and shares!! Throw your polynomial, the graph, and your secret.</p>

<p>As long as you have your shares and threshold, you can recover everything else.</p>

<p><a id="secret_reconstruction"></a></p>

<h3>Secret Reconstruction</h3>

<p>Now you know nothing but shares and threshold, but you can still recover your secret by combining the shares.</p>

<p>To get this idea, we will again use graph.</p>

<p>Plot points of your shares, <strong>(x,y)(1, 6)</strong>, <strong>(x,y)(2,13)</strong>, <strong>(x,y)(-2, 9)</strong>, on the graph.
Then connecting your points and draw imaginary line. If you could do this, you can now recover your polynomial because you are connecting
points derived from the polynomial.</p>

<p><img src="http://kimh.github.io/images/polygraph4.jpg" alt="" /></p>

<p>Not sure if your line is accurate? Yes, it is is difficult to draw the completely same line because it is curving line. It doesn&rsquo;t matter because drawing graph is just to help you understand the idea.</p>

<p>However, by definition, <a href="http://en.wikipedia.org/wiki/Shamir's_Secret_Sharing#Shamir.27s_secret-sharing_scheme">2 points are sufficient to define a line, 3 points are sufficient to define a parabola</a> (Wikipedia)</p>

<p>Therefore, although it is difficult to draw the imaginary line by hands from points of shares,  you should be able to do that by doing some math. Now, let&rsquo;s do this.</p>

<h4>Polynomial interpolation</h4>

<p>Since we know that our threshold is <code>3</code>, we know that we need to get the polynomial of degree of <code>2</code> (remember that degree is threshold &ndash; 1) which looks like this: <strong>y=ax<sup>2</sup>+bx+c</strong></p>

<p>Substitute three points into <strong>y=ax<sup>2</sup>+bx+c</strong>.</p>

<blockquote><p><strong>(1)</strong> (1,6)  => <strong>c = a + b &ndash; 6</strong></p>

<p><strong>(2)</strong> (2,13) => <strong>c = 4a + 2b &ndash; 13</strong></p>

<p><strong>(3)</strong> (-2,9) => <strong>c = 4a &ndash; 2b &ndash; 9</strong></p></blockquote>

<p>Now substitute <strong>(1)</strong> into <strong>(2)</strong> and <strong>(3)</strong> to get <strong>a</strong>.</p>

<blockquote><p><strong>(4)</strong> substitute <strong>(1)</strong> into <strong>(2)</strong> => <strong>b = -3a + 7</strong></p>

<p><strong>(5)</strong> substitute <strong>(1)</strong> into <strong>(3)</strong> => <strong>3b = 3a -3</strong></p>

<p><strong>(6)</strong> substitute <strong>(4)</strong> into <strong>(5)</strong> => <strong>a = 2</strong></p></blockquote>

<p>We could get <strong>a</strong>. Let&rsquo;s compute <strong>b</strong> next.</p>

<blockquote><p><strong>(7)</strong> substitute <strong>a=2</strong> into <strong>(1)</strong> => <strong>c=b &ndash; 4</strong></p>

<p><strong>(8)</strong> substitute <strong>a=2</strong> into <strong>(2)</strong> => <strong>c=2b &ndash; 5</strong></p>

<p><strong>(9)</strong> substitute <strong>(7)</strong> into <strong>(8)</strong> => <strong>b = 1</strong></p></blockquote>

<p>Now we could get <strong>a</strong> and <strong>b</strong>. At last, we can compute <strong>c</strong>.</p>

<blockquote><p><strong>(10)</strong> substitute <strong>a=2</strong> and <strong>b=1</strong> into <strong>(1)</strong> => <strong>c=3</strong></p></blockquote>

<p>We are done. We could recover original polynomial <strong>y=2x<sup>2</sup>+x+3</strong> and you can find your secret at free coefficient, which is <strong>3</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「ライト、ついてますか」から学ぶ問題発見の心得]]></title>
    <link href="http://kimh.github.io/blog/jp/thoughts/important-things-about-problem-finding-learnd-from-are-your-lights-on-ja/"/>
    <updated>2014-03-20T23:46:00+09:00</updated>
    <id>http://kimh.github.io/blog/jp/thoughts/important-things-about-problem-finding-learnd-from-are-your-lights-on-ja</id>
    <content type="html"><![CDATA[<p><img src="http://kimh.github.io/images/lighton.jpg" alt="Lights on?" /></p>

<p>エンジニアの一日は問題解決の連続です。普段は当たり前すぎて意識していませんが、気にしてみるといかにそうであるかがわかります。</p>

<ul>
<li>落ちたサーバを復旧させる</li>
<li>与えられた文字列を正規化するコードを書く</li>
<li>関係者全員のスケジュールが合うようにミーティングをセッティングする</li>
</ul>


<p>優れた解決方法を考えだすには、まず問題を正しく定義しなければいけません。</p>

<p>この記事では問題発見学の名著、「<a href="" title="http://www.amazon.co.jp/%E3%83%A9%E3%82%A4%E3%83%88%E3%80%81%E3%81%A4%E3%81%84%E3%81%A6%E3%81%BE%E3%81%99%E3%81%8B%E2%80%95%E5%95%8F%E9%A1%8C%E7%99%BA%E8%A6%8B%E3%81%AE%E4%BA%BA%E9%96%93%E5%AD%A6-%E3%83%89%E3%83%8A%E3%83%AB%E3%83%89%E3%83%BBC%E3%83%BB%E3%82%B4%E3%83%BC%E3%82%B9/dp/4320023684">ライト、ついてますか</a>」 から重要な点を引用して、どのようにすればより良い問題定義ができるかについて書きたいと思います。</p>

<p><strong>注：</strong>引用が英語なのは原本しか読んでいないからです。&#8221;訳：&#8221;とあるところは自分で翻訳しただけなので日本語版の実際の言い回しとは異なります。
また今回読んだKindle版にはページ情報がなかったので、引用元はページ番号ではなくその引用があった章を代わりに書いています。</p>

<h2>問題とは何か？</h2>

<p><strong><em>A problem is a difference between things as desired and things as perceived</em></strong> <strong>（３章）</strong></p>

<p><strong>訳：</strong>問題とはそうあるべき状態と今ある状態の差である</p>

<p>そもそも問題とはなんでしょうか？著者は問題を上記のように定義しています。
問題をこのように定義するといいことがひとつあります。それは、見方を変えることで問題が解決する可能性があることです。</p>

<p>とても時間のかかる処理があるとします。真っ先に思いつく解決方法は処理を早くすることです。しかし、見方を変えて
処理に時間がかかってもいいと考えたらどうでしょうか？バッチ処理にして夜中にやればどうでしょうか？このように見方を変えるだけで
問題そのものをなくすことができます。</p>

<p><strong><em>Don&rsquo;t take their solution method for a problem definition</em></strong> <strong>（４章）</strong></p>

<p><strong>訳：</strong>他人の解決方法を問題の定義としてはいけない</p>

<p>人が問題だと言っていることが本当の問題とは限りません。本に書かれている例が一番わかりやすいので要約して紹介します。</p>

<blockquote><p>会社の購入担当者がある競売で一番有利になる競り方を考えるように命じられました。この競売にはとても複雑なルールがあり
沢山のケースを考慮しなければいけないと考え、考える限りのケース想定してその中で一番いいものを使うことにしました。</p>

<p>ケースの組み合わせは、４の１１乗、4,000,000パターンありそのすべてをシミュレーションするようにプログラマのグループに命じました。
パターンが多いので普通にやると彼らのコンピュータでは１２時間かかってしまい、それだと競売の時間までにぎりぎりです。</p>

<p>プログラマのグループは上司の自分たちの抱えている問題は4,000,000パターンの計算をいかにして高速化することだと言い、アドバイスを求めました。</p>

<p>上司は少し考え、購入担当者の部屋に言って詳しい競売のルールを聞きに行きました。</p>

<p>詳しいルールを理解した上司はベストな競売の方法を一瞬で導きだしました。</p>

<p>ルールを正しく分析すれば、4,000,000パターンの計算など必要なかったのです。</p></blockquote>

<p>この話で学ぶことは、他人（購入担当者とプログラマ）が問題の解決方法だと信じた計算を本当の問題と考えてはいけないということです。
真の問題は4,000,000ケースの計算の高速化ではなく、競売で一番有利な方法を導きだすことなのです。</p>

<h2>問題を解決する前に</h2>

<p>問題がきちんと定義されれば解決することはさほど難しくありません。しかし、ちょっと待ってください。その問題はあなたの問題ですか？
本当にあなたが解決しないといけませんか？まずは、次の質問を自分に問いかけてみましょう。</p>

<p><strong><em>Whose problem is it?</em></strong> <strong>（１１章）</strong></p>

<p><strong>訳：</strong>誰の問題か？</p>

<p>本当にあなたが解決しなければいけませんか？もし、その問題が誰かの問題ならあなたが解決しようとするべきではありません。
もし、あなたの問題でなければ、頼まれないかぎり何もしないのがベストです。私たちは自分の問題解決に時間に忙しいはずですから。</p>

<p><strong><em>Where does this problem come from?</em></strong> <strong>（１４章）</strong></p>

<p><strong>訳：</strong>この問題はどこから来たのか？</p>

<p>この問いも問題が本当に自分の問題なのか調べるのに役立ちます。なぜ自分はその問題に直面しているのか？なぜこんなことになったのか？
自分に落ち度があるか？それとも、誰か他人に巻き込まれたか？</p>

<p>もし、問題の出所が自分であった場合は自分がしていることを正せばいいので解決は比較的簡単です。</p>

<p><strong><em>Ignoring the problem</em></strong> <strong>（３章）</strong></p>

<p><strong>訳：</strong>問題を無視する</p>

<p>時には問題そのものを無視するのもありです。気づかないふりをしていまいましょう。問題は、あるべき状態と現在の状態の差ですが、
人間はすぐに適応する生き物です。最初はみんな問題だと感じてもいつの間にかそれが当たり前のようになるものです。</p>

<p>あなたが作り出したバグのワークアラウンドのために、オペレーションの人に余計な手動の作業が発生したとします。&#8221;近い内に直す&#8221;と言って、
１年も経てばワークアラウンド作業はオペレーションの業務に組み込まれて、その作業が当たり前のものになります。おめでとう！ <strong>あるべき状態</strong> と <strong>今ある状態</strong> が同じになり問題そのものが消えました。</p>

<p>&hellip;.もちろん、勧められる方法ではありませんがこれも一つの問題解決方法と言えます。</p>

<h2>考えをやめない</h2>

<p>あなたは問題を正しく定義して適切な解答を導き出しました。しかし、まだリラックスはできません。</p>

<p><strong><em>Each solution is the source of the next problem</em></strong> <strong>（７章）</strong></p>

<p><strong>訳：</strong>あるひとつの解決方法は別の新しい問題を生む</p>

<p>私たちが問題を解決してもリラックスできないのは、その解決方法がまた別の問題を生み出すからです。これはエンジニアは直感的に理解していると思います。
PythonやRubyのような動的型付けなスクリプトプログラミング言語はそれまで他の言語が抱えていた問題を沢山解決しました。
インタープリタさえあればどこでも同じコードを走らせることもできるし、対話的にプログラミングすることもできます。
メタプログラミングを使うことで動的にコードを生成することでコードのDRY化をもたらしました。</p>

<p>しかし、今では動的片付け言語がもたらした解決方法は他の問題を生むことは広く知られています。インタープリタを挟むのでスクリプト言語の実行速度は遅く、
メタプログラミングはコードをデバックしずらくして、コードの保守性を下げてしまうことがしばしばあります。</p>

<p>PythonやRubyがもたらした過去の問題への解決は新たな問題を生み、今度は静的型付けの言語がそれらの問題を解決すべく注目されています。そして、この連鎖は恐らくずっと続くでしょう。</p>

<p>これに対してできることはそれほどないはずです。一つ言えるのは、問題への解決方法が新たな問題を生む、ということを認識して常に考えることをやめないことです。</p>

<p><strong><em>The really important thing in dealing with problems is to know that the question is never answered, but that it doesn&rsquo;t matter, as long as you keep asking</em></strong> <strong>（第６章）</strong></p>

<p><strong>訳：</strong>最も重要なことは問題は解決されることがないと知ることだ。しかし、考えることを止めなければは大したことではない。</p>

<p>無事に解決方法を見つけても、その解決方法が最も正しかったかどうかはわかりません。それどころか、問題定義がそもそも正しくなかったかもしれません。
自分の出した答えが完璧だったと信じることが一番厄介です。なぜなら、完璧な答えなどないからです。だから、私たちは常に問題を振り返って見直さなければいけないのです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dashingのカスタムウィジェットを作成する]]></title>
    <link href="http://kimh.github.io/blog/jp/dashing/creating-custom-dashing-widget-ja/"/>
    <updated>2014-02-09T21:05:00+09:00</updated>
    <id>http://kimh.github.io/blog/jp/dashing/creating-custom-dashing-widget-ja</id>
    <content type="html"><![CDATA[<p><img src="http://kimh.github.io/images/dashing_preview.png" alt="Dashing Preview" /></p>

<h2>Dashingの紹介</h2>

<p><a href="https://github.com/Shopify/dashing">Dashing</a>というダッシュボード作成のフレームワークをご存知ですか？ Dashingを使えば、上のようなダッシュボードを簡単に作ることができます。いいですよね？欲しいですよね？</p>

<p>この記事では、自分で一からウィジェットを作成する方法を解説していきます。Dashingの基本的な使い方は、<a href="http://shopify.github.io/dashing/">公式ページ</a> を見ればすぐわかると思うのでここでは割愛です。</p>

<h2>目次</h2>

<h4><a href="#creating_sample_dashboard">サンプルダッシュボードの作成</a></h4>

<h4><a href="#files_for_widget">ウィジェットに必要なファイル</a></h4>

<h4><a href="#creating_job_file">ジョブファイルを作成</a></h4>

<h4><a href="#writing_job_code">ジョブのコードを書く</a></h4>

<h4><a href="#writing_widget_code">ウィジェットのコードを書く</a></h4>

<h4><a href="#using_widget">ウィジェットを使う</a></h4>

<h4><a href="#publishing_widget">ウィジェットを公開する</a></h4>

<p><a id="creating_sample_dashboard"></a></p>

<h2>サンプルダッシュボードの作成</h2>

<p>このチュートリアルで使うサンプルのダッシュボードをまず作成しましょう。サンプルダッシュボードは <strong>My Dashboard</strong> という名前にして、<strong>Fizz Buzz</strong> ウィジェットを作成しましょう。
FizzBuzzウィジェットは一定間隔で数字をインクリメントしていって、３で割り切れる数字の場合は<strong>Fizz</strong>と、５で割り切れる場合は<strong>Buzz</strong>と、どちらでも割り切れる場合は、<strong>FizzBuzz</strong>と表示するウィジェットです。</p>

<p><img src="http://kimh.github.io/images/fizzbuzz.png" alt="Widget Preview" /></p>

<p>新しいダッシュボードを作成するのは以下のコマンドを実行するだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>dashing new my_dashboard
</span><span class='line'>      create  my_dashboard
</span><span class='line'>      create  my_dashboard/.gitignore
</span><span class='line'>      create  my_dashboard/Gemfile
</span><span class='line'>      create  my_dashboard/README.md
</span><span class='line'>      .... 省略 ....
</span><span class='line'>      create  my_dashboard/widgets/text/text.coffee
</span><span class='line'>      create  my_dashboard/widgets/text/text.html
</span><span class='line'>      create  my_dashboard/widgets/text/text.scss
</span></code></pre></td></tr></table></div></figure>


<p>これでカレントディレクトリに<code>my_dashboard</code>というディレクトリが作成されます。このディレクトリがダッシュボードのベースとなるので、以降の作業はすべて<code>my_dashboard</code>をrootディレクトリとして読んでください。</p>

<p><a id="files_for_widget"></a></p>

<h2>ウィジェットに必要なファイル</h2>

<p>Dashingはフレームワークなので、ルール従って開発すれば簡単に自分のウィジェットを作成することができます。ルールの一つに必要なファイルを用意することと、Dashingの命名規則に従ってそれらのファイル/ディレクトリ名をつけることがあります。</p>

<p>新たにウィジェットを作成するために必要なファイルは主に２つに分かれます。</p>

<p>ひとつはウィジェットのメインとなるウィジェットファイルで<strong>/widgets</strong> ディレクトリ配下に作られます。</p>

<p>もう一つはウィジェットにデータを渡すためのジョブファイルで、<strong>/jobs</strong>ディレクトリ配下に作られます。</p>

<p>まずは、ウィジェットファイルを作成しましょう。</p>

<h3>ウィジェットファイルを作成</h3>

<p>テンプレートとなるファイルをコマンドで作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>dashing generate widget fizz_buzz
</span><span class='line'>      create  widgets
</span><span class='line'>      create  widgets/fizz_buzz/fizz_buzz.coffee
</span><span class='line'>      create  widgets/fizz_buzz/fizz_buzz.html
</span><span class='line'>      create  widgets/fizz_buzz/fizz_buzz.scss
</span></code></pre></td></tr></table></div></figure>


<p>簡単に各ファイルの役割を説明すると</p>

<p><code>fizz_buzz.html</code> はウィジェットのhtmlそのものです。ジョブから渡されたデータをこのhtml内でレンダリングします。</p>

<p><code>fizz_buzz.scss</code> はウィジェットのスタイルを書く場所です。</p>

<p><code>fizz_buzz.coffee</code> はウィジェットで使うjavascriptを書くための場所です。ファイル名からもわかる通り、単なるJSファイルではなくcoffee script形式で書かないといけません。(私は普通のJSで書かせてほしいのですが、、、)</p>

<p>ウィジェットの表示に効果をつけたり、ウィジェットの初期化動作などを書くことができます。</p>

<p>このファイルは見た目のそこまでこだわらなければ、ほぼ空っぽでも構いません。これはDashingのいいところの一つだと思います。つまり、javascirptを全然知らなくても、それなりのウィジェットを作ることができるからです。</p>

<p><a id="creating_job_file"></a></p>

<h2>ジョブファイルを作成</h2>

<p>次にジョブファイルを作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>dashing generate job fizz_buzz
</span><span class='line'>      create  <span class="nb">jobs</span>
</span><span class='line'><span class="nb">      </span>create  <span class="nb">jobs</span>/fizz_buzz.rb
</span></code></pre></td></tr></table></div></figure>


<p><code>fizz_buzz.rb</code> はウィジェットに渡すためのデータを作るコードを書くファイルです。ジョブファイルの基本はcronのように定期的に実行される<a href="https://github.com/jmettraux/rufus-scheduler">Rufus Scheduler</a>で、
メインのコードをrufusによっての定期実行されるブロックの中に書いていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SCHEDULER</span><span class="o">.</span><span class="n">every</span> <span class="s1">&#39;2s&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ここにメインのコードを書く</span>
</span><span class='line'>  <span class="c1"># 2sなのでウィジェットのデータが２秒毎に更新されることになる</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="writing_job_code"></a></p>

<h2>ジョブのコードを書く</h2>

<p>まずはウィジェットにデータを提供するためのジョブのコーディングから始めましょう。以下のようなコードになります。</p>

<p><strong>fizz_buzz.rb</strong> @ <a href="https://gist.github.com/kimh/8899670#file-fizz_buzz-rb">Gist</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FizzBuzz</span>
</span><span class='line'>  <span class="no">FIZZ</span><span class="o">=</span><span class="mi">3</span>
</span><span class='line'>  <span class="no">BUZZ</span><span class="o">=</span><span class="mi">5</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@current_num</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fizzbuzz</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">fizzbuzz?</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">=</span> <span class="s2">&quot;fizzbuzz&quot;</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">fizz?</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">=</span> <span class="s2">&quot;fizz&quot;</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">buzz?</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">=</span> <span class="s2">&quot;buzz&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">=</span> <span class="vi">@current_num</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">go_next</span>
</span><span class='line'>    <span class="n">out</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">go_next</span>
</span><span class='line'>    <span class="vi">@current_num</span><span class="o">+=</span><span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fizz?</span>
</span><span class='line'>    <span class="p">(</span><span class="vi">@current_num</span> <span class="o">%</span> <span class="mi">3</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">buzz?</span>
</span><span class='line'>    <span class="p">(</span><span class="vi">@current_num</span> <span class="o">%</span> <span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fizzbuzz?</span>
</span><span class='line'>    <span class="p">(</span><span class="vi">@current_num</span> <span class="o">%</span> <span class="p">(</span><span class="no">FIZZ</span><span class="o">*</span><span class="no">BUZZ</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">fb</span> <span class="o">=</span> <span class="no">FizzBuzz</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="no">SCHEDULER</span><span class="o">.</span><span class="n">every</span> <span class="s1">&#39;5s&#39;</span><span class="p">,</span> <span class="ss">:first_in</span> <span class="o">=&gt;</span> <span class="mi">0</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">send_event</span><span class="p">(</span><span class="s1">&#39;fizz_buzz&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">value</span><span class="p">:</span> <span class="n">fb</span><span class="o">.</span><span class="n">fizzbuzz</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>1 ~ 43行は普通のRubyで書いたFizzBuzzクラスとそれのインスタンスを作っているだけです。これらのコードは、<code>SCHEDULER</code>の外に書かれているので定期実行はされず、<code>dashing start</code>で
ダッシュボードを起動した時の一度だけ実行されるので一度だけ初期化したい処理 (例えば、ステータスを保存する変数とか)を書きます。</p>

<p>46行目の<code>send_event</code>がジョブファイルのキモです。</p>

<p><code>send_event</code>は一つ目の引数にウィジェットの名前を指定します。この名前は、後述するレイアウトファイルに書くウィジェットのhtmlの<code>data-id</code>属性で指定する名前とマッチしないといけません。</p>

<p>二つめの引数には、ウィジェットに渡すデータをハッシュ形式で指定します。ハッシュのキーは<code>fizz_buzz.html</code>内の<code>data-bind</code>属性で指定している名前と同じにします。</p>

<p><strong>fizz_buzz.html</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">data</span><span class="o">-</span><span class="n">bind</span><span class="o">=</span><span class="s2">&quot;value&quot;</span><span class="o">&gt;&lt;</span><span class="sr">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>send_event</code>で送ったデータは<code>data-bind="value"</code>属性をもっている<code>div</code>タグの内容として挿入されます。</p>

<p>つまり、<code>send_event('fizz_buzz', { value: "fizzbuzz" })</code> とすると、<code>fizz_buzz.html</code> は以下のように自動で変更されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">data</span><span class="o">-</span><span class="n">bind</span><span class="o">=</span><span class="s2">&quot;value&quot;</span><span class="o">&gt;</span><span class="n">fizzbuzz</span><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>この自動でhtmlの内容が更新される仕組みは<strong>batman.js</strong>の<a href="http://batmanjs.org/docs/api/batman.view_bindings.html">data binding</a>を使って実現しています。</p>

<p><a id="writing_widget_code"></a></p>

<h2>ウィジェットのコードを書く</h2>

<p>ジョブファイルでデータを更新できる準備は整ったので今度はそのデータをウィジェットとして表示するコードを書きます。</p>

<p>まずは、ウィジェットそのもののhtmlを担当するファイルです。今回はチュートリアルなのでシンプルにしています。</p>

<p><strong>fizz_buzz.html</strong> @ <a href="https://gist.github.com/kimh/8899670#file-fizz_buzz-html">Gist</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;title&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">bind</span><span class="o">=</span><span class="s2">&quot;title&quot;</span><span class="o">&gt;&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'><span class="sr">&lt;div data-bind=&quot;value&quot;&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>。1行目はウィジェットのタイトルを表示します。このタイトルは後述するレイアウトファイルの<code>data-title</code>属性で指定した値が表示されます。</p>

<p>2行目は前述したように、<code>send_event</code>から送られてくるデータを表示します。</p>

<p>次にウィジェットのスタイルを担当するファイルです。</p>

<p><strong>fizz_buzz.scss</strong> @ <a href="https://gist.github.com/kimh/8899670#file-fizz_buzz-scss">Gist</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">widget</span><span class="o">-</span><span class="n">fizz</span><span class="o">-</span><span class="n">buzz</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">background</span><span class="o">-</span><span class="ss">color</span><span class="p">:</span> <span class="c1">#444;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここでは、ウィジェットの背景色を指定しています。セレクタは<code>.widget</code>で始めてその後に自分のウィジェットの名前をつなげた名前にします。そして、ブロック内にそのウィジェットに関わるスタイルを書いていきます。</p>

<p><strong>ここで少し命名規則に注意です。</strong> rubyのジョブファイルではウィジェットの名前はアンダースコア区切りの<code>fizz_buzz</code>でしたが、こっちはCSSファイルなので、ウィジェットの名前の単語をつなげるのは<code>-</code>にしないといけません。</p>

<p>最後にウィジェットにエフェクトをつけるcoffee scriptです。何もエフェクトを使わなければここはテンプレートのままでも構いませんが、せっかくなので少しだけエフェクトをつけてみます。</p>

<p><strong>fizz_buzz.coffee</strong> @ <a href="https://gist.github.com/kimh/8899670#file-fizz_buzz-coffee">Gist</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dashing</span><span class="o">.</span><span class="n">FizzBuzz</span> <span class="n">extends</span> <span class="no">Dashing</span><span class="o">.</span><span class="n">Widget</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">ready</span><span class="p">:</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c1"># ここは初期化時に実行したいエフェクトを書く</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">onData</span><span class="p">:</span> <span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="err">$</span><span class="p">(</span><span class="vi">@node</span><span class="p">)</span><span class="o">.</span><span class="n">fadeOut</span><span class="p">()</span><span class="o">.</span><span class="n">fadeIn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>$(@node)</code>でウィジェット全体のDOMを取得することができるので、これでデータが更新される度にエフェクトが効きます。</p>

<p><a id="using_widget"></a></p>

<h2>ウィジェットを使ってみる</h2>

<p>これでFizzBuzzウィジェットは出来上がりました。あとはウィジェットを使うだけです。まずはレイアウトファイルを作成します。ここではレイアウトファイルの名前は<code>fizz_buzz_display</code>としましたが、なんでも構いません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>dashing generate dashboard fizz_buzz_display
</span><span class='line'>      exist  dashboards
</span><span class='line'>      create  dashboards/fizz_buzz_display.erb
</span></code></pre></td></tr></table></div></figure>


<p>レイアウトファイルができたら以下のように編集します。</p>

<p><strong>fizz_buzz_display.erb</strong> @ <a href="https://gist.github.com/kimh/8899670#file-fizz_buzz_display-erb">Gist</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;gridster&quot;</span>&gt;
</span><span class='line'>  &lt;ul&gt;
</span><span class='line'>    &lt;li data-row<span class="o">=</span><span class="s2">&quot;1&quot;</span> data-col<span class="o">=</span><span class="s2">&quot;1&quot;</span> data-sizex<span class="o">=</span><span class="s2">&quot;1&quot;</span> data-sizey<span class="o">=</span><span class="s2">&quot;1&quot;</span>&gt;
</span><span class='line'>      &lt;div data-id<span class="o">=</span><span class="s2">&quot;fizz_buzz&quot;</span> data-view<span class="o">=</span><span class="s2">&quot;FizzBuzz&quot;</span> data-title<span class="o">=</span><span class="s2">&quot;Fizz Buzz&quot;</span>&gt;&lt;/div&gt;
</span><span class='line'>    &lt;/li&gt;
</span><span class='line'>  &lt;/ul&gt;
</span><span class='line'>&lt;/div&gt;
</span></code></pre></td></tr></table></div></figure>


<p><code>data-id</code>属性が一番重要な部分です。ここで表示するウィジェットを指定しています。<code>fizz_buzz.rb</code>内の<code>send_event</code>の第一引数でデータを送るウィジェットを指定しましたが、それはここの名前を指定しています。</p>

<p><code>data-view</code>属性はウィジェットのcoffee scriptのクラスと一致しないといけません。coffee scriptはマッチする<code>data-view</code>を<code>@node</code>にマップします。</p>

<p><code>data-title</code>属性で指定したタイトルが<code>fizz_buzz.html</code>内の<code>data-bind="title"</code>を持つ要素の内容として表示されます。ここでは&#8221;Fizz Buzz&#8221;と指定しているので</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;h1 <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;title&quot;</span> data-bind<span class="o">=</span><span class="s2">&quot;title&quot;</span>&gt;Fizz Buzz&lt;/h1&gt;
</span></code></pre></td></tr></table></div></figure>


<p>となります。</p>

<p>これでFizzBuzzウィジェットが表示されるはずです。<code>dashing start</code>でダッシュボードを起動して、<code>http://localhost:3030/fizz_buzz_display</code>にアクセスしてみてください。ちゃんと表示されたでしょうか？</p>

<p>今回は、チュートリアル用に個別で<code>fizz_buzz_display</code>を作りましたが、FizzBuzzウィジェットは他のダッシュボードでも使えます。使いたければ、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;li data-row<span class="o">=</span><span class="s2">&quot;1&quot;</span> data-col<span class="o">=</span><span class="s2">&quot;1&quot;</span> data-sizex<span class="o">=</span><span class="s2">&quot;1&quot;</span> data-sizey<span class="o">=</span><span class="s2">&quot;1&quot;</span>&gt;
</span><span class='line'>  &lt;div data-id<span class="o">=</span><span class="s2">&quot;fizz_buzz&quot;</span> data-view<span class="o">=</span><span class="s2">&quot;FizzBuzz&quot;</span> data-title<span class="o">=</span><span class="s2">&quot;Fizz Buzz&quot;</span>&gt;&lt;/div&gt;
</span><span class='line'>&lt;/li&gt;
</span></code></pre></td></tr></table></div></figure>


<p>をレイアウトファイルに書くだけです。</p>

<p><a id="publishing_widget"></a></p>

<h2>ウィジェットを公開する</h2>

<p>最後に作成したウィジェットは<a href="https://github.com/Shopify/dashing/wiki/Additional-Widgets">公開して使ってもらいましょう。</a></p>

<p>DashingはウィジェットをGistで管理しています。自分のGistページで新たにGistを作成して、ウィジェットに必要なファイル名と同じ名前でGistの内容に各ファイルのコードを書きます。</p>

<p>今回で言えば、以下の４つのファイルを一つのGistに作成します。</p>

<ul>
<li>fizz_buzz.html</li>
<li>fizz_buzz.css</li>
<li>fizz_buzz.coffee</li>
<li>fizz_buzz.rb</li>
</ul>


<p>Gistを作成したら、インストールできるか確認してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>dashing install GIST_ID
</span></code></pre></td></tr></table></div></figure>


<p><code>GIST_ID</code>は作成したGistのIDです。また必須ではありませんが、自分のウィジェットの使い方をGistにREADMEとして書いておくのが定番のようです。</p>

<p>正しく動けば、<a href="https://github.com/Shopify/dashing/wiki/Additional-Widgets">Additional Widgets</a>のWikiを修正して登録するのを忘れずに。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerfileを書く時の注意とかコツとかハックとか]]></title>
    <link href="http://kimh.github.io/blog/jp/docker/gothas-in-writing-dockerfile-jp/"/>
    <updated>2014-01-20T22:20:00+09:00</updated>
    <id>http://kimh.github.io/blog/jp/docker/gothas-in-writing-dockerfile-jp</id>
    <content type="html"><![CDATA[<h2>目次</h2>

<h4><a href="#why_do_we_need_to_use_dockerfile">なぜDockerfileを使うのか？</a></h4>

<h4><a href="#add_and_understanding_context_in_dockerfile">ADDとDockerfileにおいてのコンテキストを理解する</a></h4>

<h4><a href="#treat_your_container_like_a_binary_with_cmd">CMDでコンテナをバイナリのように扱う</a></h4>

<h4><a href="#difference_between_cmd_and_entrypoint">CMDとENTRYPOINTの違い</a></h4>

<ul>
<li><a href="#exec_format_error">exec format error</a></li>
</ul>


<h4><a href="#build_caching_what_invalids_cache_and_not">ビルド時のキャッシュについて: キャッシュが有効なときと無効なとき</a></h4>

<ul>
<li><a href="#cache_invalidation_at_one_instruction_invalids_cache_of_all_subsequent_instructions">ある一行でキャッシュが使われなかったらそれ以降のすべての行でキャッシュは使われない</a></li>
<li><a href="#cache_is_invalid_even_when_adding_commands_that_dont_do_anything">何もしないコマンドを追加してもキャッシュは無効になる</a></li>
<li><a href="#cache_is_invalid_when_you_add_spaces_between_command_and_arguments_inside_instruction">コマンドと引数の間に意味のないスペースの入れてもキャッシュは無効となる</a></li>
<li><a href="#cache_is_used_when_you_add_spaces_around_commands_inside_instruction">Dockerfileの行に意味のないスペースを入れてもキャッシュは有効</a></li>
<li><a href="#cache_is_used_for_non_idempotent_instructions">冪等ではない命令でもキャッシュは効いてしまう</a></li>
<li><a href="#instructions_after_add_never_cached_only_versions_prior_to_0.7.3">ADD以降にある命令はキャッシュされない (ただし、0.7.3以前のバージョンを使っている場合のみ)</a></li>
</ul>


<h4><a href="#hack_to_run_container_in_the_background"> コンテナをバックグラウンドで動かすハック</a></h4>

<p><a id="why_do_we_need_to_use_dockerfile"></a></p>

<h2>なぜDockerfileを使うのか？</h2>

<p>DockerfileはYet Anotherシェルではありません。Dockerfileは特別なミッションを持っています。それは、<em>Dockerイメージ作成の自動化</em>です。</p>

<p>一度Dockerfileにイメージ作成の手順を記述すれば、それ以降は<code>docker build</code>コマンド一つで同じイメージを作ることができます。</p>

<p>Dockerfileはコンテナが何をしているかを別の人の伝える手段でもあります。Dockerfileにはイメージを作って動かすまでのすべてが書かれているので、Dockerfileを読むだけでそのコンテナのやるべき仕事がすぐにわかります。こうすれば、コンテナが何をしているかを調べるためにわざわざログインしてpsコマンドを駆使しなくてもいいというわけです。</p>

<p>簡単に述べましたが、これらの理由で、Dockerイメージを作るなら<strong>必ず</strong>Dockerfileを使ってください。しかし、Dockerfileを書くのは時々嫌になってしまうことがあるのも事実です。このポストではDockerfileを書く時に注意することわかりにくいことを解説します。この記事を読んでDockerfileに慣れてもらえればと思います。</p>

<p><a id="add_and_understanding_context_in_dockerfile"></a></p>

<h2>ADDとDockerfileにおいてのコンテキストを理解する</h2>

<p><strong><em>ADD</em></strong> is the instruction to add local files to Docker image.  The basic usage is very simple. Suppose you want to add a local file called <em>myfile.txt</em> to /myfile.txt of image.
<strong><em>ADD</em></strong>はローカルファイルシステムのファイルやディレクトリをDockerイメージにコピーするために使います。使い方は至って簡単。もし、ローカルにある<em>myfile.txt</em>をイメージの<em>/myfile.txt</em>にコピーしたい場合を説明します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>Dockerfile  mydir  myfile.txt
</span></code></pre></td></tr></table></div></figure>


<p>上記のようなディレクトリ構成の場合、Dockerfileは次のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ADD myfile.txt /
</span></code></pre></td></tr></table></div></figure>


<p>簡単ですね。しかし、<em>/home/vagrant/myfile.txt</em>を追加しようとすると失敗します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 以下の行がDockerfileにあるとします</span>
</span><span class='line'><span class="c"># ADD /home/vagrant/myfile.txt /</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>docker build -t blog .
</span><span class='line'>Uploading context 10240 bytes
</span><span class='line'>Step 1 : FROM ubuntu
</span><span class='line'> ---&gt; 8dbd9e392a96
</span><span class='line'>Step 2 : ADD /home/vagrant/myfile.txt /
</span><span class='line'>Error build: /home/vagrant/myfile.txt: no such file or directory
</span></code></pre></td></tr></table></div></figure>


<p><code>no such file or directory</code> と言われてしまいました。確かにファイルは存在するのになぜでしょうか？理由は <em>/home/vagrant/myfile.txt</em> がDockerfileのコンテキスト外だからです。DockerfileでのコンテキストとはDockerfile内の命令からアクセス可能なファイルやディレクトリの範囲のことです。そして、コンテキスト内のファイルとディレクトリしかイメージに追加することはできません。
カレントディレクトリ配下のファイルとディレクトリは自動的にコンテキストに追加されます。これは <code>build</code> コマンドを実行した時に確認できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker build -t blog .
</span><span class='line'>Uploading context 10240 bytes
</span></code></pre></td></tr></table></div></figure>


<p>ここで <code>build</code> コマンドが何をしているかというと、Dockerクライアントがカレントディレクトリ配下のファイルとディレクトリをtarballにまとめてDockerデーモンへ送信しています。なぜわざわざ送信する必要があるかというと、DockerクライアントとDockerデーモンは違うホストで動いている可能性があるからです。これが上記のコマンドを実行した時に <em>Uploading</em> と表示されている理由です。</p>

<p>ひとつ落とし穴があります。Dockerは自動的にカレントディレクトリ配下のファイルとディレクトリをコンテキストに追加するので、もし巨大なファイルやディレクトリを間違っておいておくと使う必要もないのにそれらのtarballを作ろうとします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>Dockerfile  very_huge_file
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>docker build -t blog .
</span><span class='line'>Uploading context xxxxxx bytes
</span><span class='line'>..... <span class="c"># すごく時間がかかる、、、</span>
</span></code></pre></td></tr></table></div></figure>


<p>ベストプラクティスとしては、イメージに追加したいファイルとディレクトリのみをbuildを実行するディレクトリに置くべきです。</p>

<p><a id="treat_your_container_like_a_binary_with_cmd"></a></p>

<h2>CMDでコンテナをバイナリのように扱う</h2>

<p>CMDをDockerfileで使うことで、コンテナを一つのバイナリのように扱うことができます。以下のようなDockerfileがあるとします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># run.shがDockerfileと同じディレクトリにあるとします</span>
</span><span class='line'>ADD run.sh /usr/local/bin/run.sh
</span><span class='line'>CMD <span class="o">[</span><span class="s2">&quot;/usr/local/bin/run.sh&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>このDockerfileからコンテナを作って、<code>docker run -i run_image</code>で起動すると<code>/usr/local/bin/run.sh</code>スクリプトを実行してコンテナは終了します。</p>

<p>もし、<code>CMD</code>を使わなかった場合、毎回起動する度に、<code>docker run -i run_image /usr/local/bin/run.sh</code>とコマンドラインで指定しないといけません。</p>

<p>これは、面倒なだけではなく、コンテナの運用の観点からもバッドプラクティスです。</p>

<p>もし、<code>CMD</code>がDockerfileにあればそのコンテナが何をするのか明確になります。
しかし、もしなかった場合コンテナを作った人以外の人がこのコンテナを正しく起動するためには外部のドキュメントに頼らなければいけません。</p>

<p>なので一般的には常に<code>CMD</code>はDockerfileに指定すべきです。</p>

<p><a id="difference_between_cmd_and_entrypoint"></a></p>

<h2>CMDとENTRYPOINTの違い</h2>

<p>  <code>CMD</code>と<code>ENTRYPOINT</code>はとても紛らわしいです。</p>

<p>コマンドラインから引数として渡されたものでも<code>CMD</code>から指定されたものでも、すべてのコマンドは<code>ENTRYPOINT</code>で指定されたバイナリの引数として渡されます。</p>

<p>  <code>/bin/sh -c</code> はデフォルトのエントリーポイントです。もし、エントリーポイントなしで<code>CMD date</code>と書いた場合、Dockerはこれを<code>/bin/sh -c date</code>として実行します。</p>

<p>エントリーポイントを使うことによってコンテナの挙動を実行時に変えることができるので、運用を柔軟にすることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ENTRYPOINT <span class="o">[</span><span class="s2">&quot;/bin/date&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のようなエントリーポイントがあった場合、このコンテナは現在時刻を違うフォーマットで出力することができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -i clock_container +<span class="s2">&quot;%s&quot;</span>
</span><span class='line'>1404214000
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>docker run -i clock_container +<span class="s2">&quot;%F&quot;</span>
</span><span class='line'>2014-07-01
</span></code></pre></td></tr></table></div></figure>


<p><a id="exec_format_error"></a></p>

<h3>exec format error</h3>

<p>デフォルトにエントリーポイントに関して、一つ注意することがあります。例えば以下のようなシェルスクリプトを実行したいとします。</p>

<p><strong><em>/usr/local/bin/run.sh</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;hello, world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Dockerfile</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ADD run.sh /usr/local/bin/run.sh
</span><span class='line'>RUN chmod +x /usr/local/bin/run.sh
</span><span class='line'>CMD <span class="o">[</span><span class="s2">&quot;/usr/local/bin/run.sh&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコンテナを起動すると、<code>hello, world</code>と出力することをあなたは期待すると思いますが、実際は意味のわからないエラーになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -i hello_world_image
</span><span class='line'>2014/07/01 10:53:57 <span class="nb">exec </span>format error
</span></code></pre></td></tr></table></div></figure>


<p>これは、シェルスクリプトにシェバングを忘れたため、デフォルトのエントリーポイントである<code>/bin/sh -c</code>がどのようにしてスクリプトを実行したらいいわからないためエラーになりました。</p>

<p>これを修正するには、単にシェバングを足すか、</p>

<p><strong><em>/usr/local/bin/run.sh</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;hello, world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>またはコマンドラインから指定することができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -entrypoint<span class="o">=</span><span class="s2">&quot;/bin/bash&quot;</span> -i hello_world_image
</span></code></pre></td></tr></table></div></figure>


<p><a id="build_caching_what_invalids_cache_and_not"></a></p>

<h2>ビルド時のキャッシュについて: キャッシュが有効なときと無効なとき</h2>

<p>DockerはDockerfileの各一行毎にコミットを作成していきます。行の記述を変更しない限り、Dockerは新しいイメージを作る必要がないと判断してキャッシュを使って次の行の元になるイメージを作成します。
これが初めて <code>docker build</code> を実行した時には時間がかかるのに、２回目からは一瞬でビルドが完了する理由です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">time </span>docker build -t blog .
</span><span class='line'>Uploading context 10.24 kB
</span><span class='line'>Step 1 : FROM ubuntu
</span><span class='line'> ---&gt; 8dbd9e392a96
</span><span class='line'>Step 2 : RUN apt-get update
</span><span class='line'> ---&gt; Running in 15705b182387
</span><span class='line'>Ign http://archive.ubuntu.com precise InRelease
</span><span class='line'>Hit http://archive.ubuntu.com precise Release.gpg
</span><span class='line'>Hit http://archive.ubuntu.com precise Release
</span><span class='line'>Hit http://archive.ubuntu.com precise/main amd64 Packages
</span><span class='line'>Get:1 http://archive.ubuntu.com precise/main i386 Packages <span class="o">[</span>1641 kB<span class="o">]</span>
</span><span class='line'>Get:2 http://archive.ubuntu.com precise/main TranslationIndex <span class="o">[</span>3706 B<span class="o">]</span>
</span><span class='line'>Get:3 http://archive.ubuntu.com precise/main Translation-en <span class="o">[</span>893 kB<span class="o">]</span>
</span><span class='line'>Fetched 2537 kB in 7s <span class="o">(</span>351 kB/s<span class="o">)</span>
</span><span class='line'>
</span><span class='line'> ---&gt; a8e9f7328cc4
</span><span class='line'>Successfully built a8e9f7328cc4
</span><span class='line'>
</span><span class='line'>real  0m8.589s
</span><span class='line'>user  0m0.008s
</span><span class='line'>sys   0m0.012s
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">time </span>docker build -t blog .
</span><span class='line'>Uploading context 10.24 kB
</span><span class='line'>Step 1 : FROM ubuntu
</span><span class='line'> ---&gt; 8dbd9e392a96
</span><span class='line'>Step 2 : RUN apt-get update
</span><span class='line'> ---&gt; Using cache
</span><span class='line'> ---&gt; a8e9f7328cc4
</span><span class='line'>Successfully built a8e9f7328cc4
</span><span class='line'>
</span><span class='line'>real  0m0.067s
</span><span class='line'>user  0m0.012s
</span><span class='line'>sys   0m0.000s
</span></code></pre></td></tr></table></div></figure>


<p>しかし、いつキャッシュが使われていつキャッシュが使われないのかはあまり明確ではありません。ここでは、いくつかのケースを紹介します。</p>

<p><a id="cache_invalidation_at_one_instruction_invalids_cache_of_all_subsequent_instructions"></a></p>

<h4>ある一行でキャッシュが使われなかったらそれ以降のすべての行でキャッシュは使われない</h4>

<p>これは一番基本のルールです。もし、Dockerfile内のある一行でキャッシュが使われない書き方をしていまうと、それ以降の行でキャッシュは全く使われなくなってしまいます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Before</span>
</span><span class='line'>From ubuntu
</span><span class='line'>Run apt-get install ruby
</span><span class='line'>Run <span class="nb">echo </span><span class="k">done</span>!
</span><span class='line'>
</span><span class='line'><span class="c"># After</span>
</span><span class='line'>From ubuntu
</span><span class='line'>Run apt-get update
</span><span class='line'>Run apt-get install ruby
</span><span class='line'>Run <span class="nb">echo </span><span class="k">done</span>!
</span></code></pre></td></tr></table></div></figure>


<p><em>Run apt-get update</em> という行を追加したことでベースのイメージを変更してしまったので、 それ以降の <strong>すべての</strong> 行で使うイメージも初めから作り直されないといけません。
Dockerfileはひとつ前の行で作られたイメージをベースにして行に書かれている命令を実行するので、これは当然の挙動だと言えます。</p>

<p><a id="cache_invalidation_at_one_instruction_invalids_cache_of_all_subsequent_instructions"></a></p>

<h4>何もしないコマンドを追加してもキャッシュは無効になる</h4>

<p><em>以下の例ではキャッシュは効きません。</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Before</span>
</span><span class='line'>Run apt-get update
</span><span class='line'>
</span><span class='line'><span class="c"># After</span>
</span><span class='line'>Run apt-get update <span class="o">&amp;&amp;</span> <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>true</code> コマンドは実際には何もしないコマンドですが、Dockerはキャッシュを使ってはくれません。</p>

<p><a id="cache_is_invalid_when_you_add_spaces_between_command_and_arguments_inside_instruction"></a></p>

<h4>コマンドと引数の間に意味のないスペースの入れてもキャッシュは無効となる</h4>

<p><em>以下の例ではキャッシュは効きません。</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Before</span>
</span><span class='line'>Run apt-get update
</span><span class='line'>
</span><span class='line'><span class="c"># After</span>
</span><span class='line'>Run apt-get               update
</span></code></pre></td></tr></table></div></figure>


<p><a id="cache_is_used_when_you_add_spaces_around_commands_inside_instruction"></a></p>

<h4>Dockerfileの行に意味のないスペースを入れてもキャッシュは有効</h4>

<p><em>以下の例ではキャッシュは有効になります。</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Before</span>
</span><span class='line'>Run apt-get update
</span><span class='line'>
</span><span class='line'><span class="c"># After</span>
</span><span class='line'>Run                apt-get update
</span></code></pre></td></tr></table></div></figure>


<p><a id="cache_is_used_for_non_idempotent_instructions"></a></p>

<h4>冪等ではない命令でもキャッシュは効いてしまう</h4>

<p>これはどちらかというとキャッシュの落とし穴についてです。 <em>冪等ではない命令</em> とは実行する度に結果が変わる可能性のあるコマンドを実行する行のことです。
例えば、 <code>apt-get update</code> は実行する度にアップデートされる内容が変わる可能性があるので冪等ではありません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>From ubuntu
</span><span class='line'>Run apt-get update
</span></code></pre></td></tr></table></div></figure>


<p>上記のDockerfileを作ってイメージを作成したとします。３ヶ月後、Ubutnuがセキュリティアップデートをあるリポジトリにリリースしたので、同じDockerfileを使ってイメージの再作成をしたとします。(apt-get update がセキュリティアップデートを拾ってくれると思って)
しかし、この方法でイメージを再作成してもセキュリティアップデートはインストールされません。Dockerfileの記述自体は全く変更されていないので、たとえ <code>apt-get update</code> の実行結果が変わっていたとしてもDockerはキャッシュを使うからです。</p>

<p>もし、これ避けたければ、<code>-no-cache</code> オプションを使えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker build -no-cache .
</span></code></pre></td></tr></table></div></figure>


<p><a id="instructions_after_add_never_cached_only_versions_prior_to_0.7.3"></a></p>

<h4>ADD以降にある命令はキャッシュされない (ただし、0.7.3以前のバージョンを使っている場合のみ)</h4>

<p>もし、0.7.3以前のバージョンを使っている場合、注意してください！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>From ubuntu
</span><span class='line'>Add myfile /
</span><span class='line'>Run apt-get update
</span><span class='line'>Run apt-get install openssh-server
</span></code></pre></td></tr></table></div></figure>


<p>もしこのようなDockerfileだと、<strong><em>Run apt-get update</em></strong> と <strong><em>Run apt-get install openssh-server</em></strong> は絶対にキャッシュされません。</p>

<p>この挙動は0.7.3で改善されました。ADD以降の行でも、ADDの書き方自身やADDする対象が変更されない限りキャッシュが使われます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;Jeff Beck&quot;</span> &gt; rock.you
</span><span class='line'>
</span><span class='line'>From ubuntu
</span><span class='line'>Add rock.you /
</span><span class='line'>Run add rock.you
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;Eric Clapton&quot;</span> &gt; rock.you
</span><span class='line'>
</span><span class='line'>From ubuntu
</span><span class='line'>Add rock.you /
</span><span class='line'>Run add rock.you
</span></code></pre></td></tr></table></div></figure>


<p>ここでは、<em>rock.you</em> ファイルの内容を変更したので、ADD以降の行ではキャッシュは使われません。</p>

<p><a id="hack_to_run_container_in_the_background"></a></p>

<h2>コンテナをバックグラウンドで動かすハック</h2>

<p>もし、コンテナの起動方法をシンプルにしたければ、<code>docker run -d image your-command</code> を使ってコンテナをバックグラウンドで起動するべきです。
<code>docker run -i -t image your-command</code> の代わりに <code>-d</code> を使うことを勧める理由はコンテナの起動をたった一つのコマンドで行うことができ、かつ <code>Ctrl + P + Q</code> を入力してコンテナをターミナルから切り離す作業をしなくていいからです。</p>

<p>しかし、<code>-d</code> オプションには問題があります。コマンドがフォアグラウンドで実行されていないとコンテナはすぐに終了してしまいます。</p>

<p>apacheをサービスとして起動するコンテナを例に説明しましょう。直感的に次のようにやりたくなるでしょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -d apache-server apachectl start
</span></code></pre></td></tr></table></div></figure>


<p>しかし、これだとコンテナは起動した瞬間に終了します。これは、 <code>apachectl</code> がapacheをデーモン化した瞬間に自身は終了してしまうからです。</p>

<p>Dockerはこのようなコマンドが嫌いです。Dockerはコマンドがフォアグラウンドで起動し続けることを期待しているからです。
もしそうでなければ、Dockerはアプリケーションは終了したと考えてコンテナを終了してしまいます。</p>

<p>この問題はapacheの実行バイナリを直接フォアグラウンドで動かすことで解決できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -e <span class="nv">APACHE_RUN_USER</span><span class="o">=</span>www-data <span class="se">\</span>
</span><span class='line'>                    -e <span class="nv">APACHE_RUN_GROUP</span><span class="o">=</span>www-data <span class="se">\</span>
</span><span class='line'>                    -e <span class="nv">APACHE_PID_FILE</span><span class="o">=</span>/var/run/apache2.pid <span class="se">\</span>
</span><span class='line'>                    -e <span class="nv">APACHE_RUN_DIR</span><span class="o">=</span>/var/run/apache2 <span class="se">\</span>
</span><span class='line'>                    -e <span class="nv">APACHE_LOCK_DIR</span><span class="o">=</span>/var/lock/apache2 <span class="se">\</span>
</span><span class='line'>                    -e <span class="nv">APACHE_LOG_DIR</span><span class="o">=</span>/var/log/apache2 <span class="se">\</span>
</span><span class='line'>                    -d apache-server /usr/sbin/apache2 -D NO_DETACH -D FOREGROUND
</span></code></pre></td></tr></table></div></figure>


<p>ここでしていることは、<code>apachectl</code> がやっていることを手動で行ってapacheを起動しています。このやり方だとapacheはフォアグラウンドで動き続けることができます。</p>

<p>問題はアプリケーションによってはフォアグラウンドで起動する方法がない場合があることです。また、<code>apachectl</code> の例のようにヘルパープログラムがやってくれることを分解して手動でやらないといけないのは大変です。どうすればいいでしょう？</p>

<p>このような場合、<code>tail -f /dev/null</code> を実行したいコマンドに追加すればコンテナはメインのコマンドがバックグラウンドで実行されても <code>tail</code> がフォアグラウンドで起動し続けてくれるので終了しません。このテクニックをさっきのapacheの例で使ってみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -d apache-server apachectl start <span class="o">&amp;&amp;</span> tail -f /dev/null
</span></code></pre></td></tr></table></div></figure>


<p>ずっと良くなりました。 <code>tail -f /dev/null</code> は無害なコマンドなのでこのテクニックはどんな場合にも使うことができるのでおすすめです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gotchas in Writing Dockerfile]]></title>
    <link href="http://kimh.github.io/blog/en/docker/gotchas-in-writing-dockerfile-en/"/>
    <updated>2014-01-18T23:22:00+09:00</updated>
    <id>http://kimh.github.io/blog/en/docker/gotchas-in-writing-dockerfile-en</id>
    <content type="html"><![CDATA[<h2>Contents of This Article</h2>

<h4><a href="#why_do_we_need_to_use_dockerfile">Why do we need to use Dockerfile?</a></h4>

<h4><a href="#add_and_understanding_context_in_dockerfile">ADD and understanding context in Dockerfile</a></h4>

<h4><a href="#treat_your_container_like_a_binary_with_cmd">Treat your container like a binary with CMD</a></h4>

<h4><a href="#difference_between_cmd_and_entrypoint">Difference between CMD and ENTRYPOINT</a></h4>

<ul>
<li><a href="#exec_format_error">exec format error</a></li>
</ul>


<h4><a href="#build_caching_what_invalids_cache_and_not">Build caching: what invalids cache and not?</a></h4>

<ul>
<li><a href="#cache_invalidation_at_one_instruction_invalids_cache_of_all_subsequent_instructions">Cache invalidation at one instruction invalids cache of all subsequent instructions</a></li>
<li><a href="#cache_is_invalid_even_when_adding_commands_that_dont_do_anything">Cache is invalid even when adding commands that don&rsquo;t do anything</a></li>
<li><a href="#cache_is_invalid_when_you_add_spaces_between_command_and_arguments_inside_instruction">Cache is invalid when you add spaces between command and arguments inside instruction</a></li>
<li><a href="#cache_is_used_when_you_add_spaces_around_commands_inside_instruction">Cache is used when you add spaces around commands</a></li>
<li><a href="#cache_is_used_for_non_idempotent_instructions">Cache is used for non-idempotent instructions</a></li>
<li><a href="#instructions_after_add_never_cached_only_versions_prior_to_0.7.3">Instructions after ADD never cached (Only versions prior to 0.7.3)</a></li>
</ul>


<h4><a href="#hack_to_run_container_in_the_background">Hack to run container in the background</a></h4>

<p><a id="why_do_we_need_to_use_dockerfile"></a></p>

<h2>Why do we need to use Dockerfile?</h2>

<p>Dockerfile is not yet-another shell. Dockerfile has its special mission: <strong>automation of Docker image creation.</strong></p>

<p>Once, you write build instructions into Dockerfile, you can build the same image just with <code>docker build</code> command.</p>

<p>Dockerfile is also useful to tell the knowledge of what a job the container does to somebody else. Your teammates can tell what the container is supposed to do just by reading Dockerfile. They don&rsquo;t need to know login to the container and figure out what the container is doing by using ps command.</p>

<p>For these reasons, you <strong>must</strong> use Dockerfile when you build images. However, writing Dockerfile is sometimes painful. In this post, I will write a few tips and gochas in writing Dockerfile so that you love the tool.</p>

<p><a id="add_and_understanding_context_in_dockerfile"></a></p>

<h2>ADD and understanding context in Dockerfile</h2>

<p><strong><em>ADD</em></strong> is the instruction to add local files to Docker image.  The basic usage is very simple. Suppose you want to add a local file called <em>myfile.txt</em> to <em>/myfile.txt</em> of image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>Dockerfile  mydir  myfile.txt
</span></code></pre></td></tr></table></div></figure>


<p>Then your Dockerfile looks like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ADD myfile.txt /
</span></code></pre></td></tr></table></div></figure>


<p>Very simple. However, if you want to add <em>/home/vagrant/myfile.txt</em>, you can&rsquo;t do this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Your have this in your Dockerfile</span>
</span><span class='line'><span class="c"># ADD /home/vagrant/myfile.txt /</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>docker build -t blog .
</span><span class='line'>Uploading context 10240 bytes
</span><span class='line'>Step 1 : FROM ubuntu
</span><span class='line'> ---&gt; 8dbd9e392a96
</span><span class='line'>Step 2 : ADD /home/vagrant/myfile.txt /
</span><span class='line'>Error build: /home/vagrant/myfile.txt: no such file or directory
</span></code></pre></td></tr></table></div></figure>


<p>You got <code>no such file or directory</code> error even if you have the file. Why? This is because <em>/home/vagrant/myfile.txt</em> is not added to the <strong>context</strong> of Dockerfile. Context in Dockerfile means files and directories available to the Dockerfile instructions. Only files and directories in the context can be added during build.
Files and sub directories under the current directory are added to the context. You can see this when you run build command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker build -t blog .
</span><span class='line'>Uploading context 10240 bytes
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s happening here is Docker client makes tarball of entries under the current directory and send it to Docker daemon. The reason why thiis is required is because your Docker daemon may be running on remote machine. That&rsquo;s why the above command says <em>Uploading</em>.</p>

<p>There is a pitfall, though. Since automatically entries under current directories are added to the context, it tries to upload huge files and take longer time for build even if you don&rsquo;t add the file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>Dockerfile  very_huge_file
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>docker build -t blog .
</span><span class='line'>Uploading context xxxxxx bytes
</span><span class='line'>..... <span class="c"># Takes very long time</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the best practice is only placing files and directories that you need to add to image under current directory.</p>

<p><a id="treat_your_container_like_a_binary_with_cmd"></a></p>

<h2>Treat your container like a binary with CMD</h2>

<p>By using CMD instruction in Dockerfile, your container acts like a single executable binary. Suppose you have these instructions in your Dockerfile.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Suppose you have run.sh in the same directory as the Dockerfile</span>
</span><span class='line'>ADD run.sh /usr/local/bin/run.sh
</span><span class='line'>CMD <span class="o">[</span><span class="s2">&quot;/usr/local/bin/run.sh&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you build a container from this Dockerfile and run with <code>docker run -i run_image</code>, it runs <code>/usr/local/bin/run.sh</code> script and exists.</p>

<p>If you don&rsquo;t use <code>CMD</code>, you always have to pass the command to the argument: <code>docker run -i run_image /usr/local/bin/run.sh</code>.</p>

<p>This is not just cumbersome, but also considered to be a bad practice from the perspective of operation.</p>

<p>If you have <code>CMD</code> instruction, the purpose of the container becomes explicit: all what the container wants to do is running the command.</p>

<p>But, if you don&rsquo;t have the instruction, anybody except the person who made the container need to rely on external documentation to know how to run the container properly.</p>

<p>So, in general, you should have <code>CMD</code> instruction in your Dockerfile.</p>

<p><a id="difference_between_cmd_and_entrypoint"></a></p>

<h2>Difference between CMD and ENTRYPOINT</h2>

<p>  <code>CMD</code> and <code>ENTRYPOINT</code> are confusing.</p>

<p>Every commands, either passed as an argument or specified from <code>CND</code> instruction are passed as argument of binary specified in <code>ENTRYPOINT</code>.</p>

<p>  <code>/bin/sh -c</code> is the default entrypoint. So if you specify <code>CMD date</code> without specifying entrypoint, Docker executes it as <code>/bin/sh -c date</code>.</p>

<p>By using entrypoint, you can change the behaviour of your container at run time that makes container operation a bit more flexible.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ENTRYPOINT <span class="o">[</span><span class="s2">&quot;/bin/date&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the entrypoint above, the container prints out current date with different format.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -i clock_container +<span class="s2">&quot;%s&quot;</span>
</span><span class='line'>1404214000
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>docker run -i clock_container +<span class="s2">&quot;%F&quot;</span>
</span><span class='line'>2014-07-01
</span></code></pre></td></tr></table></div></figure>


<p><a id="exec_format_error"></a></p>

<h3>exec format error</h3>

<p>There is one caveat in default entrypoint. For example, you want to execute the following shell script.</p>

<p><strong><em>/usr/local/bin/run.sh</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;hello, world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Dockerfile</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ADD run.sh /usr/local/bin/run.sh
</span><span class='line'>RUN chmod +x /usr/local/bin/run.sh
</span><span class='line'>CMD <span class="o">[</span><span class="s2">&quot;/usr/local/bin/run.sh&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you run the container, your expectation is the container prints out <code>hello, world</code>. However, what you will get is a error message that doesn&rsquo;t make sense.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -i hello_world_image
</span><span class='line'>2014/07/01 10:53:57 <span class="nb">exec </span>format error
</span></code></pre></td></tr></table></div></figure>


<p>You see this message when you didn&rsquo;t put shebang in your script, and because of that, default entrypoint <code>/bin/sh -c</code> does not know how to run the script.</p>

<p>To fix this, you can either add shebang</p>

<p><strong><em>/usr/local/bin/run.sh</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;hello, world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>or you can specify from command line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -entrypoint<span class="o">=</span><span class="s2">&quot;/bin/bash&quot;</span> -i hello_world_image
</span></code></pre></td></tr></table></div></figure>


<p><a id="build_caching_what_invalids_cache_and_not"></a></p>

<h2>Build caching: what invalids cache and not?</h2>

<p>Docker creates a commit for each line of instruction in Dockerfile. As long as you don&rsquo;t change the instruction, Docker thinks it doesn&rsquo;t need to change the image, so use cached image which is used by the next instruction as a parent image.
This is the reason why <code>docker build</code> takes long time in the first time, but immediately finishes in the second time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">time </span>docker build -t blog .
</span><span class='line'>Uploading context 10.24 kB
</span><span class='line'>Step 1 : FROM ubuntu
</span><span class='line'> ---&gt; 8dbd9e392a96
</span><span class='line'>Step 2 : RUN apt-get update
</span><span class='line'> ---&gt; Running in 15705b182387
</span><span class='line'>Ign http://archive.ubuntu.com precise InRelease
</span><span class='line'>Hit http://archive.ubuntu.com precise Release.gpg
</span><span class='line'>Hit http://archive.ubuntu.com precise Release
</span><span class='line'>Hit http://archive.ubuntu.com precise/main amd64 Packages
</span><span class='line'>Get:1 http://archive.ubuntu.com precise/main i386 Packages <span class="o">[</span>1641 kB<span class="o">]</span>
</span><span class='line'>Get:2 http://archive.ubuntu.com precise/main TranslationIndex <span class="o">[</span>3706 B<span class="o">]</span>
</span><span class='line'>Get:3 http://archive.ubuntu.com precise/main Translation-en <span class="o">[</span>893 kB<span class="o">]</span>
</span><span class='line'>Fetched 2537 kB in 7s <span class="o">(</span>351 kB/s<span class="o">)</span>
</span><span class='line'>
</span><span class='line'> ---&gt; a8e9f7328cc4
</span><span class='line'>Successfully built a8e9f7328cc4
</span><span class='line'>
</span><span class='line'>real  0m8.589s
</span><span class='line'>user  0m0.008s
</span><span class='line'>sys   0m0.012s
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">time </span>docker build -t blog .
</span><span class='line'>Uploading context 10.24 kB
</span><span class='line'>Step 1 : FROM ubuntu
</span><span class='line'> ---&gt; 8dbd9e392a96
</span><span class='line'>Step 2 : RUN apt-get update
</span><span class='line'> ---&gt; Using cache
</span><span class='line'> ---&gt; a8e9f7328cc4
</span><span class='line'>Successfully built a8e9f7328cc4
</span><span class='line'>
</span><span class='line'>real  0m0.067s
</span><span class='line'>user  0m0.012s
</span><span class='line'>sys   0m0.000s
</span></code></pre></td></tr></table></div></figure>


<p>However, when cache is used and what invalids cache are sometimes not very clear. Here is a few cases that I found worth to note.</p>

<p><a id="cache_invalidation_at_one_instruction_invalids_cache_of_all_subsequent_instructions"></a></p>

<h4>Cache invalidation at one instruction invalids cache of all subsequent instructions</h4>

<p>This is the basic rule of caching. If you cause cache invalidation at one instruction, subsequent instructions doesn&rsquo;t use cache.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Before</span>
</span><span class='line'>From ubuntu
</span><span class='line'>Run apt-get install ruby
</span><span class='line'>Run <span class="nb">echo </span><span class="k">done</span>!
</span><span class='line'>
</span><span class='line'><span class="c"># After</span>
</span><span class='line'>From ubuntu
</span><span class='line'>Run apt-get update
</span><span class='line'>Run apt-get install ruby
</span><span class='line'>Run <span class="nb">echo </span><span class="k">done</span>!
</span></code></pre></td></tr></table></div></figure>


<p>Since you add <em>Run apt-get update</em> instruction, <strong>all</strong> instructions after that have to be done from the scratch even if they are not changed.
This is inevitable because Dockerfile uses the image built by the previous instruction as a parent image to execute next instruction. So, if you insert an instruction that creates a new parent image, all subsequent instructions cannot use cache because now parent image differs.</p>

<p><a id="cache_invalidation_at_one_instruction_invalids_cache_of_all_subsequent_instructions"></a></p>

<h4>Cache is invalid even when adding commands that don&rsquo;t do anything</h4>

<p><em>This invalidates caching.</em> For example,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Before</span>
</span><span class='line'>Run apt-get update
</span><span class='line'>
</span><span class='line'><span class="c"># After</span>
</span><span class='line'>Run apt-get update <span class="o">&amp;&amp;</span> <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even if <code>true</code> command doesn&rsquo;t change anything of the image, Docker invalids the cache.</p>

<p><a id="cache_is_invalid_when_you_add_spaces_between_command_and_arguments_inside_instruction"></a></p>

<h4>Cache is invalid when you add spaces between command and arguments inside instruction</h4>

<p><em>This invalids cache</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Before</span>
</span><span class='line'>Run apt-get update
</span><span class='line'>
</span><span class='line'><span class="c"># After</span>
</span><span class='line'>Run apt-get               update
</span></code></pre></td></tr></table></div></figure>


<p><a id="cache_is_used_when_you_add_spaces_around_commands_inside_instruction"></a></p>

<h4>Cache is used when you add spaces around commands inside instruction</h4>

<p><em>Cache is valid even if you add space around commands</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Before</span>
</span><span class='line'>Run apt-get update
</span><span class='line'>
</span><span class='line'><span class="c"># After</span>
</span><span class='line'>Run                apt-get update
</span></code></pre></td></tr></table></div></figure>


<p><a id="cache_is_used_for_non_idempotent_instructions"></a></p>

<h4>Cache is used for non-idempotent instructions</h4>

<p>This is kind of pitfall of build caching. What I mean by non-idempotent instructions is the execution of commands that may return different result each time.
For example, <code>apt-get update</code> is not idempotent because the content of updates changes as time goes by.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>From ubuntu
</span><span class='line'>Run apt-get update
</span></code></pre></td></tr></table></div></figure>


<p>You made this Dockerfile and create image. 3 months later, Ubuntu made some security updates to their repository, so you rebuild the image by using the same Dockerfile hoping your new image includes the security updates.
However, this doesn&rsquo;t pick up the updates. Since no instructions or files are changed, Docker uses cache and skips doing <code>apt-get update</code>.</p>

<p>If you don&rsquo;t want to use cache, just pass <code>-no-cache</code> option to build.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker build -no-cache .
</span></code></pre></td></tr></table></div></figure>


<p><a id="instructions_after_add_never_cached_only_versions_prior_to_0.7.3"></a></p>

<h4>Instructions after ADD never cached (Only versions prior to 0.7.3)</h4>

<p>If you use Docker before v7.3, watch out!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>From ubuntu
</span><span class='line'>Add myfile /
</span><span class='line'>Run apt-get update
</span><span class='line'>Run apt-get install openssh-server
</span></code></pre></td></tr></table></div></figure>


<p>If you have Dockerfile like this, <strong><em>Run apt-get update</em></strong> and <strong><em>Run apt-get install openssh-server</em></strong>  will never be cached.</p>

<p>The behavior is changed from v7.3. It caches even if you have ADD instruction, but invalids cache if file content is changed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;Jeff Beck&quot;</span> &gt; rock.you
</span><span class='line'>
</span><span class='line'>From ubuntu
</span><span class='line'>Add rock.you /
</span><span class='line'>Run add rock.you
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;Eric Clapton&quot;</span> &gt; rock.you
</span><span class='line'>
</span><span class='line'>From ubuntu
</span><span class='line'>Add rock.you /
</span><span class='line'>Run add rock.you
</span></code></pre></td></tr></table></div></figure>


<p>Since you change <em>rock.you</em> file, instructions after Add doesn&rsquo;t use cache.</p>

<p><a id="hack_to_run_container_in_the_background"></a></p>

<h2>Hack to run container in the background</h2>

<p>If you want to simplify the way to run containers, you should run your container on background with <code>docker run -d image your-command</code>.
Instead of running with <code>docker run -i -t image your-command</code>, using <code>-d</code> is recommended because you can run your container with just one command and you don&rsquo;t need to detach terminal of container by hitting <code>Ctrl + P + Q</code>.</p>

<p>However, there is a problem with <code>-d</code> option. Your container immediately stops unless the commands are not running on foreground.</p>

<p>Let me explain this by using case where you want to run apache service on a container. The intuitive way of doing this is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -d apache-server apachectl start
</span></code></pre></td></tr></table></div></figure>


<p>However, the container stops immediately after it is started. This is because <code>apachectl</code> exits once it detaches apache daemon.</p>

<p>Docker doesn&rsquo;t like this. Docker requires your command to keep running in the foreground.
Otherwise, it thinks that your applications stops and shutdown the container.</p>

<p>You can solve this by directly running apache executable with foreground option.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -e <span class="nv">APACHE_RUN_USER</span><span class="o">=</span>www-data <span class="se">\</span>
</span><span class='line'>                    -e <span class="nv">APACHE_RUN_GROUP</span><span class="o">=</span>www-data <span class="se">\</span>
</span><span class='line'>                    -e <span class="nv">APACHE_PID_FILE</span><span class="o">=</span>/var/run/apache2.pid <span class="se">\</span>
</span><span class='line'>                    -e <span class="nv">APACHE_RUN_DIR</span><span class="o">=</span>/var/run/apache2 <span class="se">\</span>
</span><span class='line'>                    -e <span class="nv">APACHE_LOCK_DIR</span><span class="o">=</span>/var/lock/apache2 <span class="se">\</span>
</span><span class='line'>                    -e <span class="nv">APACHE_LOG_DIR</span><span class="o">=</span>/var/log/apache2 <span class="se">\</span>
</span><span class='line'>                    -d apache-server /usr/sbin/apache2 -D NO_DETACH -D FOREGROUND
</span></code></pre></td></tr></table></div></figure>


<p>Here we are manually doing what <code>apachectl</code> does for us and run apache executable. With this approach, apache keeps running on foreground.</p>

<p>The problem is that some application does not run in the foreground. Also, we need to do extra works such as exporting environment variables by ourselves. How can we make it easier?</p>

<p>In this situation, you can add <code>tail -f /dev/null</code> to your command. By doing this, even if your main command runs in the background, your container doesn&rsquo;t stop because <code>tail</code> is keep running in the foreground. We can use this technique in the apache case.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -d apache-server apachectl start <span class="o">&amp;&amp;</span> tail -f /dev/null
</span></code></pre></td></tr></table></div></figure>


<p>Much better, right? Since <code>tail -f /dev/null</code> doesn&rsquo;t do any harm, you can use this hack to any applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Docker Containers Asynchronously with Celluloid]]></title>
    <link href="http://kimh.github.io/blog/en/docker/running-docker-containers-asynchronously-with-celluloid/"/>
    <updated>2014-01-11T14:59:00+09:00</updated>
    <id>http://kimh.github.io/blog/en/docker/running-docker-containers-asynchronously-with-celluloid</id>
    <content type="html"><![CDATA[<p><img src="http://kimh.github.io/images/parallel.jpg" alt="" /></p>

<h2>Baleen</h2>

<p>I wrote a ruby gem called <a href="http://rubygems.org/gems/baleen">baleen</a>.
Baleen runs your cucumber tests by using docker containers in parallel. By using docker, baleen archives parallel test execution as well as providing completely isolated environments for each test runner.</p>

<p>For the basic usages, please see <a href="https://github.com/kimh/baleen">github repo</a>. In this post, I will write how balenn runs docker containrs in parallel by using remote API of docker.</p>

<h2>API Library</h2>

<p>baleen server makes API call to Docker. To make API call, I use ruby gem that wraps the call. Currently, there are two gems of docker ruby api.</p>

<ul>
<li><a href="https://github.com/swipely/docker-api">swipely / docker-api</a></li>
<li><a href="https://github.com/geku/docker-client">geku / docker-client</a></li>
</ul>


<p>Unfortunately, docker-client is not under active development, so I will recommend to use docker-api which is also used in baleen.</p>

<h2>Celluloid</h2>

<p>To run tests in parallel, we also have to run containers in parallel. To archive this, the operation of running containers should be done asynchronously and not blocking subsequent containers.</p>

<p>Fortunately, we have <a href="https://github.com/celluloid/celluloid">Celluloid</a> to get the power of asynchronous very easily.</p>

<h2>Brief Explanation of How Baleen Works</h2>

<p>To get the context, let me quicly go over how baleen works with docker.</p>

<p>This is rough image that shows how baleen interacts with Docker. In the image, you can see how the request made by baleen client is processed by baleen server that makes API calls to Docker host.</p>

<p><img src="http://kimh.github.io/images/basic-flow.png" alt="basic flow of interaction" /></p>

<p>The flow is what happens when you run</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>baleen cucumber --image my-test-runner --files features/
</span></code></pre></td></tr></table></div></figure>


<p>The above command does the following things.</p>

<p><strong>1.</strong> Baleen client asks baleen server to run your tests.
<strong>2.</strong> Baleen server receives the request and make API call to docker
<strong>3.</strong> Docker creates and starts containers accordingly
<strong>4.</strong> Baleen server retrieves results and pass them back to baleen client</p>

<p>In this post, we are interested in a bit of <strong>2.</strong> and more in <strong>3.</strong> and <strong>4.</strong></p>

<h2>Making API Call To Run Containers</h2>

<p>Making container object is very straightforward if you use docker-ruby.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">image</span> <span class="o">=</span> <span class="s2">&quot;my-app-runner&quot;</span>
</span><span class='line'><span class="n">test_files</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;test1.feature&quot;</span><span class="p">,</span> <span class="s2">&quot;test2.feature&quot;</span><span class="p">,</span> <span class="s2">&quot;test3.feature&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">containers</span> <span class="o">=</span> <span class="n">test_files</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">test_file</span><span class="o">|</span>
</span><span class='line'>  <span class="ss">Docker</span><span class="p">:</span><span class="ss">:Container</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="s1">&#39;Cmd&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="s2">&quot;-c&quot;</span><span class="p">,</span> <span class="s2">&quot;cucumber features/</span><span class="si">#{</span><span class="n">test_file</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">]</span><span class="p">,</span> <span class="s1">&#39;Image&#39;</span> <span class="o">=&gt;</span> <span class="n">image</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we are passing different test files to each container. The basic idea of baleen is let each container to run a single test. Therefore, if we have three test files, then we need to create three containers.</p>

<p>To start container, just call <strong><em>Container.start</em></strong> method like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">containers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">container</span><span class="o">|</span>
</span><span class='line'>  <span class="n">container</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The important point here is <strong><em>start</em></strong> method immediately returns once it asks docker to start containers. Therefore this loop finishes very quickly.</p>

<h2>Running containers asynchronously</h2>

<p>When you start containers, you have to know when it finishes otherwise you don&rsquo;t know when you can retrieve the results of containers. You can detect when a container finishes by using <strong><em>Container#wait</em></strong>.</p>

<p>However, there is a problem.
Unlike <strong><em>start</em></strong>,<strong><em>wait</em></strong> blocks until the method returns. This behavior isn&rsquo;t good for our purpose (parallel tests running) since you don&rsquo;t want to be blocked at one container.</p>

<p>If you are blocked, you have wait each container one by one which is very inefficient.</p>

<p><img src="http://kimh.github.io/images/synchronous_wait.png" alt="Waiting containers synchronously" /></p>

<p>In this diagram, you can see that you have wait each container that takes <strong>90 sec</strong> including the time to start containers.</p>

<p>What you want to do is waiting all containers at the same time and ask containers to notify you when they finish so that you can retrieve the results of containers.</p>

<p><img src="http://kimh.github.io/images/asynchronous_wait.png" alt="Waiting containers asynchronously" /></p>

<p>In this diagram, the maximum time is the time for waiting the slowest container, which is 30 sec. This makes <strong>60 sec</strong> in total which is faster than synchronous version.</p>

<p>How can we archive this? This is where celluloid comes into play. We will put <strong><em>start</em></strong> and <strong><em>wait</em></strong> into a method called <strong><em>run</em></strong> and calling it asynchronously with the help of celluloid.</p>

<p>Here is how <strong><em>run</em></strong> method looks like (some codes are omitted)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>  <span class="vi">@container</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>  <span class="vi">@container</span><span class="o">.</span><span class="n">wait</span><span class="p">(</span><span class="mi">600</span><span class="p">)</span>
</span><span class='line'>  <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span> <span class="o">=</span> <span class="o">*</span><span class="vi">@container</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="ss">:stream</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">:stdout</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:stderr</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:logs</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">status_code</span><span class="p">:</span> <span class="vi">@container</span><span class="o">.</span><span class="n">json</span><span class="o">[</span><span class="s2">&quot;State&quot;</span><span class="o">][</span><span class="s2">&quot;ExitCode&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">stdout</span><span class="p">:</span> <span class="n">stdout</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">stderr</span><span class="p">:</span> <span class="n">stderr</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, <strong><em>run</em></strong> still blocks. However, by using <a href="https://github.com/celluloid/celluloid/wiki/futures">Futures</a> of celluloid, you can make it asynchronous method.</p>

<p>The code looks something like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">containers</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">container</span><span class="o">|</span> <span class="n">container</span><span class="o">.</span><span class="n">future</span><span class="o">.</span><span class="n">run</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the receiver of <strong><em>run</em></strong> is not the instance of container, but <strong><em>future</em></strong>.</p>

<p>This method magically makes preceding method call asynchronous. In our case, <strong><em>run</em></strong> is called asynchronously.
Therefore, even if <strong><em>run</em></strong> is blocking method, <strong><em>{|container| container.future.run}</em></strong> immediately moves to next loop without waiting containers to finish.</p>

<p>But how can we be notified when containers finish? Well, we actually even don&rsquo;t have to get notified because celluloid does it for you. This is done by calling <strong><em>value</em></strong> method.
Let&rsquo;s retrieve results by modifying previous codes a bit.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">results</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">containers</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">container</span><span class="o">|</span> <span class="n">container</span><span class="o">.</span><span class="n">future</span><span class="o">.</span><span class="n">run</span><span class="p">}</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">actor</span><span class="o">|</span>
</span><span class='line'>  <span class="n">results</span> <span class="o">&lt;&lt;</span> <span class="n">actor</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Methods called with <strong><em>future</em></strong> returns <strong><em>#&lt;Celluloid::Future></em></strong> that has <strong><em>value</em></strong> method. <strong><em>value</em></strong> returns the return value of <strong><em>future</em></strong> whenever it finishes.</p>

<p>So in our case, <strong><em>value</em></strong> returns the return value of <strong><em>run</em></strong> which is the hash of status code, stdout, and stderr. Now we could accomplish what we wanted. We could run multiple containers at one time and retrieve results whenever they finish.</p>

<p>In summary, we archived running containers in parallel by</p>

<ul>
<li>Implementing <strong><em>run</em></strong> method that calls <strong><em>start</em></strong> and <strong><em>wait</em></strong></li>
<li>Calling <strong><em>run</em></strong> asynchronously with future of celluloid</li>
<li>Retrieving return values with <strong><em>value</em></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PFS（Perfect Forward Secrecy）]]></title>
    <link href="http://kimh.github.io/blog/jp/security/understanding-pfs-jp/"/>
    <updated>2014-01-05T15:52:00+09:00</updated>
    <id>http://kimh.github.io/blog/jp/security/understanding-pfs-jp</id>
    <content type="html"><![CDATA[<p><img src="http://kimh.github.io/images/keyblade.jpg" alt="" /></p>

<h2>SSL/TLSの問題</h2>

<h3>なぜPFSが注目されているか</h3>

<p>PFS (Perfect Forward Secrecy)とは暗号化された通信と暗号化するための秘密鍵が両方漏洩しても複合化できません、という鍵交換に関する概念です。
PFSは概念なのでを実装する仕組みが別にあります。２０１４年１月現時点ではPFSはまだあまり普及していないので、主に使われてい鍵交換方式はPFSではありません。</p>

<p>Edward SnowdenがアメリカのNSAの諜報活動をリークしたことをきっかけにPFSは有名になりました。</p>

<p>NSAは</p>

<ul>
<li><p>何らかの方法でWebサーバとクライアント間の通信を盗聴する(いわゆる中間者攻撃)</p></li>
<li><p>通信は暗号化されていてもとにかく保存</p></li>
<li><p>将来、何らかの方法で暗号化に使われた鍵が手に入ったら保存していた通信を解読</p></li>
</ul>


<p>ということを行っていました。PFSではない仕組みを使って通信した場合、このようにして通信の時点では暗号を解読されなくても、将来解読されるという不安が残るわけです。</p>

<h3>SSL/TLSとRSA鍵交換方式</h3>

<p>SSL/TLSはもっとも普及しているWebサーバとクライアント間で通信を暗号化する仕組みです。SSL/TLSにはセッションとコネクションという概念があります。
セッションはサーバとクライアントが通信時に一度確立され、信頼できるサーバかどうか、暗号方式には何を使うかなどの情報をやりとりします。
コネクションで実際にサーバとクライアント間の通信、例えばHTTP GETなどが行われます。コネクション上の通信は暗号化されていますが、この暗号化には共通鍵暗号方式が使われます。
共通鍵暗号方式とは暗号化と複合化に同じ鍵を使う方式のことです。</p>

<p>普段、僕たちが生活していて思い浮かべる暗号化はすべて共通鍵暗号方式です。</p>

<ul>
<li>ボブ&amp;アリス: 二人だけの秘密のメッセージを交換しよう</li>
<li>ボブ: 「アイシテイル」。このメッセージを暗号化するために、各文字を３文字前にずらした、「エオソニオワ」という文字をアリスに教える</li>
<li>アリス: 「エオソニオワ」を３文字後ろにずらして、「アイシテイル」というメッセージを複合化できた</li>
</ul>


<p>この例だと３文字が暗号の鍵です。ボブが暗号化するのにもアリスが複合化するにも同じ「３」を使っているので共通鍵暗号方式です。</p>

<p>共通鍵暗号方式は便利な暗号方式ですが、ひとつ問題があります。それは、どうやって全く知らない二人(SSL/TLSだとサーバとクライアント)が暗号に使う鍵を共有するかということです。
暗号には鍵が必要ですが、鍵を共有するために平文で通信して鍵が第3者に盗み見られたら元も子もありません。
ボブとアリスの例だと3という数字を鍵として使うためには、二人の間で3を鍵にしようと何らかの方法で決めなければいけません。
もし、この取り決めを第三者に覗き見された場合、それ以降の通信が全部解読されてしまいます。鍵は絶対に安全な方法で共有されないければいけないのです。</p>

<p>SSL/TLSでもコネクションで使う共通鍵を共有する時にこの問題に出くわします。一つの、そして、もっとも普及している解決方法はRSA鍵交換方式です。
この記事ではRSA鍵交換方式については説明しませんが、簡単にいうサーバとクライアントで別々の鍵を使って共通鍵を暗号化してから共有します。複合化にも別々の鍵を使います。</p>

<p>別々の鍵を使うことで、鍵共有問題を解決しているのですが、ここにPFSが解決しようとする問題があります。それは、もし共通鍵を暗号化する時に使った秘密鍵が盗まれた場合、その鍵ですべての通信の暗号を解読されてしまうという問題です。</p>

<ul>
<li>Big Brother社のサーバとクライアント間の暗号化された通信を盗聴してハードディスクにとりあず保存</li>
<li>3年後、Big Brother社のサーバリプレース時に廃棄されたハードディスクを盗んでそこに保存されていた秘密鍵をゲット</li>
<li>秘密鍵を使って保存していた３年分の暗号化された通信を解析して、暗号化に使われた共通鍵をゲット</li>
<li>共通鍵で通信の複合化</li>
</ul>


<p>PFSではない仕組みを使って通信した場合、通信した時点では安全でも将来秘密鍵が何らかの方法で漏洩した場合、過去の暗号化された通信が保存されていれば内容が解読されてしまうという脆弱性が存在します。</p>

<p>ちなみに、PFSのFはForwardで、これは<strong>前方</strong>_という意味ではなく<strong>将来</strong>とか&#8221;未来&#8221;とかの意味だと思われます。つまり、PFSは<strong>完全に(P)に未来(F)においても通信の秘密(S)が保たれる</strong>という意味になります。</p>

<h2>EDH鍵交換方式</h2>

<p>RSA鍵交換方式の問題点は実際の通信の内容を暗号化するための共通鍵を暗号化するために、サーバに保存されている秘密鍵を使っていることでした。EDH鍵交換方式を使うと、決まった鍵の代わりにセッション毎に
クライアントとサーバ側でそれぞれ生成する異なったランダムな数字を鍵と使うことができます。こうすれば、暗号化されて通信を盗聴されていても、それぞれの通信はセッション毎にランダムで生成された
鍵で暗号化されているので複合化は格段に難しくなります。</p>

<p>これを実現するためにEDHは<strong>Diffie-Hellman</strong>鍵共有という方法を使います。DH鍵共有使えば、全く知らない二人の間で事前に何の準備もせずに鍵を共有することができます。</p>

<h3>離散対数問題</h3>

<p>この魔法のような仕組みは離散対数問題という数学的性質を応用しています。</p>

<p>離散対数問題とは、</p>

<p><em>g<sup>a</sup> mod p</em> を計算して A を求めることは簡単だけど、<em>g, p, A</em>がわかってもそこから<em>a</em>を求めるのはとても時間がかかってしまうという性質のことです。</p>

<p>下記の計算は簡単にできる。</p>

<ul>
<li><em>a=3, g=5, p=7</em> とする</li>
<li><em>g<sup>a</sup> mod p</em> は <em>5<sup>3</sup> mod 7</em> となる</li>
<li>これの答えは6となる</li>
</ul>


<p>だけど、下記の計算は難しい。</p>

<ul>
<li><em>a=x, g=5, p=7, A=6</em> とする</li>
<li><em>5<sup>x</sup> mod 7 = 6</em> となる<em>x</em>は何か？</li>
<li><em>x=1</em>と仮定すると、<em>5<sup>1</sup> mod 7 = 5</em> となり、<em>6</em>ではないので間違い</li>
<li><em>x=2</em>と仮定すると、<em>5<sup>2</sup> mod 7 = 4</em> となり、<em>6</em>ではないので間違い</li>
<li><em>x=3</em>と仮定すると、<em>5<sup>3</sup> mod 7 = 6</em> となるので<em>x=3</em>が正解</li>
</ul>


<p>今回はxが小さいから運良く3回の計算で答えにたどり着いたけど、もし<em>x</em>が大きかったら順番に計算するのはとても時間がかかってしまう。これが離散対数問題です。</p>

<h3>Diffie-Hellman (ディフィー・ヘルマン)鍵共有</h3>

<p>Diffie-Hellman鍵共有、(以下DHと省略)は離散対数問題を使って、第3者に知られることなく鍵を共有することができます。</p>

<p>例としてアリスとボブの間で暗号化するための鍵を共有する場合を考えます。ただし、アリスとボブは事前に鍵が何かは知りません。</p>

<ul>
<li>アリスはランダムに数字を生成して、3という数字を得ます。この数字は誰にも教えずアリスだけの秘密の数字とします。</li>
<li>ボブも同じくランダムな数字を生成して、4という数字を得ます。これも誰にも教えません。</li>
<li>二人は、<em>g=4, p=7</em>と決めます。二人とも知っているので、gとpは秘密ではありません。秘密ではないので平文で送ります。</li>
<li>アリスは<em>g<sup>a</sup> mod p (4<sup>3</sup> mod 7)</em>を計算します。これは、1になります。この1という数字をボブに教えます。これは平文で送ります。</li>
<li>ボブも4<sup>4</sup> mod 7を計算します。これは、4になります。この4という数字をアリスに教えます。これは平文で送ります。</li>
<li>アリスはボブからもらった4という数字を使って、<em>4<sup>3</sup> mod 7</em> という計算をします。これは、1となります。</li>
<li>ボブはアリスからもらった1という数字を使って、<em>1<sup>4</sup> mod 7</em> という計算をします。これは、1となります。</li>
<li>アリスとボブは1という数字を共有することができたので、これを共有鍵として使うことができます。</li>
</ul>


<p>ポイントは</p>

<ul>
<li>アリスとボブはランダムで別々に生成した数字をお互いに秘密にしておくこと</li>
<li>これ以外の数字、g, pと自分の秘密のランダム数字を使って計算した<em>g<sup>a</sup> mod p</em>は盗聴されても構わないので平文で送る</li>
<li>お互いに決めたpと相手から送られてきた<em>g<sup>a</sup> mod p</em>に対して、自分の秘密ランダム数字を使って計算するとアリスとボブは同じ数字を得ることができる。</li>
</ul>


<p>最後のポイントが一番重要です。なぜ、二人は別々の秘密ランダム数字を使っているのに最終的に同じ値を得ることできるのか？</p>

<p>さっきのやりとりを具体的な数字を記号に置き換えて計算してみます。</p>

<ul>
<li><em>x、y</em>をアリスとボブそれぞれの秘密ランダム数字とする</li>
<li><em>g, p</em>を共有する</li>
<li><em>g<sup>x</sup> mod p = A、g<sup>y</sup> mod p = B</em>とする</li>
<li>アリスは<em>B<sup>x</sup> mod p</em>を計算する。Bは<em>g<sup>y</sup> mod p</em>なので、<em>(g<sup>y</sup> mod p)<sup>x</sup> mod p</em>に置き換えるられる。これはさらに、<em>g<sup>x*y</sup> mod p</em> に置き換えることができる。</li>
<li>ボブは<em>A<sup>y</sup> mod p</em>を計算する。Aは<em>g<sup>x</sup> mod p</em>なので、<em>(g<sup>x</sup> mod p)<sup>y</sup> mod p</em>に置き換えるられる。これは、<em>g<sup>x*y</sup> mod p</em> に置き換えることができる。</li>
</ul>


<p>つまり、アリスの<em>B<sup>x</sup> mod p</em>とボブの<em>A<sup>x</sup> mod p</em>は同じ値を計算していることになるので、二人は同じ値を得ることができます。</p>

<p>離散対数問題の性質上、g, p, A, Bがわかってもxとyを計算するのはとても難しいので、第3者はたとえアリスとボブの通信を盗聴できたとしても共通鍵は知ることができません。</p>

<p>また、xとyはランダムに生成される数字で各セッションで使い切りです。xとyがランダムなのでそこから生成される共通鍵もランダムなので、RSA鍵共有方式のように同じ鍵を使い回すことがありません。
EDHのEは「Ephemeral」で、はかないとか短命とかいう意味で、これはEDHで生成される鍵が使い捨てということから来ています。</p>

<h2>以下の資料に感謝</h2>

<ul>
<li><a href="http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html">SSL/TLS &amp; Perfect Forward Secrecy</a></li>
<li><a href="http://blog.livedoor.jp/k_urushima/archives/1728348.html">TwitterのPerfect Forward Secrecy(PFS)対応</a></li>
<li><a href="http://www.atmarkit.co.jp/ait/articles/0101/16/news002.html">http://www.atmarkit.co.jp/ait/articles/0101/16/news002.html</a></li>
<li><a href="http://saltheads.blog134.fc2.com/blog-entry-35.html">離散対数問題を使った公開鍵暗号 (ElGamal暗号、Diffe-Hellman鍵共有法)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Trusted Builds to generate Docker image automatically]]></title>
    <link href="http://kimh.github.io/blog/en/docker/using-trusted-builds-to-generate-docker-image-automatically/"/>
    <updated>2013-11-10T08:20:00+09:00</updated>
    <id>http://kimh.github.io/blog/en/docker/using-trusted-builds-to-generate-docker-image-automatically</id>
    <content type="html"><![CDATA[<p><img src="http://kimh.github.io/images/construction.png" alt="" /></p>

<h2>Trusted Builds</h2>

<p>Recently, <a href="http://index.docker.io/" title="index.docker.io">index.docker.io</a> released a new feature called &ldquo;Trusted Builds&rdquo;.
Trusted Builds allows you to automatically builds a Docker container according to Dockerfile when you push to your Github repository.
In this post, I will share how to use it and one pitfall that I experienced.</p>

<h3>Place a Dockerfile in your repo</h3>

<p>Trusted Builds knows how to make a new image by reading Dockerfile in your repository and uses repository as a context for the Dockerfile.
So, you first need to add a Dockerfile to your repository. Let&rsquo;s put a very simple Dockerfile.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>from ubuntu
</span></code></pre></td></tr></table></div></figure>


<p>This Dockerfile tells Trusted Builds to create a new image based on ubuntu image. Add the file and push to Github.</p>

<h3>Link Github and register repository</h3>

<p>To use Trusted Builds, you need to link your Github account. Login to <a href="http://index.docker.io/" title="index.docker.io">index.docker.io</a> and go to <a href="https://index.docker.io/builds/github/select/">setting page</a>.
Once you link Github accountm, you should see the list of your public repositories. Select the repository that you want to build and enter information used by Trusted Builds.</p>

<h5>Default Branch</h5>

<p>Branch name that Trusted Builds uses</p>

<h5>Repo Name</h5>

<p>This is used as a name of new image. Probably, Repo here means Docker&rsquo;s repository, not Github repository. <strong>You should pick up the name carefully because you can&rsquo;t change the name later.</strong></p>

<h5>Docker Tag Name</h5>

<p>The name of tag that you want put to a image</p>

<h5>Dockerfile Location</h5>

<p>Specify the location of Dockerfile in your repo. As I mentioned earlier, Trusted Builds uses your repo as a build context. Therefore, the top directory of your repo becomes the root of file path.
For example, if you put Dockerfile just under your repo&rsquo;s top directory, you should specify <strong>/</strong> as Dockerfile location. Note that you only need to specify the directory name, not the path of Dockerfile.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Good</span>
</span><span class='line'>/
</span><span class='line'>/build
</span><span class='line'>
</span><span class='line'><span class="c"># Bad</span>
</span><span class='line'>/Dockerfile
</span><span class='line'>/build/Dockerfile
</span></code></pre></td></tr></table></div></figure>


<p>Also note the file name should be Dockerfile. If you put other name, Trusted Builds can&rsquo;t find the file.</p>

<p>You should be ready now! Press Submit button and a new build will start. Once builds finish, you will see a new image in the list of your repository.</p>

<h2>A few common mistakes</h2>

<p>Did your build succeed? In my case, I made try &amp; error several times until it succeeds. Let me share them so you can save your time.</p>

<h5>Is the file name of Dockerfile correct?</h5>

<p>The file name of your Dockerfile should be <em>Dockerfile</em>.</p>

<h5>Did you specify correct path to your Dockerfile?</h5>

<p>Dockerfile Location should be the path of directory where you have Dockerfile, not the whole path name of Dockerfile. Check the examples above.</p>

<h5>Is your Dockerfile correct?</h5>

<p>Maybe you put wrong instruction in Dockerfile. You can test this by manually building a image by using docker command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker build -t kimh/test_dockerfile github.com/kimh/baleen
</span></code></pre></td></tr></table></div></figure>


<p>The above command assumes that you have Dockerfile at the top directory of your repo. If the command fails, make sure your instructions are correct.</p>

<h5>Do you have submodule in your repository?</h5>

<p>This one took the most of debugging time for me. Currently, <a href="https://groups.google.com/forum/#!topic/docker-user/ZothnJ46Pps">Trusted Builds does not support git submodule</a>, so builds fails if you have a submodule in your repository.
For now, you have to remove the submodule to make build succeed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerを使ってCucumberテストを並列実行する]]></title>
    <link href="http://kimh.github.io/blog/jp/docker/using-docker-to-run-cucumber-tests-in-parallel-jp/"/>
    <updated>2013-09-10T22:15:00+09:00</updated>
    <id>http://kimh.github.io/blog/jp/docker/using-docker-to-run-cucumber-tests-in-parallel-jp</id>
    <content type="html"><![CDATA[<p><img src="http://kimh.github.io/images/homepage-docker-logo.png" alt="" /></p>

<h2>Dockerってなに？</h2>

<p><a href="https://www.docker.io/">Docker</a> は一言で言えばLXCのラッパーです。Dockerを使うことですこし面倒なLXCをとても簡単に操作することができるようになります。それに加えて、Dockerは&#8221;Union File System&#8221;という機能があり、これのおかげでLXCコンテナのバージョン管理を<em>commit</em>や<em>push</em>など使い慣れたインターフェイスで操作することができます。まるでGitのLXC版のような感覚です。</p>

<p>LXCとは仮想化技術のひとつでホストマシンからは隔離されたコンテナと呼ばれる仮想マシンを実行することができます。ハイパーバイザー型の仮想化の代表であるXen Serverなどとは異なり、LXCは軽量な仮想マシンを作成することができます。とても軽量なので、通常は同じリソースでハイパーバイザー型の仮想マシンよりも多くのマシンを実行することができます。</p>

<p>この軽量とLXCの性質が生きてくるのは、多くのテストを実行することだと思います。</p>

<p>テストを実行する時、できるだけ各テストが他のテストに影響を与えないことに気を配っていると思います。これをするためには、いくつもの仮想マシンを立ち上げて、そこで各テストを実行するというやり方があると思います。ハイパーバイザー型の仮想マシンでもこの方法を実行できますが、ハイパーバイザー型のマシンは開始/停止に時間がかかるため、テスト全体の実行時間が増えてしまうという欠点があります。
しかし、LXCならこの問題を克服できます。なぜなら、LXCではマシンを実行するのは１つのプロセスを起動するのと同じくらい軽量だからです。</p>

<h2>Dockerをインストールしてみよう</h2>

<p>DockerのインストールはUbuntu12.04を使っていればとても簡単です。</p>

<p>以下は<a href="http://docs.docker.io/en/latest/installation/ubuntulinux/">Dockerのサイトに</a>に記載されていた手順です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install linux-image-generic-lts-raring linux-headers-generic-lts-raring
</span><span class='line'>sudo reboot
</span><span class='line'>sudo sh -c <span class="s2">&quot;curl https://get.docker.io/gpg | apt-key add -&quot;</span>
</span><span class='line'>sudo sh -c <span class="s2">&quot;echo deb https://get.docker.io/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list&quot;</span>
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install lxc-docker
</span></code></pre></td></tr></table></div></figure>


<p>これでコンテナをDockerから作成できるようになりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker run -i -t ubuntu /bin/bash
</span></code></pre></td></tr></table></div></figure>


<p>もし、Macを使っているならDockerをVagramtのUbuntuマシンで試すことができます。この場合のインストール方法は<a href="http://docs.docker.io/en/latest/installation/vagrant/">ここ</a>にあります。
しかし、初めはUbuntuにインストールして試してみることをおすすめします。一度Vagrant上で動かしてみましたが、Ubuntuで動かしたよりもコンテナの実行速度が遅く感じられました。もしかしたら、すでに仮想化されているVagrant上で実行しているからかもしれません。</p>

<h2>環境をセットアップする</h2>

<p>上述したようにDockerはGitにとてもよく似たインターフェイスを備えています。Dockerのイメージを<a href="https://index.docker.io/">Dockerのパブリックレポジトリ</a>からPullしてきてそれをベースにして自分の好きな変更を加えてCommitしたら、またそれをPushできます。
今回はCucumberのテストを実行するのでRubyの実行環境があるコンテナが必要になります。もちろん、自分でコンテナを作成することもできますが今回は私が作成したイメージを使いましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># まずrootユーザになります</span>
</span><span class='line'>sudo -s
</span><span class='line'>
</span><span class='line'><span class="c"># イメージをPullします</span>
</span><span class='line'>docker pull kimh/ruby-base
</span><span class='line'>
</span><span class='line'><span class="c"># イメージでechoコマンドを実行してみましょう</span>
</span><span class='line'>docker run kimh/ruby-base <span class="nb">echo</span> <span class="s2">&quot;Running on Docker&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>今度はコンテナにログインして、テスト用のアプリケーションをインストールしましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># コンテナにログインします</span>
</span><span class='line'>docker run -i -t kimh/ruby-base /bin/bash
</span><span class='line'><span class="nb">cd</span> /git
</span><span class='line'>git clone https://github.com/kimh/docker_demo
</span><span class='line'><span class="nb">cd </span>docker_demo/ci_app
</span><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>この時点で２つの比較的時間がかかる作業をしたので（イメージのPullとbundle installです）コンテナの変更を保存しましょう。それをするには、変更をCommitしてイメージに保存します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ここで exit とタイプしてはダメです！タイプするとマシンが終了して一からやり直しになってしまいます。</span>
</span><span class='line'><span class="c"># 代わりに、Ctrl+p とタイプしてから Ctrl+q とタイプすることで終了せずにコンソールから抜けることができます。</span>
</span><span class='line'>Ctrl+p
</span><span class='line'>Ctrl+q
</span><span class='line'><span class="c"># コンテナのidを調べます</span>
</span><span class='line'>docker ps <span class="c"># 今回はidは 23fd82dcc088 でした。多分実行環境によって違うかも？</span>
</span><span class='line'>docker commit 23fd82dcc088 kimh/ruby-base
</span></code></pre></td></tr></table></div></figure>


<p>これでCucumberテストを実行する環境が整いました。コンテナを起動してテストを一つ実行してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run kimh/ruby-base /bin/bash -c <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  source /etc/profile</span>
</span><span class='line'><span class="s2">  cd /git/docker_demo/ci_app</span>
</span><span class='line'><span class="s2">  export LC_CTYPE=&quot;</span>ja_JP.UTF-8<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  export RAILS_ENV=test</span>
</span><span class='line'><span class="s2">  bundle exec rake cucumber</span>
</span><span class='line'><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>このスクリプトでDockerはCucumberテストをkimh/ruby-baseコンテナ上で実行しました。</p>

<p>いよいよ最後にテストを並列実行してみましょう。考え方としては複数のコンテナを実行して、各コンテナに一つのCucumberテストを実行させます。今回は５つのコンテナを並列で実行してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">DID</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nv">container</span><span class="o">=</span><span class="s2">&quot;kimh/ruby-base:latest&quot;</span>
</span><span class='line'><span class="nv">dir</span><span class="o">=</span><span class="s2">&quot;/git/docker_demo/ci_app&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>feature in <span class="o">{</span>0..4<span class="o">}</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nv">DID</span><span class="o">=</span><span class="nv">$DID</span><span class="s2">&quot; &quot;</span><span class="sb">`</span>sudo docker run -d <span class="nv">$container</span> /bin/bash -c <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  source /etc/profile</span>
</span><span class='line'><span class="s2">  cd $dir</span>
</span><span class='line'><span class="s2">  export LC_CTYPE=&quot;</span>ja_JP.UTF-8<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  export RAILS_ENV=test</span>
</span><span class='line'><span class="s2">  bundle exec rake cucumber</span>
</span><span class='line'><span class="s2">  &quot;</span><span class="sb">`</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>docker <span class="nb">wait</span> <span class="nv">$DID</span>
</span></code></pre></td></tr></table></div></figure>


<p>このスクリプトのポイントは２つです。</p>

<p>１つめは、実行したコンテナのidをDIDという変数に保存していることです。この変数は各コンテナのステータスコード（テストが成功したか失敗したか）を後で知る必要があるからです。</p>

<p>２つめは、<em>docker wait</em>コマンドにコンテナの実行idを渡していることです。こうすると、シェルはコンテナが終了するまでブロックして、各コンテナのステータスコードを返します。</p>

<p>今回だとすべてのテストはパスするはずなので、五回連続で0が表示されるはずです。（0はCucumberではパスしたという意味です）</p>

<h1>まとめ</h1>

<p>今回はDockerの基本的な使い方とそれを使ってのテストの並列実行をしました。各テストはコンテナ上の独立した環境で実行されます。今回の例では同じテストを５台のコンテナ上で実行したのであまり意味はありませんが、
異なる複数のテストを並列で実行するのも簡単にできます。今回はこんな感じでやりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">DID</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nv">container</span><span class="o">=</span><span class="s2">&quot;kimh/ruby-base:nice&quot;</span>
</span><span class='line'><span class="nv">dir</span><span class="o">=</span><span class="s2">&quot;/git/your_repo&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>feature in <span class="sb">`</span>find  ./features/<span class="sb">`</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nv">DID</span><span class="o">=</span><span class="nv">$DID</span><span class="s2">&quot; &quot;</span><span class="sb">`</span>docker run -d <span class="nv">$container</span> /bin/bash -c <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  source /etc/profile</span>
</span><span class='line'><span class="s2">  cd $dir</span>
</span><span class='line'><span class="s2">  export LC_CTYPE=&quot;</span>ja_JP.UTF-8<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  export RAILS_ENV=test</span>
</span><span class='line'><span class="s2">  bundle exec cucumber $feature -r features/</span>
</span><span class='line'><span class="s2">  &quot;</span><span class="sb">`</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>docker <span class="nb">wait</span> <span class="nv">$DID</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using docker to run cucumber tests in parallel]]></title>
    <link href="http://kimh.github.io/blog/en/docker/using-docker-to-run-cucumber-tests-in-parallel/"/>
    <updated>2013-09-08T21:30:00+09:00</updated>
    <id>http://kimh.github.io/blog/en/docker/using-docker-to-run-cucumber-tests-in-parallel</id>
    <content type="html"><![CDATA[<p><img src="http://kimh.github.io/images/homepage-docker-logo.png" alt="" /></p>

<h2>What is Docker?</h2>

<p>You can think of <a href="https://www.docker.io/">Docker</a> as a wrapper to create and run Linux LXC very easily. In addition to that, Docker comes with very unique technology called &ldquo;union file system&rdquo; that allows you to manage the version of your containers with familiar command like <em>commit</em> or <em>push</em> just like you are using git.</p>

<p>LXC is the one of the virtualisation technology that allows you to run a container that is isolated from its host machine. In contrast to hypervisor type virtualisation like Xen Server, the LXC provides lightweight virtual machine. Typically, you can run more virtual machines in a host than hypervisor type with less resource.</p>

<p>Because of the lightweight nature of LXC, one very good use of it is running many tests.</p>

<p>You want to run your each test in very isolated so that running one test doesn&rsquo;t give other tests any side effects. To do that, running a each test in isolated virtual machine is very natural way. You can do this by using hypervisor type of virtual machine, but it gives you some cost starting and stopping hypervisor type of virtual machine isn&rsquo;t very fast.</p>

<p>With LXC, you can easily archive this because running a machine is as light as running a process!!</p>

<h2>Installing Docker</h2>

<p>It is pretty easy to install Docker if you are using Ubuntu 12.04.</p>

<p>The below instructions are from <a href="http://docs.docker.io/en/latest/installation/ubuntulinux/">instruction page of Docker</a> which worked for me.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install linux-image-generic-lts-raring linux-headers-generic-lts-raring
</span><span class='line'>sudo reboot
</span><span class='line'>sudo sh -c <span class="s2">&quot;curl https://get.docker.io/gpg | apt-key add -&quot;</span>
</span><span class='line'>sudo sh -c <span class="s2">&quot;echo deb https://get.docker.io/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list&quot;</span>
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install lxc-docker
</span></code></pre></td></tr></table></div></figure>


<p>Now you can provision a container via Docker.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker run -i -t ubuntu /bin/bash
</span></code></pre></td></tr></table></div></figure>


<p>If you are using Mac, you need to run Docker on vagrant since Docker doesn&rsquo;t suppor Mac at this point. Installing on Mac is explained <a href="http://docs.docker.io/en/latest/installation/vagrant/">here</a>.
However, I recommend you first to try Docker on Ubuntu. I tried Docker on Vagant VM, too, but provisioned container does not run as fast as running on Ubuntu probably because Vagrant is already running virtualized resource.</p>

<h2>Setting up test environment</h2>

<p>As I mentioned earlier, Docker provides very similar interface to git. You can pull docker images from <a href="https://index.docker.io/">public Docker repository</a> and use it to make your own images and then push.
Since we are running cucumber test, you need a container that has environment to run ruby program. Although you can create such container very easily, let&rsquo;s save time by using the image that I created before.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># You need to be root to use Docker</span>
</span><span class='line'>sudo -s
</span><span class='line'>
</span><span class='line'><span class="c"># Pulling images to your machine</span>
</span><span class='line'>docker pull kimh/ruby-base
</span><span class='line'>
</span><span class='line'><span class="c"># Now let&#39;s see if it works</span>
</span><span class='line'>docker run kimh/ruby-base <span class="nb">echo</span> <span class="s2">&quot;Running on Docker&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s login to the container you just pulled and install our test app.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Login to the container</span>
</span><span class='line'>docker run -i -t kimh/ruby-base /bin/bash
</span><span class='line'><span class="nb">cd</span> /git
</span><span class='line'>git clone https://github.com/kimh/docker_demo
</span><span class='line'><span class="nb">cd </span>docker_demo/ci_app
</span><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>Now, since we have done time-consuming operation (pulling a image and bundle install), we want to save the state of the container. We will commit the change of container and save to images.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Dont&#39;t type exit on logged in container. If you do, your changes will be discarded!!</span>
</span><span class='line'><span class="c"># Instead, you type Ctrl+p then Ctrl+q to quit from the console.</span>
</span><span class='line'>Ctrl+p
</span><span class='line'>Ctrl+q
</span><span class='line'><span class="c"># First, you need to know the id of container</span>
</span><span class='line'>docker ps <span class="c"># In my case, it gives me 23fd82dcc088. Maybe different in different env?</span>
</span><span class='line'>docker commit 23fd82dcc088 kimh/ruby-base
</span></code></pre></td></tr></table></div></figure>


<p>You are ready to run the cucumber test on a container. Let&rsquo;s start only running one container.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run kimh/ruby-base /bin/bash -c <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  source /etc/profile</span>
</span><span class='line'><span class="s2">  cd /git/docker_demo/ci_app</span>
</span><span class='line'><span class="s2">  export LC_CTYPE=&quot;</span>ja_JP.UTF-8<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  export RAILS_ENV=test</span>
</span><span class='line'><span class="s2">  bundle exec rake cucumber</span>
</span><span class='line'><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the script above, Docker runs kimh/ruby-base and execute bash script which runs cucumber test.</p>

<p>Finally, let&rsquo;s run tests in paralell. The idea is running multiple containers and each container run one cucumber test. In this case, I will run 5 containers in parallel.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">DID</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nv">container</span><span class="o">=</span><span class="s2">&quot;kimh/ruby-base:latest&quot;</span>
</span><span class='line'><span class="nv">dir</span><span class="o">=</span><span class="s2">&quot;/git/docker_demo/ci_app&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>feature in <span class="o">{</span>0..4<span class="o">}</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nv">DID</span><span class="o">=</span><span class="nv">$DID</span><span class="s2">&quot; &quot;</span><span class="sb">`</span>sudo docker run -d <span class="nv">$container</span> /bin/bash -c <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  source /etc/profile</span>
</span><span class='line'><span class="s2">  cd $dir</span>
</span><span class='line'><span class="s2">  export LC_CTYPE=&quot;</span>ja_JP.UTF-8<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  export RAILS_ENV=test</span>
</span><span class='line'><span class="s2">  bundle exec rake cucumber</span>
</span><span class='line'><span class="s2">  &quot;</span><span class="sb">`</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>docker <span class="nb">wait</span> <span class="nv">$DID</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are two things to note in above script.</p>

<p>First, the script stores the ID&rsquo;s of running containers into DID variable. I need the variable because I want to know the status code (whether test succeeds or fails) later.</p>

<p>Second, by calling <em>docker wait</em> against container ID&rsquo;s, the shell reports me the status code of each container and blocks until all container&rsquo;s execution finishes.</p>

<p>You should see consecutive status code of 0 since all tests should pass. (cucumber returns 0 for success).</p>

<h1>Wrapping up</h1>

<p>You learned basics things about Docker and how to use it to run cucumber tests in parallel. Since each test is invoked by a container,
tests are run in parallel and isolated environments. In this example, we only ran one test in multiple containers, so it is not very useful, but you see how you can passes different tests
to each container and run them at once. This could be something like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">DID</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nv">container</span><span class="o">=</span><span class="s2">&quot;kimh/ruby-base:nice&quot;</span>
</span><span class='line'><span class="nv">dir</span><span class="o">=</span><span class="s2">&quot;/git/your_repo&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>feature in <span class="sb">`</span>find  ./features/<span class="sb">`</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nv">DID</span><span class="o">=</span><span class="nv">$DID</span><span class="s2">&quot; &quot;</span><span class="sb">`</span>docker run -d <span class="nv">$container</span> /bin/bash -c <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  source /etc/profile</span>
</span><span class='line'><span class="s2">  cd $dir</span>
</span><span class='line'><span class="s2">  export LC_CTYPE=&quot;</span>ja_JP.UTF-8<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  export RAILS_ENV=test</span>
</span><span class='line'><span class="s2">  bundle exec cucumber $feature -r features/</span>
</span><span class='line'><span class="s2">  &quot;</span><span class="sb">`</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>docker <span class="nb">wait</span> <span class="nv">$DID</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
